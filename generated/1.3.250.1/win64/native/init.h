Napi::Object Init(Napi::Env env, Napi::Object exports) {
    prepareAlignmentData();
    VulkanWindow::Initialize(env, exports);
    exports["getMemoryAlignment"] = Napi::Function::New(env, getMemoryAlignment, "getMemoryAlignment");
    exports["allocateString"] = Napi::Function::New(env, allocateString, "allocateString");
    exports["allocateStrings"] = Napi::Function::New(env, allocateStrings, "allocateStrings");

    exports["VK_MAKE_VERSION"] = Napi::Function::New(env, _VK_MAKE_VERSION, "VK_MAKE_VERSION");
    exports["VK_VERSION_MAJOR"] = Napi::Function::New(env, _VK_VERSION_MAJOR, "VK_VERSION_MAJOR");
    exports["VK_VERSION_MINOR"] = Napi::Function::New(env, _VK_VERSION_MINOR, "VK_VERSION_MINOR");
    exports["VK_VERSION_PATCH"] = Napi::Function::New(env, _VK_VERSION_PATCH, "VK_VERSION_PATCH");
    exports["VK_API_VERSION_1_0"] = Napi::Number::New(env, VK_MAKE_VERSION(1, 0, 0));
    exports["VK_API_VERSION_1_1"] = Napi::Number::New(env, VK_MAKE_VERSION(1, 1, 0));
    exports["VK_API_VERSION_1_2"] = Napi::Number::New(env, VK_MAKE_VERSION(1, 2, 0));
    exports["VK_API_VERSION_1_3"] = Napi::Number::New(env, VK_MAKE_VERSION(1, 3, 0));

    exports["vts_native_vkMapMemoryToArrayBuffer"] = Napi::Function::New(env, vts_native_vkMapMemoryToArrayBuffer, "vts_native_vkMapMemoryToArrayBuffer");
    exports["vts_native_setupDebugCallback"] = Napi::Function::New(env, vts_native_setupDebugCallback, "vts_native_setupDebugCallback");
    exports["getScratchBuffer"] = Napi::Function::New(env, vts_native_getScratchBuffer, "vts_native_getScratchBuffer");
    exports["getAddressAtScratchBufferOffset"] = Napi::Function::New(env, vts_native_getAddressAtScratchBufferOffset, "vts_native_getAddressAtScratchBufferOffset");
    exports["memsetScratchBufferSlice"] = Napi::Function::New(env, vts_native_memsetScratchBufferSlice, "vts_native_memsetScratchBufferSlice");
    exports["memsetScratchBufferMove"] = Napi::Function::New(env, vts_native_memsetScratchBufferMove, "vts_native_memsetScratchBufferMove");
    exports["memsetScratchBufferZero"] = Napi::Function::New(env, vts_native_memsetScratchBufferZero, "vts_native_memsetScratchBufferZero");
    exports["memcpyArrayBuffers"] = Napi::Function::New(env, vts_native_memcpyArrayBuffers, "vts_native_memcpyArrayBuffers");

exports["vts_native_vkCreateInstance"] = Napi::Function::New(env, vts_native_vkCreateInstance, "vts_native_vkCreateInstance");
exports["vts_native_vkDestroyInstance"] = Napi::Function::New(env, vts_native_vkDestroyInstance, "vts_native_vkDestroyInstance");
exports["vts_native_vkEnumeratePhysicalDevices"] = Napi::Function::New(env, vts_native_vkEnumeratePhysicalDevices, "vts_native_vkEnumeratePhysicalDevices");
exports["vts_native_vkGetDeviceProcAddr"] = Napi::Function::New(env, vts_native_vkGetDeviceProcAddr, "vts_native_vkGetDeviceProcAddr");
exports["vts_native_vkGetInstanceProcAddr"] = Napi::Function::New(env, vts_native_vkGetInstanceProcAddr, "vts_native_vkGetInstanceProcAddr");
exports["vts_native_vkGetPhysicalDeviceProperties"] = Napi::Function::New(env, vts_native_vkGetPhysicalDeviceProperties, "vts_native_vkGetPhysicalDeviceProperties");
exports["vts_native_vkGetPhysicalDeviceQueueFamilyProperties"] = Napi::Function::New(env, vts_native_vkGetPhysicalDeviceQueueFamilyProperties, "vts_native_vkGetPhysicalDeviceQueueFamilyProperties");
exports["vts_native_vkGetPhysicalDeviceMemoryProperties"] = Napi::Function::New(env, vts_native_vkGetPhysicalDeviceMemoryProperties, "vts_native_vkGetPhysicalDeviceMemoryProperties");
exports["vts_native_vkGetPhysicalDeviceFeatures"] = Napi::Function::New(env, vts_native_vkGetPhysicalDeviceFeatures, "vts_native_vkGetPhysicalDeviceFeatures");
exports["vts_native_vkGetPhysicalDeviceFormatProperties"] = Napi::Function::New(env, vts_native_vkGetPhysicalDeviceFormatProperties, "vts_native_vkGetPhysicalDeviceFormatProperties");
exports["vts_native_vkGetPhysicalDeviceImageFormatProperties"] = Napi::Function::New(env, vts_native_vkGetPhysicalDeviceImageFormatProperties, "vts_native_vkGetPhysicalDeviceImageFormatProperties");
exports["vts_native_vkCreateDevice"] = Napi::Function::New(env, vts_native_vkCreateDevice, "vts_native_vkCreateDevice");
exports["vts_native_vkDestroyDevice"] = Napi::Function::New(env, vts_native_vkDestroyDevice, "vts_native_vkDestroyDevice");
exports["vts_native_vkEnumerateInstanceVersion"] = Napi::Function::New(env, vts_native_vkEnumerateInstanceVersion, "vts_native_vkEnumerateInstanceVersion");
exports["vts_native_vkEnumerateInstanceLayerProperties"] = Napi::Function::New(env, vts_native_vkEnumerateInstanceLayerProperties, "vts_native_vkEnumerateInstanceLayerProperties");
exports["vts_native_vkEnumerateInstanceExtensionProperties"] = Napi::Function::New(env, vts_native_vkEnumerateInstanceExtensionProperties, "vts_native_vkEnumerateInstanceExtensionProperties");
exports["vts_native_vkEnumerateDeviceLayerProperties"] = Napi::Function::New(env, vts_native_vkEnumerateDeviceLayerProperties, "vts_native_vkEnumerateDeviceLayerProperties");
exports["vts_native_vkEnumerateDeviceExtensionProperties"] = Napi::Function::New(env, vts_native_vkEnumerateDeviceExtensionProperties, "vts_native_vkEnumerateDeviceExtensionProperties");
exports["vts_native_vkGetDeviceQueue"] = Napi::Function::New(env, vts_native_vkGetDeviceQueue, "vts_native_vkGetDeviceQueue");
exports["vts_native_vkQueueSubmit"] = Napi::Function::New(env, vts_native_vkQueueSubmit, "vts_native_vkQueueSubmit");
exports["vts_native_vkQueueWaitIdle"] = Napi::Function::New(env, vts_native_vkQueueWaitIdle, "vts_native_vkQueueWaitIdle");
exports["vts_native_vkDeviceWaitIdle"] = Napi::Function::New(env, vts_native_vkDeviceWaitIdle, "vts_native_vkDeviceWaitIdle");
exports["vts_native_vkAllocateMemory"] = Napi::Function::New(env, vts_native_vkAllocateMemory, "vts_native_vkAllocateMemory");
exports["vts_native_vkFreeMemory"] = Napi::Function::New(env, vts_native_vkFreeMemory, "vts_native_vkFreeMemory");
exports["vts_native_vkMapMemory"] = Napi::Function::New(env, vts_native_vkMapMemory, "vts_native_vkMapMemory");
exports["vts_native_vkUnmapMemory"] = Napi::Function::New(env, vts_native_vkUnmapMemory, "vts_native_vkUnmapMemory");
exports["vts_native_vkFlushMappedMemoryRanges"] = Napi::Function::New(env, vts_native_vkFlushMappedMemoryRanges, "vts_native_vkFlushMappedMemoryRanges");
exports["vts_native_vkInvalidateMappedMemoryRanges"] = Napi::Function::New(env, vts_native_vkInvalidateMappedMemoryRanges, "vts_native_vkInvalidateMappedMemoryRanges");
exports["vts_native_vkGetDeviceMemoryCommitment"] = Napi::Function::New(env, vts_native_vkGetDeviceMemoryCommitment, "vts_native_vkGetDeviceMemoryCommitment");
exports["vts_native_vkGetBufferMemoryRequirements"] = Napi::Function::New(env, vts_native_vkGetBufferMemoryRequirements, "vts_native_vkGetBufferMemoryRequirements");
exports["vts_native_vkBindBufferMemory"] = Napi::Function::New(env, vts_native_vkBindBufferMemory, "vts_native_vkBindBufferMemory");
exports["vts_native_vkGetImageMemoryRequirements"] = Napi::Function::New(env, vts_native_vkGetImageMemoryRequirements, "vts_native_vkGetImageMemoryRequirements");
exports["vts_native_vkBindImageMemory"] = Napi::Function::New(env, vts_native_vkBindImageMemory, "vts_native_vkBindImageMemory");
exports["vts_native_vkGetImageSparseMemoryRequirements"] = Napi::Function::New(env, vts_native_vkGetImageSparseMemoryRequirements, "vts_native_vkGetImageSparseMemoryRequirements");
exports["vts_native_vkGetPhysicalDeviceSparseImageFormatProperties"] = Napi::Function::New(env, vts_native_vkGetPhysicalDeviceSparseImageFormatProperties, "vts_native_vkGetPhysicalDeviceSparseImageFormatProperties");
exports["vts_native_vkQueueBindSparse"] = Napi::Function::New(env, vts_native_vkQueueBindSparse, "vts_native_vkQueueBindSparse");
exports["vts_native_vkCreateFence"] = Napi::Function::New(env, vts_native_vkCreateFence, "vts_native_vkCreateFence");
exports["vts_native_vkDestroyFence"] = Napi::Function::New(env, vts_native_vkDestroyFence, "vts_native_vkDestroyFence");
exports["vts_native_vkResetFences"] = Napi::Function::New(env, vts_native_vkResetFences, "vts_native_vkResetFences");
exports["vts_native_vkGetFenceStatus"] = Napi::Function::New(env, vts_native_vkGetFenceStatus, "vts_native_vkGetFenceStatus");
exports["vts_native_vkWaitForFences"] = Napi::Function::New(env, vts_native_vkWaitForFences, "vts_native_vkWaitForFences");
exports["vts_native_vkCreateSemaphore"] = Napi::Function::New(env, vts_native_vkCreateSemaphore, "vts_native_vkCreateSemaphore");
exports["vts_native_vkDestroySemaphore"] = Napi::Function::New(env, vts_native_vkDestroySemaphore, "vts_native_vkDestroySemaphore");
exports["vts_native_vkCreateEvent"] = Napi::Function::New(env, vts_native_vkCreateEvent, "vts_native_vkCreateEvent");
exports["vts_native_vkDestroyEvent"] = Napi::Function::New(env, vts_native_vkDestroyEvent, "vts_native_vkDestroyEvent");
exports["vts_native_vkGetEventStatus"] = Napi::Function::New(env, vts_native_vkGetEventStatus, "vts_native_vkGetEventStatus");
exports["vts_native_vkSetEvent"] = Napi::Function::New(env, vts_native_vkSetEvent, "vts_native_vkSetEvent");
exports["vts_native_vkResetEvent"] = Napi::Function::New(env, vts_native_vkResetEvent, "vts_native_vkResetEvent");
exports["vts_native_vkCreateQueryPool"] = Napi::Function::New(env, vts_native_vkCreateQueryPool, "vts_native_vkCreateQueryPool");
exports["vts_native_vkDestroyQueryPool"] = Napi::Function::New(env, vts_native_vkDestroyQueryPool, "vts_native_vkDestroyQueryPool");
exports["vts_native_vkGetQueryPoolResults"] = Napi::Function::New(env, vts_native_vkGetQueryPoolResults, "vts_native_vkGetQueryPoolResults");
exports["vts_native_vkResetQueryPool"] = Napi::Function::New(env, vts_native_vkResetQueryPool, "vts_native_vkResetQueryPool");
exports["vts_native_vkCreateBuffer"] = Napi::Function::New(env, vts_native_vkCreateBuffer, "vts_native_vkCreateBuffer");
exports["vts_native_vkDestroyBuffer"] = Napi::Function::New(env, vts_native_vkDestroyBuffer, "vts_native_vkDestroyBuffer");
exports["vts_native_vkCreateBufferView"] = Napi::Function::New(env, vts_native_vkCreateBufferView, "vts_native_vkCreateBufferView");
exports["vts_native_vkDestroyBufferView"] = Napi::Function::New(env, vts_native_vkDestroyBufferView, "vts_native_vkDestroyBufferView");
exports["vts_native_vkCreateImage"] = Napi::Function::New(env, vts_native_vkCreateImage, "vts_native_vkCreateImage");
exports["vts_native_vkDestroyImage"] = Napi::Function::New(env, vts_native_vkDestroyImage, "vts_native_vkDestroyImage");
exports["vts_native_vkGetImageSubresourceLayout"] = Napi::Function::New(env, vts_native_vkGetImageSubresourceLayout, "vts_native_vkGetImageSubresourceLayout");
exports["vts_native_vkCreateImageView"] = Napi::Function::New(env, vts_native_vkCreateImageView, "vts_native_vkCreateImageView");
exports["vts_native_vkDestroyImageView"] = Napi::Function::New(env, vts_native_vkDestroyImageView, "vts_native_vkDestroyImageView");
exports["vts_native_vkCreateShaderModule"] = Napi::Function::New(env, vts_native_vkCreateShaderModule, "vts_native_vkCreateShaderModule");
exports["vts_native_vkDestroyShaderModule"] = Napi::Function::New(env, vts_native_vkDestroyShaderModule, "vts_native_vkDestroyShaderModule");
exports["vts_native_vkCreatePipelineCache"] = Napi::Function::New(env, vts_native_vkCreatePipelineCache, "vts_native_vkCreatePipelineCache");
exports["vts_native_vkDestroyPipelineCache"] = Napi::Function::New(env, vts_native_vkDestroyPipelineCache, "vts_native_vkDestroyPipelineCache");
exports["vts_native_vkGetPipelineCacheData"] = Napi::Function::New(env, vts_native_vkGetPipelineCacheData, "vts_native_vkGetPipelineCacheData");
exports["vts_native_vkMergePipelineCaches"] = Napi::Function::New(env, vts_native_vkMergePipelineCaches, "vts_native_vkMergePipelineCaches");
exports["vts_native_vkCreateGraphicsPipelines"] = Napi::Function::New(env, vts_native_vkCreateGraphicsPipelines, "vts_native_vkCreateGraphicsPipelines");
exports["vts_native_vkCreateComputePipelines"] = Napi::Function::New(env, vts_native_vkCreateComputePipelines, "vts_native_vkCreateComputePipelines");
exports["vts_native_vkDestroyPipeline"] = Napi::Function::New(env, vts_native_vkDestroyPipeline, "vts_native_vkDestroyPipeline");
exports["vts_native_vkCreatePipelineLayout"] = Napi::Function::New(env, vts_native_vkCreatePipelineLayout, "vts_native_vkCreatePipelineLayout");
exports["vts_native_vkDestroyPipelineLayout"] = Napi::Function::New(env, vts_native_vkDestroyPipelineLayout, "vts_native_vkDestroyPipelineLayout");
exports["vts_native_vkCreateSampler"] = Napi::Function::New(env, vts_native_vkCreateSampler, "vts_native_vkCreateSampler");
exports["vts_native_vkDestroySampler"] = Napi::Function::New(env, vts_native_vkDestroySampler, "vts_native_vkDestroySampler");
exports["vts_native_vkCreateDescriptorSetLayout"] = Napi::Function::New(env, vts_native_vkCreateDescriptorSetLayout, "vts_native_vkCreateDescriptorSetLayout");
exports["vts_native_vkDestroyDescriptorSetLayout"] = Napi::Function::New(env, vts_native_vkDestroyDescriptorSetLayout, "vts_native_vkDestroyDescriptorSetLayout");
exports["vts_native_vkCreateDescriptorPool"] = Napi::Function::New(env, vts_native_vkCreateDescriptorPool, "vts_native_vkCreateDescriptorPool");
exports["vts_native_vkDestroyDescriptorPool"] = Napi::Function::New(env, vts_native_vkDestroyDescriptorPool, "vts_native_vkDestroyDescriptorPool");
exports["vts_native_vkResetDescriptorPool"] = Napi::Function::New(env, vts_native_vkResetDescriptorPool, "vts_native_vkResetDescriptorPool");
exports["vts_native_vkAllocateDescriptorSets"] = Napi::Function::New(env, vts_native_vkAllocateDescriptorSets, "vts_native_vkAllocateDescriptorSets");
exports["vts_native_vkFreeDescriptorSets"] = Napi::Function::New(env, vts_native_vkFreeDescriptorSets, "vts_native_vkFreeDescriptorSets");
exports["vts_native_vkUpdateDescriptorSets"] = Napi::Function::New(env, vts_native_vkUpdateDescriptorSets, "vts_native_vkUpdateDescriptorSets");
exports["vts_native_vkCreateFramebuffer"] = Napi::Function::New(env, vts_native_vkCreateFramebuffer, "vts_native_vkCreateFramebuffer");
exports["vts_native_vkDestroyFramebuffer"] = Napi::Function::New(env, vts_native_vkDestroyFramebuffer, "vts_native_vkDestroyFramebuffer");
exports["vts_native_vkCreateRenderPass"] = Napi::Function::New(env, vts_native_vkCreateRenderPass, "vts_native_vkCreateRenderPass");
exports["vts_native_vkDestroyRenderPass"] = Napi::Function::New(env, vts_native_vkDestroyRenderPass, "vts_native_vkDestroyRenderPass");
exports["vts_native_vkGetRenderAreaGranularity"] = Napi::Function::New(env, vts_native_vkGetRenderAreaGranularity, "vts_native_vkGetRenderAreaGranularity");
exports["vts_native_vkCreateCommandPool"] = Napi::Function::New(env, vts_native_vkCreateCommandPool, "vts_native_vkCreateCommandPool");
exports["vts_native_vkDestroyCommandPool"] = Napi::Function::New(env, vts_native_vkDestroyCommandPool, "vts_native_vkDestroyCommandPool");
exports["vts_native_vkResetCommandPool"] = Napi::Function::New(env, vts_native_vkResetCommandPool, "vts_native_vkResetCommandPool");
exports["vts_native_vkAllocateCommandBuffers"] = Napi::Function::New(env, vts_native_vkAllocateCommandBuffers, "vts_native_vkAllocateCommandBuffers");
exports["vts_native_vkFreeCommandBuffers"] = Napi::Function::New(env, vts_native_vkFreeCommandBuffers, "vts_native_vkFreeCommandBuffers");
exports["vts_native_vkBeginCommandBuffer"] = Napi::Function::New(env, vts_native_vkBeginCommandBuffer, "vts_native_vkBeginCommandBuffer");
exports["vts_native_vkEndCommandBuffer"] = Napi::Function::New(env, vts_native_vkEndCommandBuffer, "vts_native_vkEndCommandBuffer");
exports["vts_native_vkResetCommandBuffer"] = Napi::Function::New(env, vts_native_vkResetCommandBuffer, "vts_native_vkResetCommandBuffer");
exports["vts_native_vkCmdBindPipeline"] = Napi::Function::New(env, vts_native_vkCmdBindPipeline, "vts_native_vkCmdBindPipeline");
exports["vts_native_vkCmdSetViewport"] = Napi::Function::New(env, vts_native_vkCmdSetViewport, "vts_native_vkCmdSetViewport");
exports["vts_native_vkCmdSetScissor"] = Napi::Function::New(env, vts_native_vkCmdSetScissor, "vts_native_vkCmdSetScissor");
exports["vts_native_vkCmdSetLineWidth"] = Napi::Function::New(env, vts_native_vkCmdSetLineWidth, "vts_native_vkCmdSetLineWidth");
exports["vts_native_vkCmdSetDepthBias"] = Napi::Function::New(env, vts_native_vkCmdSetDepthBias, "vts_native_vkCmdSetDepthBias");
exports["vts_native_vkCmdSetBlendConstants"] = Napi::Function::New(env, vts_native_vkCmdSetBlendConstants, "vts_native_vkCmdSetBlendConstants");
exports["vts_native_vkCmdSetDepthBounds"] = Napi::Function::New(env, vts_native_vkCmdSetDepthBounds, "vts_native_vkCmdSetDepthBounds");
exports["vts_native_vkCmdSetStencilCompareMask"] = Napi::Function::New(env, vts_native_vkCmdSetStencilCompareMask, "vts_native_vkCmdSetStencilCompareMask");
exports["vts_native_vkCmdSetStencilWriteMask"] = Napi::Function::New(env, vts_native_vkCmdSetStencilWriteMask, "vts_native_vkCmdSetStencilWriteMask");
exports["vts_native_vkCmdSetStencilReference"] = Napi::Function::New(env, vts_native_vkCmdSetStencilReference, "vts_native_vkCmdSetStencilReference");
exports["vts_native_vkCmdBindDescriptorSets"] = Napi::Function::New(env, vts_native_vkCmdBindDescriptorSets, "vts_native_vkCmdBindDescriptorSets");
exports["vts_native_vkCmdBindIndexBuffer"] = Napi::Function::New(env, vts_native_vkCmdBindIndexBuffer, "vts_native_vkCmdBindIndexBuffer");
exports["vts_native_vkCmdBindVertexBuffers"] = Napi::Function::New(env, vts_native_vkCmdBindVertexBuffers, "vts_native_vkCmdBindVertexBuffers");
exports["vts_native_vkCmdDraw"] = Napi::Function::New(env, vts_native_vkCmdDraw, "vts_native_vkCmdDraw");
exports["vts_native_vkCmdDrawIndexed"] = Napi::Function::New(env, vts_native_vkCmdDrawIndexed, "vts_native_vkCmdDrawIndexed");
exports["vts_native_vkCmdDrawMultiEXT"] = Napi::Function::New(env, vts_native_vkCmdDrawMultiEXT, "vts_native_vkCmdDrawMultiEXT");
exports["vts_native_vkCmdDrawMultiIndexedEXT"] = Napi::Function::New(env, vts_native_vkCmdDrawMultiIndexedEXT, "vts_native_vkCmdDrawMultiIndexedEXT");
exports["vts_native_vkCmdDrawIndirect"] = Napi::Function::New(env, vts_native_vkCmdDrawIndirect, "vts_native_vkCmdDrawIndirect");
exports["vts_native_vkCmdDrawIndexedIndirect"] = Napi::Function::New(env, vts_native_vkCmdDrawIndexedIndirect, "vts_native_vkCmdDrawIndexedIndirect");
exports["vts_native_vkCmdDispatch"] = Napi::Function::New(env, vts_native_vkCmdDispatch, "vts_native_vkCmdDispatch");
exports["vts_native_vkCmdDispatchIndirect"] = Napi::Function::New(env, vts_native_vkCmdDispatchIndirect, "vts_native_vkCmdDispatchIndirect");
exports["vts_native_vkCmdCopyBuffer"] = Napi::Function::New(env, vts_native_vkCmdCopyBuffer, "vts_native_vkCmdCopyBuffer");
exports["vts_native_vkCmdCopyImage"] = Napi::Function::New(env, vts_native_vkCmdCopyImage, "vts_native_vkCmdCopyImage");
exports["vts_native_vkCmdBlitImage"] = Napi::Function::New(env, vts_native_vkCmdBlitImage, "vts_native_vkCmdBlitImage");
exports["vts_native_vkCmdCopyBufferToImage"] = Napi::Function::New(env, vts_native_vkCmdCopyBufferToImage, "vts_native_vkCmdCopyBufferToImage");
exports["vts_native_vkCmdCopyImageToBuffer"] = Napi::Function::New(env, vts_native_vkCmdCopyImageToBuffer, "vts_native_vkCmdCopyImageToBuffer");
exports["vts_native_vkCmdUpdateBuffer"] = Napi::Function::New(env, vts_native_vkCmdUpdateBuffer, "vts_native_vkCmdUpdateBuffer");
exports["vts_native_vkCmdFillBuffer"] = Napi::Function::New(env, vts_native_vkCmdFillBuffer, "vts_native_vkCmdFillBuffer");
exports["vts_native_vkCmdClearColorImage"] = Napi::Function::New(env, vts_native_vkCmdClearColorImage, "vts_native_vkCmdClearColorImage");
exports["vts_native_vkCmdClearDepthStencilImage"] = Napi::Function::New(env, vts_native_vkCmdClearDepthStencilImage, "vts_native_vkCmdClearDepthStencilImage");
exports["vts_native_vkCmdClearAttachments"] = Napi::Function::New(env, vts_native_vkCmdClearAttachments, "vts_native_vkCmdClearAttachments");
exports["vts_native_vkCmdResolveImage"] = Napi::Function::New(env, vts_native_vkCmdResolveImage, "vts_native_vkCmdResolveImage");
exports["vts_native_vkCmdSetEvent"] = Napi::Function::New(env, vts_native_vkCmdSetEvent, "vts_native_vkCmdSetEvent");
exports["vts_native_vkCmdResetEvent"] = Napi::Function::New(env, vts_native_vkCmdResetEvent, "vts_native_vkCmdResetEvent");
exports["vts_native_vkCmdWaitEvents"] = Napi::Function::New(env, vts_native_vkCmdWaitEvents, "vts_native_vkCmdWaitEvents");
exports["vts_native_vkCmdPipelineBarrier"] = Napi::Function::New(env, vts_native_vkCmdPipelineBarrier, "vts_native_vkCmdPipelineBarrier");
exports["vts_native_vkCmdBeginQuery"] = Napi::Function::New(env, vts_native_vkCmdBeginQuery, "vts_native_vkCmdBeginQuery");
exports["vts_native_vkCmdEndQuery"] = Napi::Function::New(env, vts_native_vkCmdEndQuery, "vts_native_vkCmdEndQuery");
exports["vts_native_vkCmdResetQueryPool"] = Napi::Function::New(env, vts_native_vkCmdResetQueryPool, "vts_native_vkCmdResetQueryPool");
exports["vts_native_vkCmdWriteTimestamp"] = Napi::Function::New(env, vts_native_vkCmdWriteTimestamp, "vts_native_vkCmdWriteTimestamp");
exports["vts_native_vkCmdCopyQueryPoolResults"] = Napi::Function::New(env, vts_native_vkCmdCopyQueryPoolResults, "vts_native_vkCmdCopyQueryPoolResults");
exports["vts_native_vkCmdPushConstants"] = Napi::Function::New(env, vts_native_vkCmdPushConstants, "vts_native_vkCmdPushConstants");
exports["vts_native_vkCmdBeginRenderPass"] = Napi::Function::New(env, vts_native_vkCmdBeginRenderPass, "vts_native_vkCmdBeginRenderPass");
exports["vts_native_vkCmdNextSubpass"] = Napi::Function::New(env, vts_native_vkCmdNextSubpass, "vts_native_vkCmdNextSubpass");
exports["vts_native_vkCmdEndRenderPass"] = Napi::Function::New(env, vts_native_vkCmdEndRenderPass, "vts_native_vkCmdEndRenderPass");
exports["vts_native_vkCmdExecuteCommands"] = Napi::Function::New(env, vts_native_vkCmdExecuteCommands, "vts_native_vkCmdExecuteCommands");
exports["vts_native_vkGetPhysicalDeviceDisplayPropertiesKHR"] = Napi::Function::New(env, vts_native_vkGetPhysicalDeviceDisplayPropertiesKHR, "vts_native_vkGetPhysicalDeviceDisplayPropertiesKHR");
exports["vts_native_vkGetPhysicalDeviceDisplayPlanePropertiesKHR"] = Napi::Function::New(env, vts_native_vkGetPhysicalDeviceDisplayPlanePropertiesKHR, "vts_native_vkGetPhysicalDeviceDisplayPlanePropertiesKHR");
exports["vts_native_vkGetDisplayPlaneSupportedDisplaysKHR"] = Napi::Function::New(env, vts_native_vkGetDisplayPlaneSupportedDisplaysKHR, "vts_native_vkGetDisplayPlaneSupportedDisplaysKHR");
exports["vts_native_vkGetDisplayModePropertiesKHR"] = Napi::Function::New(env, vts_native_vkGetDisplayModePropertiesKHR, "vts_native_vkGetDisplayModePropertiesKHR");
exports["vts_native_vkCreateDisplayModeKHR"] = Napi::Function::New(env, vts_native_vkCreateDisplayModeKHR, "vts_native_vkCreateDisplayModeKHR");
exports["vts_native_vkGetDisplayPlaneCapabilitiesKHR"] = Napi::Function::New(env, vts_native_vkGetDisplayPlaneCapabilitiesKHR, "vts_native_vkGetDisplayPlaneCapabilitiesKHR");
exports["vts_native_vkCreateDisplayPlaneSurfaceKHR"] = Napi::Function::New(env, vts_native_vkCreateDisplayPlaneSurfaceKHR, "vts_native_vkCreateDisplayPlaneSurfaceKHR");
exports["vts_native_vkCreateSharedSwapchainsKHR"] = Napi::Function::New(env, vts_native_vkCreateSharedSwapchainsKHR, "vts_native_vkCreateSharedSwapchainsKHR");
exports["vts_native_vkDestroySurfaceKHR"] = Napi::Function::New(env, vts_native_vkDestroySurfaceKHR, "vts_native_vkDestroySurfaceKHR");
exports["vts_native_vkGetPhysicalDeviceSurfaceSupportKHR"] = Napi::Function::New(env, vts_native_vkGetPhysicalDeviceSurfaceSupportKHR, "vts_native_vkGetPhysicalDeviceSurfaceSupportKHR");
exports["vts_native_vkGetPhysicalDeviceSurfaceCapabilitiesKHR"] = Napi::Function::New(env, vts_native_vkGetPhysicalDeviceSurfaceCapabilitiesKHR, "vts_native_vkGetPhysicalDeviceSurfaceCapabilitiesKHR");
exports["vts_native_vkGetPhysicalDeviceSurfaceFormatsKHR"] = Napi::Function::New(env, vts_native_vkGetPhysicalDeviceSurfaceFormatsKHR, "vts_native_vkGetPhysicalDeviceSurfaceFormatsKHR");
exports["vts_native_vkGetPhysicalDeviceSurfacePresentModesKHR"] = Napi::Function::New(env, vts_native_vkGetPhysicalDeviceSurfacePresentModesKHR, "vts_native_vkGetPhysicalDeviceSurfacePresentModesKHR");
exports["vts_native_vkCreateSwapchainKHR"] = Napi::Function::New(env, vts_native_vkCreateSwapchainKHR, "vts_native_vkCreateSwapchainKHR");
exports["vts_native_vkDestroySwapchainKHR"] = Napi::Function::New(env, vts_native_vkDestroySwapchainKHR, "vts_native_vkDestroySwapchainKHR");
exports["vts_native_vkGetSwapchainImagesKHR"] = Napi::Function::New(env, vts_native_vkGetSwapchainImagesKHR, "vts_native_vkGetSwapchainImagesKHR");
exports["vts_native_vkAcquireNextImageKHR"] = Napi::Function::New(env, vts_native_vkAcquireNextImageKHR, "vts_native_vkAcquireNextImageKHR");
exports["vts_native_vkQueuePresentKHR"] = Napi::Function::New(env, vts_native_vkQueuePresentKHR, "vts_native_vkQueuePresentKHR");
exports["vts_native_vkGetPhysicalDeviceFeatures2"] = Napi::Function::New(env, vts_native_vkGetPhysicalDeviceFeatures2, "vts_native_vkGetPhysicalDeviceFeatures2");
exports["vts_native_vkGetPhysicalDeviceProperties2"] = Napi::Function::New(env, vts_native_vkGetPhysicalDeviceProperties2, "vts_native_vkGetPhysicalDeviceProperties2");
exports["vts_native_vkGetPhysicalDeviceFormatProperties2"] = Napi::Function::New(env, vts_native_vkGetPhysicalDeviceFormatProperties2, "vts_native_vkGetPhysicalDeviceFormatProperties2");
exports["vts_native_vkGetPhysicalDeviceImageFormatProperties2"] = Napi::Function::New(env, vts_native_vkGetPhysicalDeviceImageFormatProperties2, "vts_native_vkGetPhysicalDeviceImageFormatProperties2");
exports["vts_native_vkGetPhysicalDeviceQueueFamilyProperties2"] = Napi::Function::New(env, vts_native_vkGetPhysicalDeviceQueueFamilyProperties2, "vts_native_vkGetPhysicalDeviceQueueFamilyProperties2");
exports["vts_native_vkGetPhysicalDeviceMemoryProperties2"] = Napi::Function::New(env, vts_native_vkGetPhysicalDeviceMemoryProperties2, "vts_native_vkGetPhysicalDeviceMemoryProperties2");
exports["vts_native_vkGetPhysicalDeviceSparseImageFormatProperties2"] = Napi::Function::New(env, vts_native_vkGetPhysicalDeviceSparseImageFormatProperties2, "vts_native_vkGetPhysicalDeviceSparseImageFormatProperties2");
exports["vts_native_vkCmdPushDescriptorSetKHR"] = Napi::Function::New(env, vts_native_vkCmdPushDescriptorSetKHR, "vts_native_vkCmdPushDescriptorSetKHR");
exports["vts_native_vkTrimCommandPool"] = Napi::Function::New(env, vts_native_vkTrimCommandPool, "vts_native_vkTrimCommandPool");
exports["vts_native_vkGetPhysicalDeviceExternalBufferProperties"] = Napi::Function::New(env, vts_native_vkGetPhysicalDeviceExternalBufferProperties, "vts_native_vkGetPhysicalDeviceExternalBufferProperties");
exports["vts_native_vkGetPhysicalDeviceExternalSemaphoreProperties"] = Napi::Function::New(env, vts_native_vkGetPhysicalDeviceExternalSemaphoreProperties, "vts_native_vkGetPhysicalDeviceExternalSemaphoreProperties");
exports["vts_native_vkGetPhysicalDeviceExternalFenceProperties"] = Napi::Function::New(env, vts_native_vkGetPhysicalDeviceExternalFenceProperties, "vts_native_vkGetPhysicalDeviceExternalFenceProperties");
exports["vts_native_vkEnumeratePhysicalDeviceGroups"] = Napi::Function::New(env, vts_native_vkEnumeratePhysicalDeviceGroups, "vts_native_vkEnumeratePhysicalDeviceGroups");
exports["vts_native_vkGetDeviceGroupPeerMemoryFeatures"] = Napi::Function::New(env, vts_native_vkGetDeviceGroupPeerMemoryFeatures, "vts_native_vkGetDeviceGroupPeerMemoryFeatures");
exports["vts_native_vkBindBufferMemory2"] = Napi::Function::New(env, vts_native_vkBindBufferMemory2, "vts_native_vkBindBufferMemory2");
exports["vts_native_vkBindImageMemory2"] = Napi::Function::New(env, vts_native_vkBindImageMemory2, "vts_native_vkBindImageMemory2");
exports["vts_native_vkCmdSetDeviceMask"] = Napi::Function::New(env, vts_native_vkCmdSetDeviceMask, "vts_native_vkCmdSetDeviceMask");
exports["vts_native_vkGetDeviceGroupPresentCapabilitiesKHR"] = Napi::Function::New(env, vts_native_vkGetDeviceGroupPresentCapabilitiesKHR, "vts_native_vkGetDeviceGroupPresentCapabilitiesKHR");
exports["vts_native_vkGetDeviceGroupSurfacePresentModesKHR"] = Napi::Function::New(env, vts_native_vkGetDeviceGroupSurfacePresentModesKHR, "vts_native_vkGetDeviceGroupSurfacePresentModesKHR");
exports["vts_native_vkAcquireNextImage2KHR"] = Napi::Function::New(env, vts_native_vkAcquireNextImage2KHR, "vts_native_vkAcquireNextImage2KHR");
exports["vts_native_vkCmdDispatchBase"] = Napi::Function::New(env, vts_native_vkCmdDispatchBase, "vts_native_vkCmdDispatchBase");
exports["vts_native_vkGetPhysicalDevicePresentRectanglesKHR"] = Napi::Function::New(env, vts_native_vkGetPhysicalDevicePresentRectanglesKHR, "vts_native_vkGetPhysicalDevicePresentRectanglesKHR");
exports["vts_native_vkCreateDescriptorUpdateTemplate"] = Napi::Function::New(env, vts_native_vkCreateDescriptorUpdateTemplate, "vts_native_vkCreateDescriptorUpdateTemplate");
exports["vts_native_vkDestroyDescriptorUpdateTemplate"] = Napi::Function::New(env, vts_native_vkDestroyDescriptorUpdateTemplate, "vts_native_vkDestroyDescriptorUpdateTemplate");
exports["vts_native_vkUpdateDescriptorSetWithTemplate"] = Napi::Function::New(env, vts_native_vkUpdateDescriptorSetWithTemplate, "vts_native_vkUpdateDescriptorSetWithTemplate");
exports["vts_native_vkCmdPushDescriptorSetWithTemplateKHR"] = Napi::Function::New(env, vts_native_vkCmdPushDescriptorSetWithTemplateKHR, "vts_native_vkCmdPushDescriptorSetWithTemplateKHR");
exports["vts_native_vkSetHdrMetadataEXT"] = Napi::Function::New(env, vts_native_vkSetHdrMetadataEXT, "vts_native_vkSetHdrMetadataEXT");
exports["vts_native_vkGetSwapchainStatusKHR"] = Napi::Function::New(env, vts_native_vkGetSwapchainStatusKHR, "vts_native_vkGetSwapchainStatusKHR");
exports["vts_native_vkCmdSetSampleLocationsEXT"] = Napi::Function::New(env, vts_native_vkCmdSetSampleLocationsEXT, "vts_native_vkCmdSetSampleLocationsEXT");
exports["vts_native_vkGetPhysicalDeviceMultisamplePropertiesEXT"] = Napi::Function::New(env, vts_native_vkGetPhysicalDeviceMultisamplePropertiesEXT, "vts_native_vkGetPhysicalDeviceMultisamplePropertiesEXT");
exports["vts_native_vkGetPhysicalDeviceSurfaceCapabilities2KHR"] = Napi::Function::New(env, vts_native_vkGetPhysicalDeviceSurfaceCapabilities2KHR, "vts_native_vkGetPhysicalDeviceSurfaceCapabilities2KHR");
exports["vts_native_vkGetPhysicalDeviceSurfaceFormats2KHR"] = Napi::Function::New(env, vts_native_vkGetPhysicalDeviceSurfaceFormats2KHR, "vts_native_vkGetPhysicalDeviceSurfaceFormats2KHR");
exports["vts_native_vkGetPhysicalDeviceDisplayProperties2KHR"] = Napi::Function::New(env, vts_native_vkGetPhysicalDeviceDisplayProperties2KHR, "vts_native_vkGetPhysicalDeviceDisplayProperties2KHR");
exports["vts_native_vkGetPhysicalDeviceDisplayPlaneProperties2KHR"] = Napi::Function::New(env, vts_native_vkGetPhysicalDeviceDisplayPlaneProperties2KHR, "vts_native_vkGetPhysicalDeviceDisplayPlaneProperties2KHR");
exports["vts_native_vkGetDisplayModeProperties2KHR"] = Napi::Function::New(env, vts_native_vkGetDisplayModeProperties2KHR, "vts_native_vkGetDisplayModeProperties2KHR");
exports["vts_native_vkGetDisplayPlaneCapabilities2KHR"] = Napi::Function::New(env, vts_native_vkGetDisplayPlaneCapabilities2KHR, "vts_native_vkGetDisplayPlaneCapabilities2KHR");
exports["vts_native_vkGetBufferMemoryRequirements2"] = Napi::Function::New(env, vts_native_vkGetBufferMemoryRequirements2, "vts_native_vkGetBufferMemoryRequirements2");
exports["vts_native_vkGetImageMemoryRequirements2"] = Napi::Function::New(env, vts_native_vkGetImageMemoryRequirements2, "vts_native_vkGetImageMemoryRequirements2");
exports["vts_native_vkGetImageSparseMemoryRequirements2"] = Napi::Function::New(env, vts_native_vkGetImageSparseMemoryRequirements2, "vts_native_vkGetImageSparseMemoryRequirements2");
exports["vts_native_vkGetDeviceBufferMemoryRequirements"] = Napi::Function::New(env, vts_native_vkGetDeviceBufferMemoryRequirements, "vts_native_vkGetDeviceBufferMemoryRequirements");
exports["vts_native_vkGetDeviceImageMemoryRequirements"] = Napi::Function::New(env, vts_native_vkGetDeviceImageMemoryRequirements, "vts_native_vkGetDeviceImageMemoryRequirements");
exports["vts_native_vkGetDeviceImageSparseMemoryRequirements"] = Napi::Function::New(env, vts_native_vkGetDeviceImageSparseMemoryRequirements, "vts_native_vkGetDeviceImageSparseMemoryRequirements");
exports["vts_native_vkCreateSamplerYcbcrConversion"] = Napi::Function::New(env, vts_native_vkCreateSamplerYcbcrConversion, "vts_native_vkCreateSamplerYcbcrConversion");
exports["vts_native_vkDestroySamplerYcbcrConversion"] = Napi::Function::New(env, vts_native_vkDestroySamplerYcbcrConversion, "vts_native_vkDestroySamplerYcbcrConversion");
exports["vts_native_vkGetDeviceQueue2"] = Napi::Function::New(env, vts_native_vkGetDeviceQueue2, "vts_native_vkGetDeviceQueue2");
exports["vts_native_vkCreateValidationCacheEXT"] = Napi::Function::New(env, vts_native_vkCreateValidationCacheEXT, "vts_native_vkCreateValidationCacheEXT");
exports["vts_native_vkDestroyValidationCacheEXT"] = Napi::Function::New(env, vts_native_vkDestroyValidationCacheEXT, "vts_native_vkDestroyValidationCacheEXT");
exports["vts_native_vkGetValidationCacheDataEXT"] = Napi::Function::New(env, vts_native_vkGetValidationCacheDataEXT, "vts_native_vkGetValidationCacheDataEXT");
exports["vts_native_vkMergeValidationCachesEXT"] = Napi::Function::New(env, vts_native_vkMergeValidationCachesEXT, "vts_native_vkMergeValidationCachesEXT");
exports["vts_native_vkGetDescriptorSetLayoutSupport"] = Napi::Function::New(env, vts_native_vkGetDescriptorSetLayoutSupport, "vts_native_vkGetDescriptorSetLayoutSupport");
exports["vts_native_vkGetMemoryHostPointerPropertiesEXT"] = Napi::Function::New(env, vts_native_vkGetMemoryHostPointerPropertiesEXT, "vts_native_vkGetMemoryHostPointerPropertiesEXT");
exports["vts_native_vkCreateRenderPass2"] = Napi::Function::New(env, vts_native_vkCreateRenderPass2, "vts_native_vkCreateRenderPass2");
exports["vts_native_vkCmdBeginRenderPass2"] = Napi::Function::New(env, vts_native_vkCmdBeginRenderPass2, "vts_native_vkCmdBeginRenderPass2");
exports["vts_native_vkCmdNextSubpass2"] = Napi::Function::New(env, vts_native_vkCmdNextSubpass2, "vts_native_vkCmdNextSubpass2");
exports["vts_native_vkCmdEndRenderPass2"] = Napi::Function::New(env, vts_native_vkCmdEndRenderPass2, "vts_native_vkCmdEndRenderPass2");
exports["vts_native_vkGetSemaphoreCounterValue"] = Napi::Function::New(env, vts_native_vkGetSemaphoreCounterValue, "vts_native_vkGetSemaphoreCounterValue");
exports["vts_native_vkWaitSemaphores"] = Napi::Function::New(env, vts_native_vkWaitSemaphores, "vts_native_vkWaitSemaphores");
exports["vts_native_vkSignalSemaphore"] = Napi::Function::New(env, vts_native_vkSignalSemaphore, "vts_native_vkSignalSemaphore");
exports["vts_native_vkCmdDrawIndirectCount"] = Napi::Function::New(env, vts_native_vkCmdDrawIndirectCount, "vts_native_vkCmdDrawIndirectCount");
exports["vts_native_vkCmdDrawIndexedIndirectCount"] = Napi::Function::New(env, vts_native_vkCmdDrawIndexedIndirectCount, "vts_native_vkCmdDrawIndexedIndirectCount");
exports["vts_native_vkCmdBindTransformFeedbackBuffersEXT"] = Napi::Function::New(env, vts_native_vkCmdBindTransformFeedbackBuffersEXT, "vts_native_vkCmdBindTransformFeedbackBuffersEXT");
exports["vts_native_vkCmdBeginTransformFeedbackEXT"] = Napi::Function::New(env, vts_native_vkCmdBeginTransformFeedbackEXT, "vts_native_vkCmdBeginTransformFeedbackEXT");
exports["vts_native_vkCmdEndTransformFeedbackEXT"] = Napi::Function::New(env, vts_native_vkCmdEndTransformFeedbackEXT, "vts_native_vkCmdEndTransformFeedbackEXT");
exports["vts_native_vkCmdBeginQueryIndexedEXT"] = Napi::Function::New(env, vts_native_vkCmdBeginQueryIndexedEXT, "vts_native_vkCmdBeginQueryIndexedEXT");
exports["vts_native_vkCmdEndQueryIndexedEXT"] = Napi::Function::New(env, vts_native_vkCmdEndQueryIndexedEXT, "vts_native_vkCmdEndQueryIndexedEXT");
exports["vts_native_vkCmdDrawIndirectByteCountEXT"] = Napi::Function::New(env, vts_native_vkCmdDrawIndirectByteCountEXT, "vts_native_vkCmdDrawIndirectByteCountEXT");
exports["vts_native_vkCmdDrawMeshTasksEXT"] = Napi::Function::New(env, vts_native_vkCmdDrawMeshTasksEXT, "vts_native_vkCmdDrawMeshTasksEXT");
exports["vts_native_vkCmdDrawMeshTasksIndirectEXT"] = Napi::Function::New(env, vts_native_vkCmdDrawMeshTasksIndirectEXT, "vts_native_vkCmdDrawMeshTasksIndirectEXT");
exports["vts_native_vkCmdDrawMeshTasksIndirectCountEXT"] = Napi::Function::New(env, vts_native_vkCmdDrawMeshTasksIndirectCountEXT, "vts_native_vkCmdDrawMeshTasksIndirectCountEXT");
exports["vts_native_vkCmdTraceRaysKHR"] = Napi::Function::New(env, vts_native_vkCmdTraceRaysKHR, "vts_native_vkCmdTraceRaysKHR");
exports["vts_native_vkGetRayTracingShaderGroupHandlesKHR"] = Napi::Function::New(env, vts_native_vkGetRayTracingShaderGroupHandlesKHR, "vts_native_vkGetRayTracingShaderGroupHandlesKHR");
exports["vts_native_vkGetRayTracingCaptureReplayShaderGroupHandlesKHR"] = Napi::Function::New(env, vts_native_vkGetRayTracingCaptureReplayShaderGroupHandlesKHR, "vts_native_vkGetRayTracingCaptureReplayShaderGroupHandlesKHR");
exports["vts_native_vkCreateRayTracingPipelinesKHR"] = Napi::Function::New(env, vts_native_vkCreateRayTracingPipelinesKHR, "vts_native_vkCreateRayTracingPipelinesKHR");
exports["vts_native_vkCmdTraceRaysIndirectKHR"] = Napi::Function::New(env, vts_native_vkCmdTraceRaysIndirectKHR, "vts_native_vkCmdTraceRaysIndirectKHR");
exports["vts_native_vkCmdTraceRaysIndirect2KHR"] = Napi::Function::New(env, vts_native_vkCmdTraceRaysIndirect2KHR, "vts_native_vkCmdTraceRaysIndirect2KHR");
exports["vts_native_vkGetRayTracingShaderGroupStackSizeKHR"] = Napi::Function::New(env, vts_native_vkGetRayTracingShaderGroupStackSizeKHR, "vts_native_vkGetRayTracingShaderGroupStackSizeKHR");
exports["vts_native_vkCmdSetRayTracingPipelineStackSizeKHR"] = Napi::Function::New(env, vts_native_vkCmdSetRayTracingPipelineStackSizeKHR, "vts_native_vkCmdSetRayTracingPipelineStackSizeKHR");
exports["vts_native_vkGetImageDrmFormatModifierPropertiesEXT"] = Napi::Function::New(env, vts_native_vkGetImageDrmFormatModifierPropertiesEXT, "vts_native_vkGetImageDrmFormatModifierPropertiesEXT");
exports["vts_native_vkGetBufferOpaqueCaptureAddress"] = Napi::Function::New(env, vts_native_vkGetBufferOpaqueCaptureAddress, "vts_native_vkGetBufferOpaqueCaptureAddress");
exports["vts_native_vkGetBufferDeviceAddress"] = Napi::Function::New(env, vts_native_vkGetBufferDeviceAddress, "vts_native_vkGetBufferDeviceAddress");
exports["vts_native_vkCreateHeadlessSurfaceEXT"] = Napi::Function::New(env, vts_native_vkCreateHeadlessSurfaceEXT, "vts_native_vkCreateHeadlessSurfaceEXT");
exports["vts_native_vkGetDeviceMemoryOpaqueCaptureAddress"] = Napi::Function::New(env, vts_native_vkGetDeviceMemoryOpaqueCaptureAddress, "vts_native_vkGetDeviceMemoryOpaqueCaptureAddress");
exports["vts_native_vkCmdSetLineStippleEXT"] = Napi::Function::New(env, vts_native_vkCmdSetLineStippleEXT, "vts_native_vkCmdSetLineStippleEXT");
exports["vts_native_vkGetPhysicalDeviceToolProperties"] = Napi::Function::New(env, vts_native_vkGetPhysicalDeviceToolProperties, "vts_native_vkGetPhysicalDeviceToolProperties");
exports["vts_native_vkCreateDeferredOperationKHR"] = Napi::Function::New(env, vts_native_vkCreateDeferredOperationKHR, "vts_native_vkCreateDeferredOperationKHR");
exports["vts_native_vkDestroyDeferredOperationKHR"] = Napi::Function::New(env, vts_native_vkDestroyDeferredOperationKHR, "vts_native_vkDestroyDeferredOperationKHR");
exports["vts_native_vkGetDeferredOperationMaxConcurrencyKHR"] = Napi::Function::New(env, vts_native_vkGetDeferredOperationMaxConcurrencyKHR, "vts_native_vkGetDeferredOperationMaxConcurrencyKHR");
exports["vts_native_vkGetDeferredOperationResultKHR"] = Napi::Function::New(env, vts_native_vkGetDeferredOperationResultKHR, "vts_native_vkGetDeferredOperationResultKHR");
exports["vts_native_vkDeferredOperationJoinKHR"] = Napi::Function::New(env, vts_native_vkDeferredOperationJoinKHR, "vts_native_vkDeferredOperationJoinKHR");
exports["vts_native_vkCmdSetCullMode"] = Napi::Function::New(env, vts_native_vkCmdSetCullMode, "vts_native_vkCmdSetCullMode");
exports["vts_native_vkCmdSetFrontFace"] = Napi::Function::New(env, vts_native_vkCmdSetFrontFace, "vts_native_vkCmdSetFrontFace");
exports["vts_native_vkCmdSetPrimitiveTopology"] = Napi::Function::New(env, vts_native_vkCmdSetPrimitiveTopology, "vts_native_vkCmdSetPrimitiveTopology");
exports["vts_native_vkCmdSetViewportWithCount"] = Napi::Function::New(env, vts_native_vkCmdSetViewportWithCount, "vts_native_vkCmdSetViewportWithCount");
exports["vts_native_vkCmdSetScissorWithCount"] = Napi::Function::New(env, vts_native_vkCmdSetScissorWithCount, "vts_native_vkCmdSetScissorWithCount");
exports["vts_native_vkCmdBindVertexBuffers2"] = Napi::Function::New(env, vts_native_vkCmdBindVertexBuffers2, "vts_native_vkCmdBindVertexBuffers2");
exports["vts_native_vkCmdSetDepthTestEnable"] = Napi::Function::New(env, vts_native_vkCmdSetDepthTestEnable, "vts_native_vkCmdSetDepthTestEnable");
exports["vts_native_vkCmdSetDepthWriteEnable"] = Napi::Function::New(env, vts_native_vkCmdSetDepthWriteEnable, "vts_native_vkCmdSetDepthWriteEnable");
exports["vts_native_vkCmdSetDepthCompareOp"] = Napi::Function::New(env, vts_native_vkCmdSetDepthCompareOp, "vts_native_vkCmdSetDepthCompareOp");
exports["vts_native_vkCmdSetDepthBoundsTestEnable"] = Napi::Function::New(env, vts_native_vkCmdSetDepthBoundsTestEnable, "vts_native_vkCmdSetDepthBoundsTestEnable");
exports["vts_native_vkCmdSetStencilTestEnable"] = Napi::Function::New(env, vts_native_vkCmdSetStencilTestEnable, "vts_native_vkCmdSetStencilTestEnable");
exports["vts_native_vkCmdSetStencilOp"] = Napi::Function::New(env, vts_native_vkCmdSetStencilOp, "vts_native_vkCmdSetStencilOp");
exports["vts_native_vkCmdSetRasterizerDiscardEnable"] = Napi::Function::New(env, vts_native_vkCmdSetRasterizerDiscardEnable, "vts_native_vkCmdSetRasterizerDiscardEnable");
exports["vts_native_vkCmdSetDepthBiasEnable"] = Napi::Function::New(env, vts_native_vkCmdSetDepthBiasEnable, "vts_native_vkCmdSetDepthBiasEnable");
exports["vts_native_vkCmdSetPrimitiveRestartEnable"] = Napi::Function::New(env, vts_native_vkCmdSetPrimitiveRestartEnable, "vts_native_vkCmdSetPrimitiveRestartEnable");
exports["vts_native_vkCreatePrivateDataSlot"] = Napi::Function::New(env, vts_native_vkCreatePrivateDataSlot, "vts_native_vkCreatePrivateDataSlot");
exports["vts_native_vkDestroyPrivateDataSlot"] = Napi::Function::New(env, vts_native_vkDestroyPrivateDataSlot, "vts_native_vkDestroyPrivateDataSlot");
exports["vts_native_vkSetPrivateData"] = Napi::Function::New(env, vts_native_vkSetPrivateData, "vts_native_vkSetPrivateData");
exports["vts_native_vkGetPrivateData"] = Napi::Function::New(env, vts_native_vkGetPrivateData, "vts_native_vkGetPrivateData");
exports["vts_native_vkCmdCopyBuffer2"] = Napi::Function::New(env, vts_native_vkCmdCopyBuffer2, "vts_native_vkCmdCopyBuffer2");
exports["vts_native_vkCmdCopyImage2"] = Napi::Function::New(env, vts_native_vkCmdCopyImage2, "vts_native_vkCmdCopyImage2");
exports["vts_native_vkCmdBlitImage2"] = Napi::Function::New(env, vts_native_vkCmdBlitImage2, "vts_native_vkCmdBlitImage2");
exports["vts_native_vkCmdCopyBufferToImage2"] = Napi::Function::New(env, vts_native_vkCmdCopyBufferToImage2, "vts_native_vkCmdCopyBufferToImage2");
exports["vts_native_vkCmdCopyImageToBuffer2"] = Napi::Function::New(env, vts_native_vkCmdCopyImageToBuffer2, "vts_native_vkCmdCopyImageToBuffer2");
exports["vts_native_vkCmdResolveImage2"] = Napi::Function::New(env, vts_native_vkCmdResolveImage2, "vts_native_vkCmdResolveImage2");
exports["vts_native_vkCmdSetFragmentShadingRateKHR"] = Napi::Function::New(env, vts_native_vkCmdSetFragmentShadingRateKHR, "vts_native_vkCmdSetFragmentShadingRateKHR");
exports["vts_native_vkGetPhysicalDeviceFragmentShadingRatesKHR"] = Napi::Function::New(env, vts_native_vkGetPhysicalDeviceFragmentShadingRatesKHR, "vts_native_vkGetPhysicalDeviceFragmentShadingRatesKHR");
exports["vts_native_vkCmdSetEvent2"] = Napi::Function::New(env, vts_native_vkCmdSetEvent2, "vts_native_vkCmdSetEvent2");
exports["vts_native_vkCmdResetEvent2"] = Napi::Function::New(env, vts_native_vkCmdResetEvent2, "vts_native_vkCmdResetEvent2");
exports["vts_native_vkCmdWaitEvents2"] = Napi::Function::New(env, vts_native_vkCmdWaitEvents2, "vts_native_vkCmdWaitEvents2");
exports["vts_native_vkCmdPipelineBarrier2"] = Napi::Function::New(env, vts_native_vkCmdPipelineBarrier2, "vts_native_vkCmdPipelineBarrier2");
exports["vts_native_vkQueueSubmit2"] = Napi::Function::New(env, vts_native_vkQueueSubmit2, "vts_native_vkQueueSubmit2");
exports["vts_native_vkCmdWriteTimestamp2"] = Napi::Function::New(env, vts_native_vkCmdWriteTimestamp2, "vts_native_vkCmdWriteTimestamp2");
exports["vts_native_vkCmdWriteBufferMarker2AMD"] = Napi::Function::New(env, vts_native_vkCmdWriteBufferMarker2AMD, "vts_native_vkCmdWriteBufferMarker2AMD");
exports["vts_native_vkGetQueueCheckpointData2NV"] = Napi::Function::New(env, vts_native_vkGetQueueCheckpointData2NV, "vts_native_vkGetQueueCheckpointData2NV");
exports["vts_native_vkGetPhysicalDeviceVideoCapabilitiesKHR"] = Napi::Function::New(env, vts_native_vkGetPhysicalDeviceVideoCapabilitiesKHR, "vts_native_vkGetPhysicalDeviceVideoCapabilitiesKHR");
exports["vts_native_vkGetPhysicalDeviceVideoFormatPropertiesKHR"] = Napi::Function::New(env, vts_native_vkGetPhysicalDeviceVideoFormatPropertiesKHR, "vts_native_vkGetPhysicalDeviceVideoFormatPropertiesKHR");
exports["vts_native_vkCreateVideoSessionKHR"] = Napi::Function::New(env, vts_native_vkCreateVideoSessionKHR, "vts_native_vkCreateVideoSessionKHR");
exports["vts_native_vkDestroyVideoSessionKHR"] = Napi::Function::New(env, vts_native_vkDestroyVideoSessionKHR, "vts_native_vkDestroyVideoSessionKHR");
exports["vts_native_vkCreateVideoSessionParametersKHR"] = Napi::Function::New(env, vts_native_vkCreateVideoSessionParametersKHR, "vts_native_vkCreateVideoSessionParametersKHR");
exports["vts_native_vkUpdateVideoSessionParametersKHR"] = Napi::Function::New(env, vts_native_vkUpdateVideoSessionParametersKHR, "vts_native_vkUpdateVideoSessionParametersKHR");
exports["vts_native_vkDestroyVideoSessionParametersKHR"] = Napi::Function::New(env, vts_native_vkDestroyVideoSessionParametersKHR, "vts_native_vkDestroyVideoSessionParametersKHR");
exports["vts_native_vkGetVideoSessionMemoryRequirementsKHR"] = Napi::Function::New(env, vts_native_vkGetVideoSessionMemoryRequirementsKHR, "vts_native_vkGetVideoSessionMemoryRequirementsKHR");
exports["vts_native_vkBindVideoSessionMemoryKHR"] = Napi::Function::New(env, vts_native_vkBindVideoSessionMemoryKHR, "vts_native_vkBindVideoSessionMemoryKHR");
exports["vts_native_vkCmdBeginVideoCodingKHR"] = Napi::Function::New(env, vts_native_vkCmdBeginVideoCodingKHR, "vts_native_vkCmdBeginVideoCodingKHR");
exports["vts_native_vkCmdControlVideoCodingKHR"] = Napi::Function::New(env, vts_native_vkCmdControlVideoCodingKHR, "vts_native_vkCmdControlVideoCodingKHR");
exports["vts_native_vkCmdEndVideoCodingKHR"] = Napi::Function::New(env, vts_native_vkCmdEndVideoCodingKHR, "vts_native_vkCmdEndVideoCodingKHR");
exports["vts_native_vkSetDeviceMemoryPriorityEXT"] = Napi::Function::New(env, vts_native_vkSetDeviceMemoryPriorityEXT, "vts_native_vkSetDeviceMemoryPriorityEXT");
exports["vts_native_vkWaitForPresentKHR"] = Napi::Function::New(env, vts_native_vkWaitForPresentKHR, "vts_native_vkWaitForPresentKHR");
exports["vts_native_vkCmdBeginRendering"] = Napi::Function::New(env, vts_native_vkCmdBeginRendering, "vts_native_vkCmdBeginRendering");
exports["vts_native_vkCmdEndRendering"] = Napi::Function::New(env, vts_native_vkCmdEndRendering, "vts_native_vkCmdEndRendering");
exports["vts_native_vkGetShaderModuleIdentifierEXT"] = Napi::Function::New(env, vts_native_vkGetShaderModuleIdentifierEXT, "vts_native_vkGetShaderModuleIdentifierEXT");
exports["vts_native_vkGetShaderModuleCreateInfoIdentifierEXT"] = Napi::Function::New(env, vts_native_vkGetShaderModuleCreateInfoIdentifierEXT, "vts_native_vkGetShaderModuleCreateInfoIdentifierEXT");
exports["vts_native_vkGetPipelinePropertiesEXT"] = Napi::Function::New(env, vts_native_vkGetPipelinePropertiesEXT, "vts_native_vkGetPipelinePropertiesEXT");
exports["vts_native_vkReleaseSwapchainImagesEXT"] = Napi::Function::New(env, vts_native_vkReleaseSwapchainImagesEXT, "vts_native_vkReleaseSwapchainImagesEXT");
    Napi::Object sTypes = Napi::Object::New(env);
sTypes.Set("VkApplicationInfo", Napi::Number::New(env, VK_STRUCTURE_TYPE_APPLICATION_INFO));
sTypes.Set("VkDeviceQueueCreateInfo", Napi::Number::New(env, VK_STRUCTURE_TYPE_DEVICE_QUEUE_CREATE_INFO));
sTypes.Set("VkDeviceCreateInfo", Napi::Number::New(env, VK_STRUCTURE_TYPE_DEVICE_CREATE_INFO));
sTypes.Set("VkInstanceCreateInfo", Napi::Number::New(env, VK_STRUCTURE_TYPE_INSTANCE_CREATE_INFO));
sTypes.Set("VkMemoryAllocateInfo", Napi::Number::New(env, VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_INFO));
sTypes.Set("VkMappedMemoryRange", Napi::Number::New(env, VK_STRUCTURE_TYPE_MAPPED_MEMORY_RANGE));
sTypes.Set("VkWriteDescriptorSet", Napi::Number::New(env, VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET));
sTypes.Set("VkCopyDescriptorSet", Napi::Number::New(env, VK_STRUCTURE_TYPE_COPY_DESCRIPTOR_SET));
sTypes.Set("VkBufferCreateInfo", Napi::Number::New(env, VK_STRUCTURE_TYPE_BUFFER_CREATE_INFO));
sTypes.Set("VkBufferViewCreateInfo", Napi::Number::New(env, VK_STRUCTURE_TYPE_BUFFER_VIEW_CREATE_INFO));
sTypes.Set("VkMemoryBarrier", Napi::Number::New(env, VK_STRUCTURE_TYPE_MEMORY_BARRIER));
sTypes.Set("VkBufferMemoryBarrier", Napi::Number::New(env, VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER));
sTypes.Set("VkImageMemoryBarrier", Napi::Number::New(env, VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER));
sTypes.Set("VkImageCreateInfo", Napi::Number::New(env, VK_STRUCTURE_TYPE_IMAGE_CREATE_INFO));
sTypes.Set("VkImageViewCreateInfo", Napi::Number::New(env, VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO));
sTypes.Set("VkBindSparseInfo", Napi::Number::New(env, VK_STRUCTURE_TYPE_BIND_SPARSE_INFO));
sTypes.Set("VkShaderModuleCreateInfo", Napi::Number::New(env, VK_STRUCTURE_TYPE_SHADER_MODULE_CREATE_INFO));
sTypes.Set("VkDescriptorSetLayoutCreateInfo", Napi::Number::New(env, VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_CREATE_INFO));
sTypes.Set("VkDescriptorPoolCreateInfo", Napi::Number::New(env, VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_CREATE_INFO));
sTypes.Set("VkDescriptorSetAllocateInfo", Napi::Number::New(env, VK_STRUCTURE_TYPE_DESCRIPTOR_SET_ALLOCATE_INFO));
sTypes.Set("VkPipelineShaderStageCreateInfo", Napi::Number::New(env, VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_CREATE_INFO));
sTypes.Set("VkComputePipelineCreateInfo", Napi::Number::New(env, VK_STRUCTURE_TYPE_COMPUTE_PIPELINE_CREATE_INFO));
sTypes.Set("VkPipelineVertexInputStateCreateInfo", Napi::Number::New(env, VK_STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_STATE_CREATE_INFO));
sTypes.Set("VkPipelineInputAssemblyStateCreateInfo", Napi::Number::New(env, VK_STRUCTURE_TYPE_PIPELINE_INPUT_ASSEMBLY_STATE_CREATE_INFO));
sTypes.Set("VkPipelineTessellationStateCreateInfo", Napi::Number::New(env, VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_STATE_CREATE_INFO));
sTypes.Set("VkPipelineViewportStateCreateInfo", Napi::Number::New(env, VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_STATE_CREATE_INFO));
sTypes.Set("VkPipelineRasterizationStateCreateInfo", Napi::Number::New(env, VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_CREATE_INFO));
sTypes.Set("VkPipelineMultisampleStateCreateInfo", Napi::Number::New(env, VK_STRUCTURE_TYPE_PIPELINE_MULTISAMPLE_STATE_CREATE_INFO));
sTypes.Set("VkPipelineColorBlendStateCreateInfo", Napi::Number::New(env, VK_STRUCTURE_TYPE_PIPELINE_COLOR_BLEND_STATE_CREATE_INFO));
sTypes.Set("VkPipelineDynamicStateCreateInfo", Napi::Number::New(env, VK_STRUCTURE_TYPE_PIPELINE_DYNAMIC_STATE_CREATE_INFO));
sTypes.Set("VkPipelineDepthStencilStateCreateInfo", Napi::Number::New(env, VK_STRUCTURE_TYPE_PIPELINE_DEPTH_STENCIL_STATE_CREATE_INFO));
sTypes.Set("VkGraphicsPipelineCreateInfo", Napi::Number::New(env, VK_STRUCTURE_TYPE_GRAPHICS_PIPELINE_CREATE_INFO));
sTypes.Set("VkPipelineCacheCreateInfo", Napi::Number::New(env, VK_STRUCTURE_TYPE_PIPELINE_CACHE_CREATE_INFO));
sTypes.Set("VkPipelineLayoutCreateInfo", Napi::Number::New(env, VK_STRUCTURE_TYPE_PIPELINE_LAYOUT_CREATE_INFO));
sTypes.Set("VkSamplerCreateInfo", Napi::Number::New(env, VK_STRUCTURE_TYPE_SAMPLER_CREATE_INFO));
sTypes.Set("VkCommandPoolCreateInfo", Napi::Number::New(env, VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO));
sTypes.Set("VkCommandBufferAllocateInfo", Napi::Number::New(env, VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO));
sTypes.Set("VkCommandBufferInheritanceInfo", Napi::Number::New(env, VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_INFO));
sTypes.Set("VkCommandBufferBeginInfo", Napi::Number::New(env, VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO));
sTypes.Set("VkRenderPassBeginInfo", Napi::Number::New(env, VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO));
sTypes.Set("VkRenderPassCreateInfo", Napi::Number::New(env, VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO));
sTypes.Set("VkEventCreateInfo", Napi::Number::New(env, VK_STRUCTURE_TYPE_EVENT_CREATE_INFO));
sTypes.Set("VkFenceCreateInfo", Napi::Number::New(env, VK_STRUCTURE_TYPE_FENCE_CREATE_INFO));
sTypes.Set("VkSemaphoreCreateInfo", Napi::Number::New(env, VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO));
sTypes.Set("VkQueryPoolCreateInfo", Napi::Number::New(env, VK_STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO));
sTypes.Set("VkFramebufferCreateInfo", Napi::Number::New(env, VK_STRUCTURE_TYPE_FRAMEBUFFER_CREATE_INFO));
sTypes.Set("VkSubmitInfo", Napi::Number::New(env, VK_STRUCTURE_TYPE_SUBMIT_INFO));
sTypes.Set("VkDisplayModeCreateInfoKHR", Napi::Number::New(env, VK_STRUCTURE_TYPE_DISPLAY_MODE_CREATE_INFO_KHR));
sTypes.Set("VkDisplaySurfaceCreateInfoKHR", Napi::Number::New(env, VK_STRUCTURE_TYPE_DISPLAY_SURFACE_CREATE_INFO_KHR));
sTypes.Set("VkDisplayPresentInfoKHR", Napi::Number::New(env, VK_STRUCTURE_TYPE_DISPLAY_PRESENT_INFO_KHR));
sTypes.Set("VkSwapchainCreateInfoKHR", Napi::Number::New(env, VK_STRUCTURE_TYPE_SWAPCHAIN_CREATE_INFO_KHR));
sTypes.Set("VkPresentInfoKHR", Napi::Number::New(env, VK_STRUCTURE_TYPE_PRESENT_INFO_KHR));
sTypes.Set("VkValidationFlagsEXT", Napi::Number::New(env, VK_STRUCTURE_TYPE_VALIDATION_FLAGS_EXT));
sTypes.Set("VkValidationFeaturesEXT", Napi::Number::New(env, VK_STRUCTURE_TYPE_VALIDATION_FEATURES_EXT));
sTypes.Set("VkDevicePrivateDataCreateInfo", Napi::Number::New(env, VK_STRUCTURE_TYPE_DEVICE_PRIVATE_DATA_CREATE_INFO));
sTypes.Set("VkPrivateDataSlotCreateInfo", Napi::Number::New(env, VK_STRUCTURE_TYPE_PRIVATE_DATA_SLOT_CREATE_INFO));
sTypes.Set("VkPhysicalDevicePrivateDataFeatures", Napi::Number::New(env, VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRIVATE_DATA_FEATURES));
sTypes.Set("VkPhysicalDeviceMultiDrawPropertiesEXT", Napi::Number::New(env, VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTI_DRAW_PROPERTIES_EXT));
sTypes.Set("VkPhysicalDeviceFeatures2", Napi::Number::New(env, VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FEATURES_2));
sTypes.Set("VkPhysicalDeviceProperties2", Napi::Number::New(env, VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROPERTIES_2));
sTypes.Set("VkFormatProperties2", Napi::Number::New(env, VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_2));
sTypes.Set("VkImageFormatProperties2", Napi::Number::New(env, VK_STRUCTURE_TYPE_IMAGE_FORMAT_PROPERTIES_2));
sTypes.Set("VkPhysicalDeviceImageFormatInfo2", Napi::Number::New(env, VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_FORMAT_INFO_2));
sTypes.Set("VkQueueFamilyProperties2", Napi::Number::New(env, VK_STRUCTURE_TYPE_QUEUE_FAMILY_PROPERTIES_2));
sTypes.Set("VkPhysicalDeviceMemoryProperties2", Napi::Number::New(env, VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PROPERTIES_2));
sTypes.Set("VkSparseImageFormatProperties2", Napi::Number::New(env, VK_STRUCTURE_TYPE_SPARSE_IMAGE_FORMAT_PROPERTIES_2));
sTypes.Set("VkPhysicalDeviceSparseImageFormatInfo2", Napi::Number::New(env, VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SPARSE_IMAGE_FORMAT_INFO_2));
sTypes.Set("VkPhysicalDevicePushDescriptorPropertiesKHR", Napi::Number::New(env, VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PUSH_DESCRIPTOR_PROPERTIES_KHR));
sTypes.Set("VkPhysicalDeviceDriverProperties", Napi::Number::New(env, VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DRIVER_PROPERTIES));
sTypes.Set("VkPresentRegionsKHR", Napi::Number::New(env, VK_STRUCTURE_TYPE_PRESENT_REGIONS_KHR));
sTypes.Set("VkPhysicalDeviceVariablePointersFeatures", Napi::Number::New(env, VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTERS_FEATURES));
sTypes.Set("VkPhysicalDeviceExternalImageFormatInfo", Napi::Number::New(env, VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_IMAGE_FORMAT_INFO));
sTypes.Set("VkExternalImageFormatProperties", Napi::Number::New(env, VK_STRUCTURE_TYPE_EXTERNAL_IMAGE_FORMAT_PROPERTIES));
sTypes.Set("VkPhysicalDeviceExternalBufferInfo", Napi::Number::New(env, VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_BUFFER_INFO));
sTypes.Set("VkExternalBufferProperties", Napi::Number::New(env, VK_STRUCTURE_TYPE_EXTERNAL_BUFFER_PROPERTIES));
sTypes.Set("VkPhysicalDeviceIDProperties", Napi::Number::New(env, VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ID_PROPERTIES));
sTypes.Set("VkExternalMemoryImageCreateInfo", Napi::Number::New(env, VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO));
sTypes.Set("VkExternalMemoryBufferCreateInfo", Napi::Number::New(env, VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_BUFFER_CREATE_INFO));
sTypes.Set("VkExportMemoryAllocateInfo", Napi::Number::New(env, VK_STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO));
sTypes.Set("VkPhysicalDeviceExternalSemaphoreInfo", Napi::Number::New(env, VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_SEMAPHORE_INFO));
sTypes.Set("VkExternalSemaphoreProperties", Napi::Number::New(env, VK_STRUCTURE_TYPE_EXTERNAL_SEMAPHORE_PROPERTIES));
sTypes.Set("VkExportSemaphoreCreateInfo", Napi::Number::New(env, VK_STRUCTURE_TYPE_EXPORT_SEMAPHORE_CREATE_INFO));
sTypes.Set("VkPhysicalDeviceExternalFenceInfo", Napi::Number::New(env, VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_FENCE_INFO));
sTypes.Set("VkExternalFenceProperties", Napi::Number::New(env, VK_STRUCTURE_TYPE_EXTERNAL_FENCE_PROPERTIES));
sTypes.Set("VkExportFenceCreateInfo", Napi::Number::New(env, VK_STRUCTURE_TYPE_EXPORT_FENCE_CREATE_INFO));
sTypes.Set("VkPhysicalDeviceMultiviewFeatures", Napi::Number::New(env, VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_FEATURES));
sTypes.Set("VkPhysicalDeviceMultiviewProperties", Napi::Number::New(env, VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PROPERTIES));
sTypes.Set("VkRenderPassMultiviewCreateInfo", Napi::Number::New(env, VK_STRUCTURE_TYPE_RENDER_PASS_MULTIVIEW_CREATE_INFO));
sTypes.Set("VkPhysicalDeviceGroupProperties", Napi::Number::New(env, VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GROUP_PROPERTIES));
sTypes.Set("VkMemoryAllocateFlagsInfo", Napi::Number::New(env, VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_FLAGS_INFO));
sTypes.Set("VkBindBufferMemoryInfo", Napi::Number::New(env, VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_INFO));
sTypes.Set("VkBindBufferMemoryDeviceGroupInfo", Napi::Number::New(env, VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_DEVICE_GROUP_INFO));
sTypes.Set("VkBindImageMemoryInfo", Napi::Number::New(env, VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_INFO));
sTypes.Set("VkBindImageMemoryDeviceGroupInfo", Napi::Number::New(env, VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_DEVICE_GROUP_INFO));
sTypes.Set("VkDeviceGroupRenderPassBeginInfo", Napi::Number::New(env, VK_STRUCTURE_TYPE_DEVICE_GROUP_RENDER_PASS_BEGIN_INFO));
sTypes.Set("VkDeviceGroupCommandBufferBeginInfo", Napi::Number::New(env, VK_STRUCTURE_TYPE_DEVICE_GROUP_COMMAND_BUFFER_BEGIN_INFO));
sTypes.Set("VkDeviceGroupSubmitInfo", Napi::Number::New(env, VK_STRUCTURE_TYPE_DEVICE_GROUP_SUBMIT_INFO));
sTypes.Set("VkDeviceGroupBindSparseInfo", Napi::Number::New(env, VK_STRUCTURE_TYPE_DEVICE_GROUP_BIND_SPARSE_INFO));
sTypes.Set("VkDeviceGroupPresentCapabilitiesKHR", Napi::Number::New(env, VK_STRUCTURE_TYPE_DEVICE_GROUP_PRESENT_CAPABILITIES_KHR));
sTypes.Set("VkImageSwapchainCreateInfoKHR", Napi::Number::New(env, VK_STRUCTURE_TYPE_IMAGE_SWAPCHAIN_CREATE_INFO_KHR));
sTypes.Set("VkBindImageMemorySwapchainInfoKHR", Napi::Number::New(env, VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_SWAPCHAIN_INFO_KHR));
sTypes.Set("VkAcquireNextImageInfoKHR", Napi::Number::New(env, VK_STRUCTURE_TYPE_ACQUIRE_NEXT_IMAGE_INFO_KHR));
sTypes.Set("VkDeviceGroupPresentInfoKHR", Napi::Number::New(env, VK_STRUCTURE_TYPE_DEVICE_GROUP_PRESENT_INFO_KHR));
sTypes.Set("VkDeviceGroupDeviceCreateInfo", Napi::Number::New(env, VK_STRUCTURE_TYPE_DEVICE_GROUP_DEVICE_CREATE_INFO));
sTypes.Set("VkDeviceGroupSwapchainCreateInfoKHR", Napi::Number::New(env, VK_STRUCTURE_TYPE_DEVICE_GROUP_SWAPCHAIN_CREATE_INFO_KHR));
sTypes.Set("VkDescriptorUpdateTemplateCreateInfo", Napi::Number::New(env, VK_STRUCTURE_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_CREATE_INFO));
sTypes.Set("VkPhysicalDevicePresentIdFeaturesKHR", Napi::Number::New(env, VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRESENT_ID_FEATURES_KHR));
sTypes.Set("VkPresentIdKHR", Napi::Number::New(env, VK_STRUCTURE_TYPE_PRESENT_ID_KHR));
sTypes.Set("VkPhysicalDevicePresentWaitFeaturesKHR", Napi::Number::New(env, VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRESENT_WAIT_FEATURES_KHR));
sTypes.Set("VkHdrMetadataEXT", Napi::Number::New(env, VK_STRUCTURE_TYPE_HDR_METADATA_EXT));
sTypes.Set("VkRenderPassInputAttachmentAspectCreateInfo", Napi::Number::New(env, VK_STRUCTURE_TYPE_RENDER_PASS_INPUT_ATTACHMENT_ASPECT_CREATE_INFO));
sTypes.Set("VkPhysicalDeviceSurfaceInfo2KHR", Napi::Number::New(env, VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SURFACE_INFO_2_KHR));
sTypes.Set("VkSurfaceCapabilities2KHR", Napi::Number::New(env, VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_2_KHR));
sTypes.Set("VkSurfaceFormat2KHR", Napi::Number::New(env, VK_STRUCTURE_TYPE_SURFACE_FORMAT_2_KHR));
sTypes.Set("VkDisplayProperties2KHR", Napi::Number::New(env, VK_STRUCTURE_TYPE_DISPLAY_PROPERTIES_2_KHR));
sTypes.Set("VkDisplayPlaneProperties2KHR", Napi::Number::New(env, VK_STRUCTURE_TYPE_DISPLAY_PLANE_PROPERTIES_2_KHR));
sTypes.Set("VkDisplayModeProperties2KHR", Napi::Number::New(env, VK_STRUCTURE_TYPE_DISPLAY_MODE_PROPERTIES_2_KHR));
sTypes.Set("VkDisplayPlaneInfo2KHR", Napi::Number::New(env, VK_STRUCTURE_TYPE_DISPLAY_PLANE_INFO_2_KHR));
sTypes.Set("VkDisplayPlaneCapabilities2KHR", Napi::Number::New(env, VK_STRUCTURE_TYPE_DISPLAY_PLANE_CAPABILITIES_2_KHR));
sTypes.Set("VkSharedPresentSurfaceCapabilitiesKHR", Napi::Number::New(env, VK_STRUCTURE_TYPE_SHARED_PRESENT_SURFACE_CAPABILITIES_KHR));
sTypes.Set("VkPhysicalDevice16BitStorageFeatures", Napi::Number::New(env, VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_16BIT_STORAGE_FEATURES));
sTypes.Set("VkPhysicalDeviceSubgroupProperties", Napi::Number::New(env, VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_PROPERTIES));
sTypes.Set("VkPhysicalDeviceShaderSubgroupExtendedTypesFeatures", Napi::Number::New(env, VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SUBGROUP_EXTENDED_TYPES_FEATURES));
sTypes.Set("VkBufferMemoryRequirementsInfo2", Napi::Number::New(env, VK_STRUCTURE_TYPE_BUFFER_MEMORY_REQUIREMENTS_INFO_2));
sTypes.Set("VkDeviceBufferMemoryRequirements", Napi::Number::New(env, VK_STRUCTURE_TYPE_DEVICE_BUFFER_MEMORY_REQUIREMENTS));
sTypes.Set("VkImageMemoryRequirementsInfo2", Napi::Number::New(env, VK_STRUCTURE_TYPE_IMAGE_MEMORY_REQUIREMENTS_INFO_2));
sTypes.Set("VkImageSparseMemoryRequirementsInfo2", Napi::Number::New(env, VK_STRUCTURE_TYPE_IMAGE_SPARSE_MEMORY_REQUIREMENTS_INFO_2));
sTypes.Set("VkDeviceImageMemoryRequirements", Napi::Number::New(env, VK_STRUCTURE_TYPE_DEVICE_IMAGE_MEMORY_REQUIREMENTS));
sTypes.Set("VkMemoryRequirements2", Napi::Number::New(env, VK_STRUCTURE_TYPE_MEMORY_REQUIREMENTS_2));
sTypes.Set("VkSparseImageMemoryRequirements2", Napi::Number::New(env, VK_STRUCTURE_TYPE_SPARSE_IMAGE_MEMORY_REQUIREMENTS_2));
sTypes.Set("VkPhysicalDevicePointClippingProperties", Napi::Number::New(env, VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_POINT_CLIPPING_PROPERTIES));
sTypes.Set("VkMemoryDedicatedRequirements", Napi::Number::New(env, VK_STRUCTURE_TYPE_MEMORY_DEDICATED_REQUIREMENTS));
sTypes.Set("VkMemoryDedicatedAllocateInfo", Napi::Number::New(env, VK_STRUCTURE_TYPE_MEMORY_DEDICATED_ALLOCATE_INFO));
sTypes.Set("VkImageViewUsageCreateInfo", Napi::Number::New(env, VK_STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO));
sTypes.Set("VkPipelineTessellationDomainOriginStateCreateInfo", Napi::Number::New(env, VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_DOMAIN_ORIGIN_STATE_CREATE_INFO));
sTypes.Set("VkSamplerYcbcrConversionInfo", Napi::Number::New(env, VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_INFO));
sTypes.Set("VkSamplerYcbcrConversionCreateInfo", Napi::Number::New(env, VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_CREATE_INFO));
sTypes.Set("VkBindImagePlaneMemoryInfo", Napi::Number::New(env, VK_STRUCTURE_TYPE_BIND_IMAGE_PLANE_MEMORY_INFO));
sTypes.Set("VkImagePlaneMemoryRequirementsInfo", Napi::Number::New(env, VK_STRUCTURE_TYPE_IMAGE_PLANE_MEMORY_REQUIREMENTS_INFO));
sTypes.Set("VkPhysicalDeviceSamplerYcbcrConversionFeatures", Napi::Number::New(env, VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_YCBCR_CONVERSION_FEATURES));
sTypes.Set("VkSamplerYcbcrConversionImageFormatProperties", Napi::Number::New(env, VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_IMAGE_FORMAT_PROPERTIES));
sTypes.Set("VkProtectedSubmitInfo", Napi::Number::New(env, VK_STRUCTURE_TYPE_PROTECTED_SUBMIT_INFO));
sTypes.Set("VkPhysicalDeviceProtectedMemoryFeatures", Napi::Number::New(env, VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROTECTED_MEMORY_FEATURES));
sTypes.Set("VkPhysicalDeviceProtectedMemoryProperties", Napi::Number::New(env, VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROTECTED_MEMORY_PROPERTIES));
sTypes.Set("VkDeviceQueueInfo2", Napi::Number::New(env, VK_STRUCTURE_TYPE_DEVICE_QUEUE_INFO_2));
sTypes.Set("VkPhysicalDeviceSamplerFilterMinmaxProperties", Napi::Number::New(env, VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_FILTER_MINMAX_PROPERTIES));
sTypes.Set("VkSampleLocationsInfoEXT", Napi::Number::New(env, VK_STRUCTURE_TYPE_SAMPLE_LOCATIONS_INFO_EXT));
sTypes.Set("VkRenderPassSampleLocationsBeginInfoEXT", Napi::Number::New(env, VK_STRUCTURE_TYPE_RENDER_PASS_SAMPLE_LOCATIONS_BEGIN_INFO_EXT));
sTypes.Set("VkPipelineSampleLocationsStateCreateInfoEXT", Napi::Number::New(env, VK_STRUCTURE_TYPE_PIPELINE_SAMPLE_LOCATIONS_STATE_CREATE_INFO_EXT));
sTypes.Set("VkPhysicalDeviceSampleLocationsPropertiesEXT", Napi::Number::New(env, VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLE_LOCATIONS_PROPERTIES_EXT));
sTypes.Set("VkMultisamplePropertiesEXT", Napi::Number::New(env, VK_STRUCTURE_TYPE_MULTISAMPLE_PROPERTIES_EXT));
sTypes.Set("VkSamplerReductionModeCreateInfo", Napi::Number::New(env, VK_STRUCTURE_TYPE_SAMPLER_REDUCTION_MODE_CREATE_INFO));
sTypes.Set("VkPhysicalDeviceMultiDrawFeaturesEXT", Napi::Number::New(env, VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTI_DRAW_FEATURES_EXT));
sTypes.Set("VkPhysicalDeviceInlineUniformBlockFeatures", Napi::Number::New(env, VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_FEATURES));
sTypes.Set("VkPhysicalDeviceInlineUniformBlockProperties", Napi::Number::New(env, VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_PROPERTIES));
sTypes.Set("VkWriteDescriptorSetInlineUniformBlock", Napi::Number::New(env, VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_INLINE_UNIFORM_BLOCK));
sTypes.Set("VkDescriptorPoolInlineUniformBlockCreateInfo", Napi::Number::New(env, VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_INLINE_UNIFORM_BLOCK_CREATE_INFO));
sTypes.Set("VkImageFormatListCreateInfo", Napi::Number::New(env, VK_STRUCTURE_TYPE_IMAGE_FORMAT_LIST_CREATE_INFO));
sTypes.Set("VkValidationCacheCreateInfoEXT", Napi::Number::New(env, VK_STRUCTURE_TYPE_VALIDATION_CACHE_CREATE_INFO_EXT));
sTypes.Set("VkShaderModuleValidationCacheCreateInfoEXT", Napi::Number::New(env, VK_STRUCTURE_TYPE_SHADER_MODULE_VALIDATION_CACHE_CREATE_INFO_EXT));
sTypes.Set("VkPhysicalDeviceMaintenance3Properties", Napi::Number::New(env, VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_3_PROPERTIES));
sTypes.Set("VkPhysicalDeviceMaintenance4Features", Napi::Number::New(env, VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_4_FEATURES));
sTypes.Set("VkPhysicalDeviceMaintenance4Properties", Napi::Number::New(env, VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_4_PROPERTIES));
sTypes.Set("VkDescriptorSetLayoutSupport", Napi::Number::New(env, VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_SUPPORT));
sTypes.Set("VkPhysicalDeviceShaderDrawParametersFeatures", Napi::Number::New(env, VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DRAW_PARAMETERS_FEATURES));
sTypes.Set("VkPhysicalDeviceShaderFloat16Int8Features", Napi::Number::New(env, VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_FLOAT16_INT8_FEATURES));
sTypes.Set("VkPhysicalDeviceFloatControlsProperties", Napi::Number::New(env, VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FLOAT_CONTROLS_PROPERTIES));
sTypes.Set("VkPhysicalDeviceHostQueryResetFeatures", Napi::Number::New(env, VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_HOST_QUERY_RESET_FEATURES));
sTypes.Set("VkDeviceQueueGlobalPriorityCreateInfoKHR", Napi::Number::New(env, VK_STRUCTURE_TYPE_DEVICE_QUEUE_GLOBAL_PRIORITY_CREATE_INFO_KHR));
sTypes.Set("VkPhysicalDeviceGlobalPriorityQueryFeaturesKHR", Napi::Number::New(env, VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GLOBAL_PRIORITY_QUERY_FEATURES_KHR));
sTypes.Set("VkQueueFamilyGlobalPriorityPropertiesKHR", Napi::Number::New(env, VK_STRUCTURE_TYPE_QUEUE_FAMILY_GLOBAL_PRIORITY_PROPERTIES_KHR));
sTypes.Set("VkImportMemoryHostPointerInfoEXT", Napi::Number::New(env, VK_STRUCTURE_TYPE_IMPORT_MEMORY_HOST_POINTER_INFO_EXT));
sTypes.Set("VkMemoryHostPointerPropertiesEXT", Napi::Number::New(env, VK_STRUCTURE_TYPE_MEMORY_HOST_POINTER_PROPERTIES_EXT));
sTypes.Set("VkPhysicalDeviceExternalMemoryHostPropertiesEXT", Napi::Number::New(env, VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_MEMORY_HOST_PROPERTIES_EXT));
sTypes.Set("VkPhysicalDeviceDescriptorIndexingFeatures", Napi::Number::New(env, VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_FEATURES));
sTypes.Set("VkPhysicalDeviceDescriptorIndexingProperties", Napi::Number::New(env, VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_PROPERTIES));
sTypes.Set("VkDescriptorSetLayoutBindingFlagsCreateInfo", Napi::Number::New(env, VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_BINDING_FLAGS_CREATE_INFO));
sTypes.Set("VkDescriptorSetVariableDescriptorCountAllocateInfo", Napi::Number::New(env, VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_ALLOCATE_INFO));
sTypes.Set("VkDescriptorSetVariableDescriptorCountLayoutSupport", Napi::Number::New(env, VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_LAYOUT_SUPPORT));
sTypes.Set("VkAttachmentDescription2", Napi::Number::New(env, VK_STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_2));
sTypes.Set("VkAttachmentReference2", Napi::Number::New(env, VK_STRUCTURE_TYPE_ATTACHMENT_REFERENCE_2));
sTypes.Set("VkSubpassDescription2", Napi::Number::New(env, VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_2));
sTypes.Set("VkSubpassDependency2", Napi::Number::New(env, VK_STRUCTURE_TYPE_SUBPASS_DEPENDENCY_2));
sTypes.Set("VkRenderPassCreateInfo2", Napi::Number::New(env, VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO_2));
sTypes.Set("VkSubpassBeginInfo", Napi::Number::New(env, VK_STRUCTURE_TYPE_SUBPASS_BEGIN_INFO));
sTypes.Set("VkSubpassEndInfo", Napi::Number::New(env, VK_STRUCTURE_TYPE_SUBPASS_END_INFO));
sTypes.Set("VkPhysicalDeviceTimelineSemaphoreFeatures", Napi::Number::New(env, VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_FEATURES));
sTypes.Set("VkPhysicalDeviceTimelineSemaphoreProperties", Napi::Number::New(env, VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_PROPERTIES));
sTypes.Set("VkSemaphoreTypeCreateInfo", Napi::Number::New(env, VK_STRUCTURE_TYPE_SEMAPHORE_TYPE_CREATE_INFO));
sTypes.Set("VkTimelineSemaphoreSubmitInfo", Napi::Number::New(env, VK_STRUCTURE_TYPE_TIMELINE_SEMAPHORE_SUBMIT_INFO));
sTypes.Set("VkSemaphoreWaitInfo", Napi::Number::New(env, VK_STRUCTURE_TYPE_SEMAPHORE_WAIT_INFO));
sTypes.Set("VkSemaphoreSignalInfo", Napi::Number::New(env, VK_STRUCTURE_TYPE_SEMAPHORE_SIGNAL_INFO));
sTypes.Set("VkPipelineVertexInputDivisorStateCreateInfoEXT", Napi::Number::New(env, VK_STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_DIVISOR_STATE_CREATE_INFO_EXT));
sTypes.Set("VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT", Napi::Number::New(env, VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_ATTRIBUTE_DIVISOR_PROPERTIES_EXT));
sTypes.Set("VkPhysicalDevicePCIBusInfoPropertiesEXT", Napi::Number::New(env, VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PCI_BUS_INFO_PROPERTIES_EXT));
sTypes.Set("VkPhysicalDevice8BitStorageFeatures", Napi::Number::New(env, VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_8BIT_STORAGE_FEATURES));
sTypes.Set("VkPhysicalDeviceVulkanMemoryModelFeatures", Napi::Number::New(env, VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_MEMORY_MODEL_FEATURES));
sTypes.Set("VkPhysicalDeviceShaderAtomicInt64Features", Napi::Number::New(env, VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_INT64_FEATURES));
sTypes.Set("VkPhysicalDeviceShaderAtomicFloatFeaturesEXT", Napi::Number::New(env, VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_FLOAT_FEATURES_EXT));
sTypes.Set("VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT", Napi::Number::New(env, VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_FLOAT_2_FEATURES_EXT));
sTypes.Set("VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT", Napi::Number::New(env, VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_ATTRIBUTE_DIVISOR_FEATURES_EXT));
sTypes.Set("VkPhysicalDeviceDepthStencilResolveProperties", Napi::Number::New(env, VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_STENCIL_RESOLVE_PROPERTIES));
sTypes.Set("VkSubpassDescriptionDepthStencilResolve", Napi::Number::New(env, VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_DEPTH_STENCIL_RESOLVE));
sTypes.Set("VkPhysicalDeviceTransformFeedbackFeaturesEXT", Napi::Number::New(env, VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TRANSFORM_FEEDBACK_FEATURES_EXT));
sTypes.Set("VkPhysicalDeviceTransformFeedbackPropertiesEXT", Napi::Number::New(env, VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TRANSFORM_FEEDBACK_PROPERTIES_EXT));
sTypes.Set("VkPipelineRasterizationStateStreamCreateInfoEXT", Napi::Number::New(env, VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_STREAM_CREATE_INFO_EXT));
sTypes.Set("VkPhysicalDeviceMeshShaderFeaturesEXT", Napi::Number::New(env, VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MESH_SHADER_FEATURES_EXT));
sTypes.Set("VkPhysicalDeviceMeshShaderPropertiesEXT", Napi::Number::New(env, VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MESH_SHADER_PROPERTIES_EXT));
sTypes.Set("VkRayTracingShaderGroupCreateInfoKHR", Napi::Number::New(env, VK_STRUCTURE_TYPE_RAY_TRACING_SHADER_GROUP_CREATE_INFO_KHR));
sTypes.Set("VkRayTracingPipelineCreateInfoKHR", Napi::Number::New(env, VK_STRUCTURE_TYPE_RAY_TRACING_PIPELINE_CREATE_INFO_KHR));
sTypes.Set("VkPhysicalDeviceRayTracingPipelineFeaturesKHR", Napi::Number::New(env, VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_PIPELINE_FEATURES_KHR));
sTypes.Set("VkPhysicalDeviceRayQueryFeaturesKHR", Napi::Number::New(env, VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_QUERY_FEATURES_KHR));
sTypes.Set("VkPhysicalDeviceRayTracingPipelinePropertiesKHR", Napi::Number::New(env, VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_PIPELINE_PROPERTIES_KHR));
sTypes.Set("VkPhysicalDeviceRayTracingMaintenance1FeaturesKHR", Napi::Number::New(env, VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_MAINTENANCE_1_FEATURES_KHR));
sTypes.Set("VkDrmFormatModifierPropertiesListEXT", Napi::Number::New(env, VK_STRUCTURE_TYPE_DRM_FORMAT_MODIFIER_PROPERTIES_LIST_EXT));
sTypes.Set("VkPhysicalDeviceImageDrmFormatModifierInfoEXT", Napi::Number::New(env, VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_DRM_FORMAT_MODIFIER_INFO_EXT));
sTypes.Set("VkImageDrmFormatModifierListCreateInfoEXT", Napi::Number::New(env, VK_STRUCTURE_TYPE_IMAGE_DRM_FORMAT_MODIFIER_LIST_CREATE_INFO_EXT));
sTypes.Set("VkImageDrmFormatModifierExplicitCreateInfoEXT", Napi::Number::New(env, VK_STRUCTURE_TYPE_IMAGE_DRM_FORMAT_MODIFIER_EXPLICIT_CREATE_INFO_EXT));
sTypes.Set("VkImageDrmFormatModifierPropertiesEXT", Napi::Number::New(env, VK_STRUCTURE_TYPE_IMAGE_DRM_FORMAT_MODIFIER_PROPERTIES_EXT));
sTypes.Set("VkImageStencilUsageCreateInfo", Napi::Number::New(env, VK_STRUCTURE_TYPE_IMAGE_STENCIL_USAGE_CREATE_INFO));
sTypes.Set("VkPhysicalDeviceFragmentDensityMapFeaturesEXT", Napi::Number::New(env, VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_FEATURES_EXT));
sTypes.Set("VkPhysicalDeviceFragmentDensityMap2FeaturesEXT", Napi::Number::New(env, VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_2_FEATURES_EXT));
sTypes.Set("VkPhysicalDeviceFragmentDensityMapPropertiesEXT", Napi::Number::New(env, VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_PROPERTIES_EXT));
sTypes.Set("VkPhysicalDeviceFragmentDensityMap2PropertiesEXT", Napi::Number::New(env, VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_2_PROPERTIES_EXT));
sTypes.Set("VkRenderPassFragmentDensityMapCreateInfoEXT", Napi::Number::New(env, VK_STRUCTURE_TYPE_RENDER_PASS_FRAGMENT_DENSITY_MAP_CREATE_INFO_EXT));
sTypes.Set("VkPhysicalDeviceScalarBlockLayoutFeatures", Napi::Number::New(env, VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SCALAR_BLOCK_LAYOUT_FEATURES));
sTypes.Set("VkSurfaceProtectedCapabilitiesKHR", Napi::Number::New(env, VK_STRUCTURE_TYPE_SURFACE_PROTECTED_CAPABILITIES_KHR));
sTypes.Set("VkPhysicalDeviceUniformBufferStandardLayoutFeatures", Napi::Number::New(env, VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_UNIFORM_BUFFER_STANDARD_LAYOUT_FEATURES));
sTypes.Set("VkPhysicalDeviceMemoryBudgetPropertiesEXT", Napi::Number::New(env, VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_BUDGET_PROPERTIES_EXT));
sTypes.Set("VkPhysicalDeviceMemoryPriorityFeaturesEXT", Napi::Number::New(env, VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PRIORITY_FEATURES_EXT));
sTypes.Set("VkMemoryPriorityAllocateInfoEXT", Napi::Number::New(env, VK_STRUCTURE_TYPE_MEMORY_PRIORITY_ALLOCATE_INFO_EXT));
sTypes.Set("VkPhysicalDevicePageableDeviceLocalMemoryFeaturesEXT", Napi::Number::New(env, VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PAGEABLE_DEVICE_LOCAL_MEMORY_FEATURES_EXT));
sTypes.Set("VkPhysicalDeviceBufferDeviceAddressFeatures", Napi::Number::New(env, VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_DEVICE_ADDRESS_FEATURES));
sTypes.Set("VkBufferDeviceAddressInfo", Napi::Number::New(env, VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_INFO));
sTypes.Set("VkBufferOpaqueCaptureAddressCreateInfo", Napi::Number::New(env, VK_STRUCTURE_TYPE_BUFFER_OPAQUE_CAPTURE_ADDRESS_CREATE_INFO));
sTypes.Set("VkPhysicalDeviceImageViewImageFormatInfoEXT", Napi::Number::New(env, VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_VIEW_IMAGE_FORMAT_INFO_EXT));
sTypes.Set("VkFilterCubicImageViewImageFormatPropertiesEXT", Napi::Number::New(env, VK_STRUCTURE_TYPE_FILTER_CUBIC_IMAGE_VIEW_IMAGE_FORMAT_PROPERTIES_EXT));
sTypes.Set("VkPhysicalDeviceImagelessFramebufferFeatures", Napi::Number::New(env, VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGELESS_FRAMEBUFFER_FEATURES));
sTypes.Set("VkFramebufferAttachmentsCreateInfo", Napi::Number::New(env, VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENTS_CREATE_INFO));
sTypes.Set("VkFramebufferAttachmentImageInfo", Napi::Number::New(env, VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENT_IMAGE_INFO));
sTypes.Set("VkRenderPassAttachmentBeginInfo", Napi::Number::New(env, VK_STRUCTURE_TYPE_RENDER_PASS_ATTACHMENT_BEGIN_INFO));
sTypes.Set("VkPhysicalDeviceTextureCompressionASTCHDRFeatures", Napi::Number::New(env, VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXTURE_COMPRESSION_ASTC_HDR_FEATURES));
sTypes.Set("VkPhysicalDeviceYcbcrImageArraysFeaturesEXT", Napi::Number::New(env, VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_YCBCR_IMAGE_ARRAYS_FEATURES_EXT));
sTypes.Set("VkPipelineCreationFeedbackCreateInfo", Napi::Number::New(env, VK_STRUCTURE_TYPE_PIPELINE_CREATION_FEEDBACK_CREATE_INFO));
sTypes.Set("VkHeadlessSurfaceCreateInfoEXT", Napi::Number::New(env, VK_STRUCTURE_TYPE_HEADLESS_SURFACE_CREATE_INFO_EXT));
sTypes.Set("VkPhysicalDeviceShaderClockFeaturesKHR", Napi::Number::New(env, VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CLOCK_FEATURES_KHR));
sTypes.Set("VkPhysicalDeviceIndexTypeUint8FeaturesEXT", Napi::Number::New(env, VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INDEX_TYPE_UINT8_FEATURES_EXT));
sTypes.Set("VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT", Napi::Number::New(env, VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADER_INTERLOCK_FEATURES_EXT));
sTypes.Set("VkPhysicalDeviceSeparateDepthStencilLayoutsFeatures", Napi::Number::New(env, VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SEPARATE_DEPTH_STENCIL_LAYOUTS_FEATURES));
sTypes.Set("VkAttachmentReferenceStencilLayout", Napi::Number::New(env, VK_STRUCTURE_TYPE_ATTACHMENT_REFERENCE_STENCIL_LAYOUT));
sTypes.Set("VkPhysicalDevicePrimitiveTopologyListRestartFeaturesEXT", Napi::Number::New(env, VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRIMITIVE_TOPOLOGY_LIST_RESTART_FEATURES_EXT));
sTypes.Set("VkAttachmentDescriptionStencilLayout", Napi::Number::New(env, VK_STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_STENCIL_LAYOUT));
sTypes.Set("VkPhysicalDeviceShaderDemoteToHelperInvocationFeatures", Napi::Number::New(env, VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DEMOTE_TO_HELPER_INVOCATION_FEATURES));
sTypes.Set("VkPhysicalDeviceTexelBufferAlignmentFeaturesEXT", Napi::Number::New(env, VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXEL_BUFFER_ALIGNMENT_FEATURES_EXT));
sTypes.Set("VkPhysicalDeviceTexelBufferAlignmentProperties", Napi::Number::New(env, VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXEL_BUFFER_ALIGNMENT_PROPERTIES));
sTypes.Set("VkPhysicalDeviceSubgroupSizeControlFeatures", Napi::Number::New(env, VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_SIZE_CONTROL_FEATURES));
sTypes.Set("VkPhysicalDeviceSubgroupSizeControlProperties", Napi::Number::New(env, VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_SIZE_CONTROL_PROPERTIES));
sTypes.Set("VkMemoryOpaqueCaptureAddressAllocateInfo", Napi::Number::New(env, VK_STRUCTURE_TYPE_MEMORY_OPAQUE_CAPTURE_ADDRESS_ALLOCATE_INFO));
sTypes.Set("VkDeviceMemoryOpaqueCaptureAddressInfo", Napi::Number::New(env, VK_STRUCTURE_TYPE_DEVICE_MEMORY_OPAQUE_CAPTURE_ADDRESS_INFO));
sTypes.Set("VkPhysicalDeviceLineRasterizationFeaturesEXT", Napi::Number::New(env, VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LINE_RASTERIZATION_FEATURES_EXT));
sTypes.Set("VkPhysicalDeviceLineRasterizationPropertiesEXT", Napi::Number::New(env, VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LINE_RASTERIZATION_PROPERTIES_EXT));
sTypes.Set("VkPipelineRasterizationLineStateCreateInfoEXT", Napi::Number::New(env, VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_LINE_STATE_CREATE_INFO_EXT));
sTypes.Set("VkPhysicalDevicePipelineCreationCacheControlFeatures", Napi::Number::New(env, VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_CREATION_CACHE_CONTROL_FEATURES));
sTypes.Set("VkPhysicalDeviceVulkan11Features", Napi::Number::New(env, VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_1_FEATURES));
sTypes.Set("VkPhysicalDeviceVulkan11Properties", Napi::Number::New(env, VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_1_PROPERTIES));
sTypes.Set("VkPhysicalDeviceVulkan12Features", Napi::Number::New(env, VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_2_FEATURES));
sTypes.Set("VkPhysicalDeviceVulkan12Properties", Napi::Number::New(env, VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_2_PROPERTIES));
sTypes.Set("VkPhysicalDeviceVulkan13Features", Napi::Number::New(env, VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_3_FEATURES));
sTypes.Set("VkPhysicalDeviceVulkan13Properties", Napi::Number::New(env, VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_3_PROPERTIES));
sTypes.Set("VkPhysicalDeviceToolProperties", Napi::Number::New(env, VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TOOL_PROPERTIES));
sTypes.Set("VkRayTracingPipelineInterfaceCreateInfoKHR", Napi::Number::New(env, VK_STRUCTURE_TYPE_RAY_TRACING_PIPELINE_INTERFACE_CREATE_INFO_KHR));
sTypes.Set("VkPipelineLibraryCreateInfoKHR", Napi::Number::New(env, VK_STRUCTURE_TYPE_PIPELINE_LIBRARY_CREATE_INFO_KHR));
sTypes.Set("VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeatures", Napi::Number::New(env, VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ZERO_INITIALIZE_WORKGROUP_MEMORY_FEATURES));
sTypes.Set("VkPhysicalDeviceShaderSubgroupUniformControlFlowFeaturesKHR", Napi::Number::New(env, VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SUBGROUP_UNIFORM_CONTROL_FLOW_FEATURES_KHR));
sTypes.Set("VkPhysicalDeviceRobustness2FeaturesEXT", Napi::Number::New(env, VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ROBUSTNESS_2_FEATURES_EXT));
sTypes.Set("VkPhysicalDeviceRobustness2PropertiesEXT", Napi::Number::New(env, VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ROBUSTNESS_2_PROPERTIES_EXT));
sTypes.Set("VkPhysicalDeviceImageRobustnessFeatures", Napi::Number::New(env, VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_ROBUSTNESS_FEATURES));
sTypes.Set("VkPhysicalDeviceWorkgroupMemoryExplicitLayoutFeaturesKHR", Napi::Number::New(env, VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_WORKGROUP_MEMORY_EXPLICIT_LAYOUT_FEATURES_KHR));
sTypes.Set("VkBufferCopy2", Napi::Number::New(env, VK_STRUCTURE_TYPE_BUFFER_COPY_2));
sTypes.Set("VkImageCopy2", Napi::Number::New(env, VK_STRUCTURE_TYPE_IMAGE_COPY_2));
sTypes.Set("VkImageBlit2", Napi::Number::New(env, VK_STRUCTURE_TYPE_IMAGE_BLIT_2));
sTypes.Set("VkBufferImageCopy2", Napi::Number::New(env, VK_STRUCTURE_TYPE_BUFFER_IMAGE_COPY_2));
sTypes.Set("VkImageResolve2", Napi::Number::New(env, VK_STRUCTURE_TYPE_IMAGE_RESOLVE_2));
sTypes.Set("VkCopyBufferInfo2", Napi::Number::New(env, VK_STRUCTURE_TYPE_COPY_BUFFER_INFO_2));
sTypes.Set("VkCopyImageInfo2", Napi::Number::New(env, VK_STRUCTURE_TYPE_COPY_IMAGE_INFO_2));
sTypes.Set("VkBlitImageInfo2", Napi::Number::New(env, VK_STRUCTURE_TYPE_BLIT_IMAGE_INFO_2));
sTypes.Set("VkCopyBufferToImageInfo2", Napi::Number::New(env, VK_STRUCTURE_TYPE_COPY_BUFFER_TO_IMAGE_INFO_2));
sTypes.Set("VkCopyImageToBufferInfo2", Napi::Number::New(env, VK_STRUCTURE_TYPE_COPY_IMAGE_TO_BUFFER_INFO_2));
sTypes.Set("VkResolveImageInfo2", Napi::Number::New(env, VK_STRUCTURE_TYPE_RESOLVE_IMAGE_INFO_2));
sTypes.Set("VkPhysicalDeviceShaderImageAtomicInt64FeaturesEXT", Napi::Number::New(env, VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_IMAGE_ATOMIC_INT64_FEATURES_EXT));
sTypes.Set("VkFragmentShadingRateAttachmentInfoKHR", Napi::Number::New(env, VK_STRUCTURE_TYPE_FRAGMENT_SHADING_RATE_ATTACHMENT_INFO_KHR));
sTypes.Set("VkPipelineFragmentShadingRateStateCreateInfoKHR", Napi::Number::New(env, VK_STRUCTURE_TYPE_PIPELINE_FRAGMENT_SHADING_RATE_STATE_CREATE_INFO_KHR));
sTypes.Set("VkPhysicalDeviceFragmentShadingRateFeaturesKHR", Napi::Number::New(env, VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_FEATURES_KHR));
sTypes.Set("VkPhysicalDeviceFragmentShadingRatePropertiesKHR", Napi::Number::New(env, VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_PROPERTIES_KHR));
sTypes.Set("VkPhysicalDeviceFragmentShadingRateKHR", Napi::Number::New(env, VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_KHR));
sTypes.Set("VkPhysicalDeviceShaderTerminateInvocationFeatures", Napi::Number::New(env, VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_TERMINATE_INVOCATION_FEATURES));
sTypes.Set("VkPhysicalDeviceImage2DViewOf3DFeaturesEXT", Napi::Number::New(env, VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_2D_VIEW_OF_3D_FEATURES_EXT));
sTypes.Set("VkPhysicalDeviceMutableDescriptorTypeFeaturesEXT", Napi::Number::New(env, VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MUTABLE_DESCRIPTOR_TYPE_FEATURES_EXT));
sTypes.Set("VkMutableDescriptorTypeCreateInfoEXT", Napi::Number::New(env, VK_STRUCTURE_TYPE_MUTABLE_DESCRIPTOR_TYPE_CREATE_INFO_EXT));
sTypes.Set("VkPhysicalDeviceVertexInputDynamicStateFeaturesEXT", Napi::Number::New(env, VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_INPUT_DYNAMIC_STATE_FEATURES_EXT));
sTypes.Set("VkMemoryBarrier2", Napi::Number::New(env, VK_STRUCTURE_TYPE_MEMORY_BARRIER_2));
sTypes.Set("VkImageMemoryBarrier2", Napi::Number::New(env, VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER_2));
sTypes.Set("VkBufferMemoryBarrier2", Napi::Number::New(env, VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER_2));
sTypes.Set("VkDependencyInfo", Napi::Number::New(env, VK_STRUCTURE_TYPE_DEPENDENCY_INFO));
sTypes.Set("VkSemaphoreSubmitInfo", Napi::Number::New(env, VK_STRUCTURE_TYPE_SEMAPHORE_SUBMIT_INFO));
sTypes.Set("VkCommandBufferSubmitInfo", Napi::Number::New(env, VK_STRUCTURE_TYPE_COMMAND_BUFFER_SUBMIT_INFO));
sTypes.Set("VkSubmitInfo2", Napi::Number::New(env, VK_STRUCTURE_TYPE_SUBMIT_INFO_2));
sTypes.Set("VkQueueFamilyCheckpointProperties2NV", Napi::Number::New(env, VK_STRUCTURE_TYPE_QUEUE_FAMILY_CHECKPOINT_PROPERTIES_2_NV));
sTypes.Set("VkCheckpointData2NV", Napi::Number::New(env, VK_STRUCTURE_TYPE_CHECKPOINT_DATA_2_NV));
sTypes.Set("VkPhysicalDeviceSynchronization2Features", Napi::Number::New(env, VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SYNCHRONIZATION_2_FEATURES));
sTypes.Set("VkPhysicalDevicePrimitivesGeneratedQueryFeaturesEXT", Napi::Number::New(env, VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRIMITIVES_GENERATED_QUERY_FEATURES_EXT));
sTypes.Set("VkPhysicalDeviceLegacyDitheringFeaturesEXT", Napi::Number::New(env, VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LEGACY_DITHERING_FEATURES_EXT));
sTypes.Set("VkPhysicalDeviceMultisampledRenderToSingleSampledFeaturesEXT", Napi::Number::New(env, VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTISAMPLED_RENDER_TO_SINGLE_SAMPLED_FEATURES_EXT));
sTypes.Set("VkSubpassResolvePerformanceQueryEXT", Napi::Number::New(env, VK_STRUCTURE_TYPE_SUBPASS_RESOLVE_PERFORMANCE_QUERY_EXT));
sTypes.Set("VkMultisampledRenderToSingleSampledInfoEXT", Napi::Number::New(env, VK_STRUCTURE_TYPE_MULTISAMPLED_RENDER_TO_SINGLE_SAMPLED_INFO_EXT));
sTypes.Set("VkPhysicalDevicePipelineProtectedAccessFeaturesEXT", Napi::Number::New(env, VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_PROTECTED_ACCESS_FEATURES_EXT));
sTypes.Set("VkQueueFamilyVideoPropertiesKHR", Napi::Number::New(env, VK_STRUCTURE_TYPE_QUEUE_FAMILY_VIDEO_PROPERTIES_KHR));
sTypes.Set("VkQueueFamilyQueryResultStatusPropertiesKHR", Napi::Number::New(env, VK_STRUCTURE_TYPE_QUEUE_FAMILY_QUERY_RESULT_STATUS_PROPERTIES_KHR));
sTypes.Set("VkVideoProfileListInfoKHR", Napi::Number::New(env, VK_STRUCTURE_TYPE_VIDEO_PROFILE_LIST_INFO_KHR));
sTypes.Set("VkPhysicalDeviceVideoFormatInfoKHR", Napi::Number::New(env, VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VIDEO_FORMAT_INFO_KHR));
sTypes.Set("VkVideoFormatPropertiesKHR", Napi::Number::New(env, VK_STRUCTURE_TYPE_VIDEO_FORMAT_PROPERTIES_KHR));
sTypes.Set("VkVideoProfileInfoKHR", Napi::Number::New(env, VK_STRUCTURE_TYPE_VIDEO_PROFILE_INFO_KHR));
sTypes.Set("VkVideoCapabilitiesKHR", Napi::Number::New(env, VK_STRUCTURE_TYPE_VIDEO_CAPABILITIES_KHR));
sTypes.Set("VkVideoSessionMemoryRequirementsKHR", Napi::Number::New(env, VK_STRUCTURE_TYPE_VIDEO_SESSION_MEMORY_REQUIREMENTS_KHR));
sTypes.Set("VkBindVideoSessionMemoryInfoKHR", Napi::Number::New(env, VK_STRUCTURE_TYPE_BIND_VIDEO_SESSION_MEMORY_INFO_KHR));
sTypes.Set("VkVideoPictureResourceInfoKHR", Napi::Number::New(env, VK_STRUCTURE_TYPE_VIDEO_PICTURE_RESOURCE_INFO_KHR));
sTypes.Set("VkVideoReferenceSlotInfoKHR", Napi::Number::New(env, VK_STRUCTURE_TYPE_VIDEO_REFERENCE_SLOT_INFO_KHR));
sTypes.Set("VkVideoSessionCreateInfoKHR", Napi::Number::New(env, VK_STRUCTURE_TYPE_VIDEO_SESSION_CREATE_INFO_KHR));
sTypes.Set("VkVideoSessionParametersCreateInfoKHR", Napi::Number::New(env, VK_STRUCTURE_TYPE_VIDEO_SESSION_PARAMETERS_CREATE_INFO_KHR));
sTypes.Set("VkVideoSessionParametersUpdateInfoKHR", Napi::Number::New(env, VK_STRUCTURE_TYPE_VIDEO_SESSION_PARAMETERS_UPDATE_INFO_KHR));
sTypes.Set("VkVideoBeginCodingInfoKHR", Napi::Number::New(env, VK_STRUCTURE_TYPE_VIDEO_BEGIN_CODING_INFO_KHR));
sTypes.Set("VkVideoEndCodingInfoKHR", Napi::Number::New(env, VK_STRUCTURE_TYPE_VIDEO_END_CODING_INFO_KHR));
sTypes.Set("VkVideoCodingControlInfoKHR", Napi::Number::New(env, VK_STRUCTURE_TYPE_VIDEO_CODING_CONTROL_INFO_KHR));
sTypes.Set("VkPhysicalDeviceYcbcr2Plane444FormatsFeaturesEXT", Napi::Number::New(env, VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_YCBCR_2_PLANE_444_FORMATS_FEATURES_EXT));
sTypes.Set("VkPhysicalDeviceProvokingVertexFeaturesEXT", Napi::Number::New(env, VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROVOKING_VERTEX_FEATURES_EXT));
sTypes.Set("VkPhysicalDeviceProvokingVertexPropertiesEXT", Napi::Number::New(env, VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROVOKING_VERTEX_PROPERTIES_EXT));
sTypes.Set("VkPipelineRasterizationProvokingVertexStateCreateInfoEXT", Napi::Number::New(env, VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_PROVOKING_VERTEX_STATE_CREATE_INFO_EXT));
sTypes.Set("VkPhysicalDeviceShaderIntegerDotProductFeatures", Napi::Number::New(env, VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_INTEGER_DOT_PRODUCT_FEATURES));
sTypes.Set("VkPhysicalDeviceShaderIntegerDotProductProperties", Napi::Number::New(env, VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_INTEGER_DOT_PRODUCT_PROPERTIES));
sTypes.Set("VkPhysicalDeviceDrmPropertiesEXT", Napi::Number::New(env, VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DRM_PROPERTIES_EXT));
sTypes.Set("VkPhysicalDeviceFragmentShaderBarycentricFeaturesKHR", Napi::Number::New(env, VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADER_BARYCENTRIC_FEATURES_KHR));
sTypes.Set("VkPhysicalDeviceFragmentShaderBarycentricPropertiesKHR", Napi::Number::New(env, VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADER_BARYCENTRIC_PROPERTIES_KHR));
sTypes.Set("VkPhysicalDeviceRGBA10X6FormatsFeaturesEXT", Napi::Number::New(env, VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RGBA10X6_FORMATS_FEATURES_EXT));
sTypes.Set("VkFormatProperties3", Napi::Number::New(env, VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_3));
sTypes.Set("VkDrmFormatModifierPropertiesList2EXT", Napi::Number::New(env, VK_STRUCTURE_TYPE_DRM_FORMAT_MODIFIER_PROPERTIES_LIST_2_EXT));
sTypes.Set("VkPipelineRenderingCreateInfo", Napi::Number::New(env, VK_STRUCTURE_TYPE_PIPELINE_RENDERING_CREATE_INFO));
sTypes.Set("VkRenderingInfo", Napi::Number::New(env, VK_STRUCTURE_TYPE_RENDERING_INFO));
sTypes.Set("VkRenderingAttachmentInfo", Napi::Number::New(env, VK_STRUCTURE_TYPE_RENDERING_ATTACHMENT_INFO));
sTypes.Set("VkRenderingFragmentShadingRateAttachmentInfoKHR", Napi::Number::New(env, VK_STRUCTURE_TYPE_RENDERING_FRAGMENT_SHADING_RATE_ATTACHMENT_INFO_KHR));
sTypes.Set("VkRenderingFragmentDensityMapAttachmentInfoEXT", Napi::Number::New(env, VK_STRUCTURE_TYPE_RENDERING_FRAGMENT_DENSITY_MAP_ATTACHMENT_INFO_EXT));
sTypes.Set("VkPhysicalDeviceDynamicRenderingFeatures", Napi::Number::New(env, VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DYNAMIC_RENDERING_FEATURES));
sTypes.Set("VkCommandBufferInheritanceRenderingInfo", Napi::Number::New(env, VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_RENDERING_INFO));
sTypes.Set("VkAttachmentSampleCountInfoAMD", Napi::Number::New(env, VK_STRUCTURE_TYPE_ATTACHMENT_SAMPLE_COUNT_INFO_AMD));
sTypes.Set("VkMultiviewPerViewAttributesInfoNVX", Napi::Number::New(env, VK_STRUCTURE_TYPE_MULTIVIEW_PER_VIEW_ATTRIBUTES_INFO_NVX));
sTypes.Set("VkPhysicalDeviceImageViewMinLodFeaturesEXT", Napi::Number::New(env, VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_VIEW_MIN_LOD_FEATURES_EXT));
sTypes.Set("VkImageViewMinLodCreateInfoEXT", Napi::Number::New(env, VK_STRUCTURE_TYPE_IMAGE_VIEW_MIN_LOD_CREATE_INFO_EXT));
sTypes.Set("VkPhysicalDeviceRasterizationOrderAttachmentAccessFeaturesEXT", Napi::Number::New(env, VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RASTERIZATION_ORDER_ATTACHMENT_ACCESS_FEATURES_EXT));
sTypes.Set("VkPhysicalDeviceGraphicsPipelineLibraryFeaturesEXT", Napi::Number::New(env, VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GRAPHICS_PIPELINE_LIBRARY_FEATURES_EXT));
sTypes.Set("VkPhysicalDeviceGraphicsPipelineLibraryPropertiesEXT", Napi::Number::New(env, VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GRAPHICS_PIPELINE_LIBRARY_PROPERTIES_EXT));
sTypes.Set("VkGraphicsPipelineLibraryCreateInfoEXT", Napi::Number::New(env, VK_STRUCTURE_TYPE_GRAPHICS_PIPELINE_LIBRARY_CREATE_INFO_EXT));
sTypes.Set("VkPhysicalDeviceShaderModuleIdentifierFeaturesEXT", Napi::Number::New(env, VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_MODULE_IDENTIFIER_FEATURES_EXT));
sTypes.Set("VkPhysicalDeviceShaderModuleIdentifierPropertiesEXT", Napi::Number::New(env, VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_MODULE_IDENTIFIER_PROPERTIES_EXT));
sTypes.Set("VkPipelineShaderStageModuleIdentifierCreateInfoEXT", Napi::Number::New(env, VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_MODULE_IDENTIFIER_CREATE_INFO_EXT));
sTypes.Set("VkShaderModuleIdentifierEXT", Napi::Number::New(env, VK_STRUCTURE_TYPE_SHADER_MODULE_IDENTIFIER_EXT));
sTypes.Set("VkImageCompressionControlEXT", Napi::Number::New(env, VK_STRUCTURE_TYPE_IMAGE_COMPRESSION_CONTROL_EXT));
sTypes.Set("VkPhysicalDeviceImageCompressionControlFeaturesEXT", Napi::Number::New(env, VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_COMPRESSION_CONTROL_FEATURES_EXT));
sTypes.Set("VkImageCompressionPropertiesEXT", Napi::Number::New(env, VK_STRUCTURE_TYPE_IMAGE_COMPRESSION_PROPERTIES_EXT));
sTypes.Set("VkPhysicalDeviceImageCompressionControlSwapchainFeaturesEXT", Napi::Number::New(env, VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_COMPRESSION_CONTROL_SWAPCHAIN_FEATURES_EXT));
sTypes.Set("VkRenderPassCreationControlEXT", Napi::Number::New(env, VK_STRUCTURE_TYPE_RENDER_PASS_CREATION_CONTROL_EXT));
sTypes.Set("VkRenderPassCreationFeedbackCreateInfoEXT", Napi::Number::New(env, VK_STRUCTURE_TYPE_RENDER_PASS_CREATION_FEEDBACK_CREATE_INFO_EXT));
sTypes.Set("VkRenderPassSubpassFeedbackCreateInfoEXT", Napi::Number::New(env, VK_STRUCTURE_TYPE_RENDER_PASS_SUBPASS_FEEDBACK_CREATE_INFO_EXT));
sTypes.Set("VkPhysicalDeviceSubpassMergeFeedbackFeaturesEXT", Napi::Number::New(env, VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBPASS_MERGE_FEEDBACK_FEATURES_EXT));
sTypes.Set("VkPipelinePropertiesIdentifierEXT", Napi::Number::New(env, VK_STRUCTURE_TYPE_PIPELINE_PROPERTIES_IDENTIFIER_EXT));
sTypes.Set("VkPhysicalDevicePipelinePropertiesFeaturesEXT", Napi::Number::New(env, VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_PROPERTIES_FEATURES_EXT));
sTypes.Set("VkPhysicalDeviceNonSeamlessCubeMapFeaturesEXT", Napi::Number::New(env, VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_NON_SEAMLESS_CUBE_MAP_FEATURES_EXT));
sTypes.Set("VkPhysicalDevicePipelineRobustnessFeaturesEXT", Napi::Number::New(env, VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_ROBUSTNESS_FEATURES_EXT));
sTypes.Set("VkPipelineRobustnessCreateInfoEXT", Napi::Number::New(env, VK_STRUCTURE_TYPE_PIPELINE_ROBUSTNESS_CREATE_INFO_EXT));
sTypes.Set("VkPhysicalDevicePipelineRobustnessPropertiesEXT", Napi::Number::New(env, VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_ROBUSTNESS_PROPERTIES_EXT));
sTypes.Set("VkSurfacePresentModeEXT", Napi::Number::New(env, VK_STRUCTURE_TYPE_SURFACE_PRESENT_MODE_EXT));
sTypes.Set("VkSurfacePresentScalingCapabilitiesEXT", Napi::Number::New(env, VK_STRUCTURE_TYPE_SURFACE_PRESENT_SCALING_CAPABILITIES_EXT));
sTypes.Set("VkSurfacePresentModeCompatibilityEXT", Napi::Number::New(env, VK_STRUCTURE_TYPE_SURFACE_PRESENT_MODE_COMPATIBILITY_EXT));
sTypes.Set("VkPhysicalDeviceSwapchainMaintenance1FeaturesEXT", Napi::Number::New(env, VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SWAPCHAIN_MAINTENANCE_1_FEATURES_EXT));
sTypes.Set("VkSwapchainPresentFenceInfoEXT", Napi::Number::New(env, VK_STRUCTURE_TYPE_SWAPCHAIN_PRESENT_FENCE_INFO_EXT));
sTypes.Set("VkSwapchainPresentModesCreateInfoEXT", Napi::Number::New(env, VK_STRUCTURE_TYPE_SWAPCHAIN_PRESENT_MODES_CREATE_INFO_EXT));
sTypes.Set("VkSwapchainPresentModeInfoEXT", Napi::Number::New(env, VK_STRUCTURE_TYPE_SWAPCHAIN_PRESENT_MODE_INFO_EXT));
sTypes.Set("VkSwapchainPresentScalingCreateInfoEXT", Napi::Number::New(env, VK_STRUCTURE_TYPE_SWAPCHAIN_PRESENT_SCALING_CREATE_INFO_EXT));
sTypes.Set("VkReleaseSwapchainImagesInfoEXT", Napi::Number::New(env, VK_STRUCTURE_TYPE_RELEASE_SWAPCHAIN_IMAGES_INFO_EXT));

    exports["sTypes"] = sTypes;

    return exports;
}
