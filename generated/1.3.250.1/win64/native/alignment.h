
#define FIELD_SIZEOF(t, f) (sizeof(((t*)0)->f))
#include <vector>
using namespace std;

vector<size_t> alignmentData = vector<size_t>();
void prepareAlignmentData(){
alignmentData.push_back(offsetof(VkBaseOutStructure, sType));
alignmentData.push_back(FIELD_SIZEOF(VkBaseOutStructure, sType));
alignmentData.push_back(offsetof(VkBaseOutStructure, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkBaseOutStructure, pNext));
alignmentData.push_back(offsetof(VkBaseInStructure, sType));
alignmentData.push_back(FIELD_SIZEOF(VkBaseInStructure, sType));
alignmentData.push_back(offsetof(VkBaseInStructure, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkBaseInStructure, pNext));
alignmentData.push_back(offsetof(VkOffset2D, x));
alignmentData.push_back(FIELD_SIZEOF(VkOffset2D, x));
alignmentData.push_back(offsetof(VkOffset2D, y));
alignmentData.push_back(FIELD_SIZEOF(VkOffset2D, y));
alignmentData.push_back(offsetof(VkOffset3D, x));
alignmentData.push_back(FIELD_SIZEOF(VkOffset3D, x));
alignmentData.push_back(offsetof(VkOffset3D, y));
alignmentData.push_back(FIELD_SIZEOF(VkOffset3D, y));
alignmentData.push_back(offsetof(VkOffset3D, z));
alignmentData.push_back(FIELD_SIZEOF(VkOffset3D, z));
alignmentData.push_back(offsetof(VkExtent2D, width));
alignmentData.push_back(FIELD_SIZEOF(VkExtent2D, width));
alignmentData.push_back(offsetof(VkExtent2D, height));
alignmentData.push_back(FIELD_SIZEOF(VkExtent2D, height));
alignmentData.push_back(offsetof(VkExtent3D, width));
alignmentData.push_back(FIELD_SIZEOF(VkExtent3D, width));
alignmentData.push_back(offsetof(VkExtent3D, height));
alignmentData.push_back(FIELD_SIZEOF(VkExtent3D, height));
alignmentData.push_back(offsetof(VkExtent3D, depth));
alignmentData.push_back(FIELD_SIZEOF(VkExtent3D, depth));
alignmentData.push_back(offsetof(VkViewport, x));
alignmentData.push_back(FIELD_SIZEOF(VkViewport, x));
alignmentData.push_back(offsetof(VkViewport, y));
alignmentData.push_back(FIELD_SIZEOF(VkViewport, y));
alignmentData.push_back(offsetof(VkViewport, width));
alignmentData.push_back(FIELD_SIZEOF(VkViewport, width));
alignmentData.push_back(offsetof(VkViewport, height));
alignmentData.push_back(FIELD_SIZEOF(VkViewport, height));
alignmentData.push_back(offsetof(VkViewport, minDepth));
alignmentData.push_back(FIELD_SIZEOF(VkViewport, minDepth));
alignmentData.push_back(offsetof(VkViewport, maxDepth));
alignmentData.push_back(FIELD_SIZEOF(VkViewport, maxDepth));
alignmentData.push_back(offsetof(VkRect2D, offset));
alignmentData.push_back(FIELD_SIZEOF(VkRect2D, offset));
alignmentData.push_back(offsetof(VkRect2D, extent));
alignmentData.push_back(FIELD_SIZEOF(VkRect2D, extent));
alignmentData.push_back(offsetof(VkClearRect, rect));
alignmentData.push_back(FIELD_SIZEOF(VkClearRect, rect));
alignmentData.push_back(offsetof(VkClearRect, baseArrayLayer));
alignmentData.push_back(FIELD_SIZEOF(VkClearRect, baseArrayLayer));
alignmentData.push_back(offsetof(VkClearRect, layerCount));
alignmentData.push_back(FIELD_SIZEOF(VkClearRect, layerCount));
alignmentData.push_back(offsetof(VkComponentMapping, r));
alignmentData.push_back(FIELD_SIZEOF(VkComponentMapping, r));
alignmentData.push_back(offsetof(VkComponentMapping, g));
alignmentData.push_back(FIELD_SIZEOF(VkComponentMapping, g));
alignmentData.push_back(offsetof(VkComponentMapping, b));
alignmentData.push_back(FIELD_SIZEOF(VkComponentMapping, b));
alignmentData.push_back(offsetof(VkComponentMapping, a));
alignmentData.push_back(FIELD_SIZEOF(VkComponentMapping, a));
alignmentData.push_back(offsetof(VkPhysicalDeviceProperties, apiVersion));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceProperties, apiVersion));
alignmentData.push_back(offsetof(VkPhysicalDeviceProperties, driverVersion));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceProperties, driverVersion));
alignmentData.push_back(offsetof(VkPhysicalDeviceProperties, vendorID));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceProperties, vendorID));
alignmentData.push_back(offsetof(VkPhysicalDeviceProperties, deviceID));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceProperties, deviceID));
alignmentData.push_back(offsetof(VkPhysicalDeviceProperties, deviceType));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceProperties, deviceType));
alignmentData.push_back(offsetof(VkPhysicalDeviceProperties, deviceName));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceProperties, deviceName));
alignmentData.push_back(offsetof(VkPhysicalDeviceProperties, pipelineCacheUUID));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceProperties, pipelineCacheUUID));
alignmentData.push_back(offsetof(VkPhysicalDeviceProperties, limits));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceProperties, limits));
alignmentData.push_back(offsetof(VkPhysicalDeviceProperties, sparseProperties));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceProperties, sparseProperties));
alignmentData.push_back(offsetof(VkExtensionProperties, extensionName));
alignmentData.push_back(FIELD_SIZEOF(VkExtensionProperties, extensionName));
alignmentData.push_back(offsetof(VkExtensionProperties, specVersion));
alignmentData.push_back(FIELD_SIZEOF(VkExtensionProperties, specVersion));
alignmentData.push_back(offsetof(VkLayerProperties, layerName));
alignmentData.push_back(FIELD_SIZEOF(VkLayerProperties, layerName));
alignmentData.push_back(offsetof(VkLayerProperties, specVersion));
alignmentData.push_back(FIELD_SIZEOF(VkLayerProperties, specVersion));
alignmentData.push_back(offsetof(VkLayerProperties, implementationVersion));
alignmentData.push_back(FIELD_SIZEOF(VkLayerProperties, implementationVersion));
alignmentData.push_back(offsetof(VkLayerProperties, description));
alignmentData.push_back(FIELD_SIZEOF(VkLayerProperties, description));
alignmentData.push_back(offsetof(VkApplicationInfo, sType));
alignmentData.push_back(FIELD_SIZEOF(VkApplicationInfo, sType));
alignmentData.push_back(offsetof(VkApplicationInfo, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkApplicationInfo, pNext));
alignmentData.push_back(offsetof(VkApplicationInfo, pApplicationName));
alignmentData.push_back(FIELD_SIZEOF(VkApplicationInfo, pApplicationName));
alignmentData.push_back(offsetof(VkApplicationInfo, applicationVersion));
alignmentData.push_back(FIELD_SIZEOF(VkApplicationInfo, applicationVersion));
alignmentData.push_back(offsetof(VkApplicationInfo, pEngineName));
alignmentData.push_back(FIELD_SIZEOF(VkApplicationInfo, pEngineName));
alignmentData.push_back(offsetof(VkApplicationInfo, engineVersion));
alignmentData.push_back(FIELD_SIZEOF(VkApplicationInfo, engineVersion));
alignmentData.push_back(offsetof(VkApplicationInfo, apiVersion));
alignmentData.push_back(FIELD_SIZEOF(VkApplicationInfo, apiVersion));
alignmentData.push_back(offsetof(VkAllocationCallbacks, pUserData));
alignmentData.push_back(FIELD_SIZEOF(VkAllocationCallbacks, pUserData));
alignmentData.push_back(offsetof(VkAllocationCallbacks, pfnAllocation));
alignmentData.push_back(FIELD_SIZEOF(VkAllocationCallbacks, pfnAllocation));
alignmentData.push_back(offsetof(VkAllocationCallbacks, pfnReallocation));
alignmentData.push_back(FIELD_SIZEOF(VkAllocationCallbacks, pfnReallocation));
alignmentData.push_back(offsetof(VkAllocationCallbacks, pfnFree));
alignmentData.push_back(FIELD_SIZEOF(VkAllocationCallbacks, pfnFree));
alignmentData.push_back(offsetof(VkAllocationCallbacks, pfnInternalAllocation));
alignmentData.push_back(FIELD_SIZEOF(VkAllocationCallbacks, pfnInternalAllocation));
alignmentData.push_back(offsetof(VkAllocationCallbacks, pfnInternalFree));
alignmentData.push_back(FIELD_SIZEOF(VkAllocationCallbacks, pfnInternalFree));
alignmentData.push_back(offsetof(VkDeviceQueueCreateInfo, sType));
alignmentData.push_back(FIELD_SIZEOF(VkDeviceQueueCreateInfo, sType));
alignmentData.push_back(offsetof(VkDeviceQueueCreateInfo, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkDeviceQueueCreateInfo, pNext));
alignmentData.push_back(offsetof(VkDeviceQueueCreateInfo, flags));
alignmentData.push_back(FIELD_SIZEOF(VkDeviceQueueCreateInfo, flags));
alignmentData.push_back(offsetof(VkDeviceQueueCreateInfo, queueFamilyIndex));
alignmentData.push_back(FIELD_SIZEOF(VkDeviceQueueCreateInfo, queueFamilyIndex));
alignmentData.push_back(offsetof(VkDeviceQueueCreateInfo, queueCount));
alignmentData.push_back(FIELD_SIZEOF(VkDeviceQueueCreateInfo, queueCount));
alignmentData.push_back(offsetof(VkDeviceQueueCreateInfo, pQueuePriorities));
alignmentData.push_back(FIELD_SIZEOF(VkDeviceQueueCreateInfo, pQueuePriorities));
alignmentData.push_back(offsetof(VkDeviceCreateInfo, sType));
alignmentData.push_back(FIELD_SIZEOF(VkDeviceCreateInfo, sType));
alignmentData.push_back(offsetof(VkDeviceCreateInfo, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkDeviceCreateInfo, pNext));
alignmentData.push_back(offsetof(VkDeviceCreateInfo, flags));
alignmentData.push_back(FIELD_SIZEOF(VkDeviceCreateInfo, flags));
alignmentData.push_back(offsetof(VkDeviceCreateInfo, queueCreateInfoCount));
alignmentData.push_back(FIELD_SIZEOF(VkDeviceCreateInfo, queueCreateInfoCount));
alignmentData.push_back(offsetof(VkDeviceCreateInfo, pQueueCreateInfos));
alignmentData.push_back(FIELD_SIZEOF(VkDeviceCreateInfo, pQueueCreateInfos));
alignmentData.push_back(offsetof(VkDeviceCreateInfo, enabledExtensionCount));
alignmentData.push_back(FIELD_SIZEOF(VkDeviceCreateInfo, enabledExtensionCount));
alignmentData.push_back(offsetof(VkDeviceCreateInfo, ppEnabledExtensionNames));
alignmentData.push_back(FIELD_SIZEOF(VkDeviceCreateInfo, ppEnabledExtensionNames));
alignmentData.push_back(offsetof(VkDeviceCreateInfo, pEnabledFeatures));
alignmentData.push_back(FIELD_SIZEOF(VkDeviceCreateInfo, pEnabledFeatures));
alignmentData.push_back(offsetof(VkInstanceCreateInfo, sType));
alignmentData.push_back(FIELD_SIZEOF(VkInstanceCreateInfo, sType));
alignmentData.push_back(offsetof(VkInstanceCreateInfo, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkInstanceCreateInfo, pNext));
alignmentData.push_back(offsetof(VkInstanceCreateInfo, flags));
alignmentData.push_back(FIELD_SIZEOF(VkInstanceCreateInfo, flags));
alignmentData.push_back(offsetof(VkInstanceCreateInfo, pApplicationInfo));
alignmentData.push_back(FIELD_SIZEOF(VkInstanceCreateInfo, pApplicationInfo));
alignmentData.push_back(offsetof(VkInstanceCreateInfo, enabledLayerCount));
alignmentData.push_back(FIELD_SIZEOF(VkInstanceCreateInfo, enabledLayerCount));
alignmentData.push_back(offsetof(VkInstanceCreateInfo, ppEnabledLayerNames));
alignmentData.push_back(FIELD_SIZEOF(VkInstanceCreateInfo, ppEnabledLayerNames));
alignmentData.push_back(offsetof(VkInstanceCreateInfo, enabledExtensionCount));
alignmentData.push_back(FIELD_SIZEOF(VkInstanceCreateInfo, enabledExtensionCount));
alignmentData.push_back(offsetof(VkInstanceCreateInfo, ppEnabledExtensionNames));
alignmentData.push_back(FIELD_SIZEOF(VkInstanceCreateInfo, ppEnabledExtensionNames));
alignmentData.push_back(offsetof(VkQueueFamilyProperties, queueFlags));
alignmentData.push_back(FIELD_SIZEOF(VkQueueFamilyProperties, queueFlags));
alignmentData.push_back(offsetof(VkQueueFamilyProperties, queueCount));
alignmentData.push_back(FIELD_SIZEOF(VkQueueFamilyProperties, queueCount));
alignmentData.push_back(offsetof(VkQueueFamilyProperties, timestampValidBits));
alignmentData.push_back(FIELD_SIZEOF(VkQueueFamilyProperties, timestampValidBits));
alignmentData.push_back(offsetof(VkQueueFamilyProperties, minImageTransferGranularity));
alignmentData.push_back(FIELD_SIZEOF(VkQueueFamilyProperties, minImageTransferGranularity));
alignmentData.push_back(offsetof(VkPhysicalDeviceMemoryProperties, memoryTypeCount));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceMemoryProperties, memoryTypeCount));
alignmentData.push_back(offsetof(VkPhysicalDeviceMemoryProperties, memoryTypes));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceMemoryProperties, memoryTypes));
alignmentData.push_back(offsetof(VkPhysicalDeviceMemoryProperties, memoryHeapCount));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceMemoryProperties, memoryHeapCount));
alignmentData.push_back(offsetof(VkPhysicalDeviceMemoryProperties, memoryHeaps));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceMemoryProperties, memoryHeaps));
alignmentData.push_back(offsetof(VkMemoryAllocateInfo, sType));
alignmentData.push_back(FIELD_SIZEOF(VkMemoryAllocateInfo, sType));
alignmentData.push_back(offsetof(VkMemoryAllocateInfo, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkMemoryAllocateInfo, pNext));
alignmentData.push_back(offsetof(VkMemoryAllocateInfo, allocationSize));
alignmentData.push_back(FIELD_SIZEOF(VkMemoryAllocateInfo, allocationSize));
alignmentData.push_back(offsetof(VkMemoryAllocateInfo, memoryTypeIndex));
alignmentData.push_back(FIELD_SIZEOF(VkMemoryAllocateInfo, memoryTypeIndex));
alignmentData.push_back(offsetof(VkMemoryRequirements, size));
alignmentData.push_back(FIELD_SIZEOF(VkMemoryRequirements, size));
alignmentData.push_back(offsetof(VkMemoryRequirements, alignment));
alignmentData.push_back(FIELD_SIZEOF(VkMemoryRequirements, alignment));
alignmentData.push_back(offsetof(VkMemoryRequirements, memoryTypeBits));
alignmentData.push_back(FIELD_SIZEOF(VkMemoryRequirements, memoryTypeBits));
alignmentData.push_back(offsetof(VkSparseImageFormatProperties, aspectMask));
alignmentData.push_back(FIELD_SIZEOF(VkSparseImageFormatProperties, aspectMask));
alignmentData.push_back(offsetof(VkSparseImageFormatProperties, imageGranularity));
alignmentData.push_back(FIELD_SIZEOF(VkSparseImageFormatProperties, imageGranularity));
alignmentData.push_back(offsetof(VkSparseImageFormatProperties, flags));
alignmentData.push_back(FIELD_SIZEOF(VkSparseImageFormatProperties, flags));
alignmentData.push_back(offsetof(VkSparseImageMemoryRequirements, formatProperties));
alignmentData.push_back(FIELD_SIZEOF(VkSparseImageMemoryRequirements, formatProperties));
alignmentData.push_back(offsetof(VkSparseImageMemoryRequirements, imageMipTailFirstLod));
alignmentData.push_back(FIELD_SIZEOF(VkSparseImageMemoryRequirements, imageMipTailFirstLod));
alignmentData.push_back(offsetof(VkSparseImageMemoryRequirements, imageMipTailSize));
alignmentData.push_back(FIELD_SIZEOF(VkSparseImageMemoryRequirements, imageMipTailSize));
alignmentData.push_back(offsetof(VkSparseImageMemoryRequirements, imageMipTailOffset));
alignmentData.push_back(FIELD_SIZEOF(VkSparseImageMemoryRequirements, imageMipTailOffset));
alignmentData.push_back(offsetof(VkSparseImageMemoryRequirements, imageMipTailStride));
alignmentData.push_back(FIELD_SIZEOF(VkSparseImageMemoryRequirements, imageMipTailStride));
alignmentData.push_back(offsetof(VkMemoryType, propertyFlags));
alignmentData.push_back(FIELD_SIZEOF(VkMemoryType, propertyFlags));
alignmentData.push_back(offsetof(VkMemoryType, heapIndex));
alignmentData.push_back(FIELD_SIZEOF(VkMemoryType, heapIndex));
alignmentData.push_back(offsetof(VkMemoryHeap, size));
alignmentData.push_back(FIELD_SIZEOF(VkMemoryHeap, size));
alignmentData.push_back(offsetof(VkMemoryHeap, flags));
alignmentData.push_back(FIELD_SIZEOF(VkMemoryHeap, flags));
alignmentData.push_back(offsetof(VkMappedMemoryRange, sType));
alignmentData.push_back(FIELD_SIZEOF(VkMappedMemoryRange, sType));
alignmentData.push_back(offsetof(VkMappedMemoryRange, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkMappedMemoryRange, pNext));
alignmentData.push_back(offsetof(VkMappedMemoryRange, memory));
alignmentData.push_back(FIELD_SIZEOF(VkMappedMemoryRange, memory));
alignmentData.push_back(offsetof(VkMappedMemoryRange, offset));
alignmentData.push_back(FIELD_SIZEOF(VkMappedMemoryRange, offset));
alignmentData.push_back(offsetof(VkMappedMemoryRange, size));
alignmentData.push_back(FIELD_SIZEOF(VkMappedMemoryRange, size));
alignmentData.push_back(offsetof(VkFormatProperties, linearTilingFeatures));
alignmentData.push_back(FIELD_SIZEOF(VkFormatProperties, linearTilingFeatures));
alignmentData.push_back(offsetof(VkFormatProperties, optimalTilingFeatures));
alignmentData.push_back(FIELD_SIZEOF(VkFormatProperties, optimalTilingFeatures));
alignmentData.push_back(offsetof(VkFormatProperties, bufferFeatures));
alignmentData.push_back(FIELD_SIZEOF(VkFormatProperties, bufferFeatures));
alignmentData.push_back(offsetof(VkImageFormatProperties, maxExtent));
alignmentData.push_back(FIELD_SIZEOF(VkImageFormatProperties, maxExtent));
alignmentData.push_back(offsetof(VkImageFormatProperties, maxMipLevels));
alignmentData.push_back(FIELD_SIZEOF(VkImageFormatProperties, maxMipLevels));
alignmentData.push_back(offsetof(VkImageFormatProperties, maxArrayLayers));
alignmentData.push_back(FIELD_SIZEOF(VkImageFormatProperties, maxArrayLayers));
alignmentData.push_back(offsetof(VkImageFormatProperties, sampleCounts));
alignmentData.push_back(FIELD_SIZEOF(VkImageFormatProperties, sampleCounts));
alignmentData.push_back(offsetof(VkImageFormatProperties, maxResourceSize));
alignmentData.push_back(FIELD_SIZEOF(VkImageFormatProperties, maxResourceSize));
alignmentData.push_back(offsetof(VkDescriptorBufferInfo, buffer));
alignmentData.push_back(FIELD_SIZEOF(VkDescriptorBufferInfo, buffer));
alignmentData.push_back(offsetof(VkDescriptorBufferInfo, offset));
alignmentData.push_back(FIELD_SIZEOF(VkDescriptorBufferInfo, offset));
alignmentData.push_back(offsetof(VkDescriptorBufferInfo, range));
alignmentData.push_back(FIELD_SIZEOF(VkDescriptorBufferInfo, range));
alignmentData.push_back(offsetof(VkDescriptorImageInfo, sampler));
alignmentData.push_back(FIELD_SIZEOF(VkDescriptorImageInfo, sampler));
alignmentData.push_back(offsetof(VkDescriptorImageInfo, imageView));
alignmentData.push_back(FIELD_SIZEOF(VkDescriptorImageInfo, imageView));
alignmentData.push_back(offsetof(VkDescriptorImageInfo, imageLayout));
alignmentData.push_back(FIELD_SIZEOF(VkDescriptorImageInfo, imageLayout));
alignmentData.push_back(offsetof(VkWriteDescriptorSet, sType));
alignmentData.push_back(FIELD_SIZEOF(VkWriteDescriptorSet, sType));
alignmentData.push_back(offsetof(VkWriteDescriptorSet, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkWriteDescriptorSet, pNext));
alignmentData.push_back(offsetof(VkWriteDescriptorSet, dstSet));
alignmentData.push_back(FIELD_SIZEOF(VkWriteDescriptorSet, dstSet));
alignmentData.push_back(offsetof(VkWriteDescriptorSet, dstBinding));
alignmentData.push_back(FIELD_SIZEOF(VkWriteDescriptorSet, dstBinding));
alignmentData.push_back(offsetof(VkWriteDescriptorSet, dstArrayElement));
alignmentData.push_back(FIELD_SIZEOF(VkWriteDescriptorSet, dstArrayElement));
alignmentData.push_back(offsetof(VkWriteDescriptorSet, descriptorCount));
alignmentData.push_back(FIELD_SIZEOF(VkWriteDescriptorSet, descriptorCount));
alignmentData.push_back(offsetof(VkWriteDescriptorSet, descriptorType));
alignmentData.push_back(FIELD_SIZEOF(VkWriteDescriptorSet, descriptorType));
alignmentData.push_back(offsetof(VkWriteDescriptorSet, pImageInfo));
alignmentData.push_back(FIELD_SIZEOF(VkWriteDescriptorSet, pImageInfo));
alignmentData.push_back(offsetof(VkWriteDescriptorSet, pBufferInfo));
alignmentData.push_back(FIELD_SIZEOF(VkWriteDescriptorSet, pBufferInfo));
alignmentData.push_back(offsetof(VkWriteDescriptorSet, pTexelBufferView));
alignmentData.push_back(FIELD_SIZEOF(VkWriteDescriptorSet, pTexelBufferView));
alignmentData.push_back(offsetof(VkCopyDescriptorSet, sType));
alignmentData.push_back(FIELD_SIZEOF(VkCopyDescriptorSet, sType));
alignmentData.push_back(offsetof(VkCopyDescriptorSet, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkCopyDescriptorSet, pNext));
alignmentData.push_back(offsetof(VkCopyDescriptorSet, srcSet));
alignmentData.push_back(FIELD_SIZEOF(VkCopyDescriptorSet, srcSet));
alignmentData.push_back(offsetof(VkCopyDescriptorSet, srcBinding));
alignmentData.push_back(FIELD_SIZEOF(VkCopyDescriptorSet, srcBinding));
alignmentData.push_back(offsetof(VkCopyDescriptorSet, srcArrayElement));
alignmentData.push_back(FIELD_SIZEOF(VkCopyDescriptorSet, srcArrayElement));
alignmentData.push_back(offsetof(VkCopyDescriptorSet, dstSet));
alignmentData.push_back(FIELD_SIZEOF(VkCopyDescriptorSet, dstSet));
alignmentData.push_back(offsetof(VkCopyDescriptorSet, dstBinding));
alignmentData.push_back(FIELD_SIZEOF(VkCopyDescriptorSet, dstBinding));
alignmentData.push_back(offsetof(VkCopyDescriptorSet, dstArrayElement));
alignmentData.push_back(FIELD_SIZEOF(VkCopyDescriptorSet, dstArrayElement));
alignmentData.push_back(offsetof(VkCopyDescriptorSet, descriptorCount));
alignmentData.push_back(FIELD_SIZEOF(VkCopyDescriptorSet, descriptorCount));
alignmentData.push_back(offsetof(VkBufferCreateInfo, sType));
alignmentData.push_back(FIELD_SIZEOF(VkBufferCreateInfo, sType));
alignmentData.push_back(offsetof(VkBufferCreateInfo, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkBufferCreateInfo, pNext));
alignmentData.push_back(offsetof(VkBufferCreateInfo, flags));
alignmentData.push_back(FIELD_SIZEOF(VkBufferCreateInfo, flags));
alignmentData.push_back(offsetof(VkBufferCreateInfo, size));
alignmentData.push_back(FIELD_SIZEOF(VkBufferCreateInfo, size));
alignmentData.push_back(offsetof(VkBufferCreateInfo, usage));
alignmentData.push_back(FIELD_SIZEOF(VkBufferCreateInfo, usage));
alignmentData.push_back(offsetof(VkBufferCreateInfo, sharingMode));
alignmentData.push_back(FIELD_SIZEOF(VkBufferCreateInfo, sharingMode));
alignmentData.push_back(offsetof(VkBufferCreateInfo, queueFamilyIndexCount));
alignmentData.push_back(FIELD_SIZEOF(VkBufferCreateInfo, queueFamilyIndexCount));
alignmentData.push_back(offsetof(VkBufferCreateInfo, pQueueFamilyIndices));
alignmentData.push_back(FIELD_SIZEOF(VkBufferCreateInfo, pQueueFamilyIndices));
alignmentData.push_back(offsetof(VkBufferViewCreateInfo, sType));
alignmentData.push_back(FIELD_SIZEOF(VkBufferViewCreateInfo, sType));
alignmentData.push_back(offsetof(VkBufferViewCreateInfo, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkBufferViewCreateInfo, pNext));
alignmentData.push_back(offsetof(VkBufferViewCreateInfo, flags));
alignmentData.push_back(FIELD_SIZEOF(VkBufferViewCreateInfo, flags));
alignmentData.push_back(offsetof(VkBufferViewCreateInfo, buffer));
alignmentData.push_back(FIELD_SIZEOF(VkBufferViewCreateInfo, buffer));
alignmentData.push_back(offsetof(VkBufferViewCreateInfo, format));
alignmentData.push_back(FIELD_SIZEOF(VkBufferViewCreateInfo, format));
alignmentData.push_back(offsetof(VkBufferViewCreateInfo, offset));
alignmentData.push_back(FIELD_SIZEOF(VkBufferViewCreateInfo, offset));
alignmentData.push_back(offsetof(VkBufferViewCreateInfo, range));
alignmentData.push_back(FIELD_SIZEOF(VkBufferViewCreateInfo, range));
alignmentData.push_back(offsetof(VkImageSubresource, aspectMask));
alignmentData.push_back(FIELD_SIZEOF(VkImageSubresource, aspectMask));
alignmentData.push_back(offsetof(VkImageSubresource, mipLevel));
alignmentData.push_back(FIELD_SIZEOF(VkImageSubresource, mipLevel));
alignmentData.push_back(offsetof(VkImageSubresource, arrayLayer));
alignmentData.push_back(FIELD_SIZEOF(VkImageSubresource, arrayLayer));
alignmentData.push_back(offsetof(VkImageSubresourceLayers, aspectMask));
alignmentData.push_back(FIELD_SIZEOF(VkImageSubresourceLayers, aspectMask));
alignmentData.push_back(offsetof(VkImageSubresourceLayers, mipLevel));
alignmentData.push_back(FIELD_SIZEOF(VkImageSubresourceLayers, mipLevel));
alignmentData.push_back(offsetof(VkImageSubresourceLayers, baseArrayLayer));
alignmentData.push_back(FIELD_SIZEOF(VkImageSubresourceLayers, baseArrayLayer));
alignmentData.push_back(offsetof(VkImageSubresourceLayers, layerCount));
alignmentData.push_back(FIELD_SIZEOF(VkImageSubresourceLayers, layerCount));
alignmentData.push_back(offsetof(VkImageSubresourceRange, aspectMask));
alignmentData.push_back(FIELD_SIZEOF(VkImageSubresourceRange, aspectMask));
alignmentData.push_back(offsetof(VkImageSubresourceRange, baseMipLevel));
alignmentData.push_back(FIELD_SIZEOF(VkImageSubresourceRange, baseMipLevel));
alignmentData.push_back(offsetof(VkImageSubresourceRange, levelCount));
alignmentData.push_back(FIELD_SIZEOF(VkImageSubresourceRange, levelCount));
alignmentData.push_back(offsetof(VkImageSubresourceRange, baseArrayLayer));
alignmentData.push_back(FIELD_SIZEOF(VkImageSubresourceRange, baseArrayLayer));
alignmentData.push_back(offsetof(VkImageSubresourceRange, layerCount));
alignmentData.push_back(FIELD_SIZEOF(VkImageSubresourceRange, layerCount));
alignmentData.push_back(offsetof(VkMemoryBarrier, sType));
alignmentData.push_back(FIELD_SIZEOF(VkMemoryBarrier, sType));
alignmentData.push_back(offsetof(VkMemoryBarrier, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkMemoryBarrier, pNext));
alignmentData.push_back(offsetof(VkMemoryBarrier, srcAccessMask));
alignmentData.push_back(FIELD_SIZEOF(VkMemoryBarrier, srcAccessMask));
alignmentData.push_back(offsetof(VkMemoryBarrier, dstAccessMask));
alignmentData.push_back(FIELD_SIZEOF(VkMemoryBarrier, dstAccessMask));
alignmentData.push_back(offsetof(VkBufferMemoryBarrier, sType));
alignmentData.push_back(FIELD_SIZEOF(VkBufferMemoryBarrier, sType));
alignmentData.push_back(offsetof(VkBufferMemoryBarrier, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkBufferMemoryBarrier, pNext));
alignmentData.push_back(offsetof(VkBufferMemoryBarrier, srcAccessMask));
alignmentData.push_back(FIELD_SIZEOF(VkBufferMemoryBarrier, srcAccessMask));
alignmentData.push_back(offsetof(VkBufferMemoryBarrier, dstAccessMask));
alignmentData.push_back(FIELD_SIZEOF(VkBufferMemoryBarrier, dstAccessMask));
alignmentData.push_back(offsetof(VkBufferMemoryBarrier, srcQueueFamilyIndex));
alignmentData.push_back(FIELD_SIZEOF(VkBufferMemoryBarrier, srcQueueFamilyIndex));
alignmentData.push_back(offsetof(VkBufferMemoryBarrier, dstQueueFamilyIndex));
alignmentData.push_back(FIELD_SIZEOF(VkBufferMemoryBarrier, dstQueueFamilyIndex));
alignmentData.push_back(offsetof(VkBufferMemoryBarrier, buffer));
alignmentData.push_back(FIELD_SIZEOF(VkBufferMemoryBarrier, buffer));
alignmentData.push_back(offsetof(VkBufferMemoryBarrier, offset));
alignmentData.push_back(FIELD_SIZEOF(VkBufferMemoryBarrier, offset));
alignmentData.push_back(offsetof(VkBufferMemoryBarrier, size));
alignmentData.push_back(FIELD_SIZEOF(VkBufferMemoryBarrier, size));
alignmentData.push_back(offsetof(VkImageMemoryBarrier, sType));
alignmentData.push_back(FIELD_SIZEOF(VkImageMemoryBarrier, sType));
alignmentData.push_back(offsetof(VkImageMemoryBarrier, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkImageMemoryBarrier, pNext));
alignmentData.push_back(offsetof(VkImageMemoryBarrier, srcAccessMask));
alignmentData.push_back(FIELD_SIZEOF(VkImageMemoryBarrier, srcAccessMask));
alignmentData.push_back(offsetof(VkImageMemoryBarrier, dstAccessMask));
alignmentData.push_back(FIELD_SIZEOF(VkImageMemoryBarrier, dstAccessMask));
alignmentData.push_back(offsetof(VkImageMemoryBarrier, oldLayout));
alignmentData.push_back(FIELD_SIZEOF(VkImageMemoryBarrier, oldLayout));
alignmentData.push_back(offsetof(VkImageMemoryBarrier, newLayout));
alignmentData.push_back(FIELD_SIZEOF(VkImageMemoryBarrier, newLayout));
alignmentData.push_back(offsetof(VkImageMemoryBarrier, srcQueueFamilyIndex));
alignmentData.push_back(FIELD_SIZEOF(VkImageMemoryBarrier, srcQueueFamilyIndex));
alignmentData.push_back(offsetof(VkImageMemoryBarrier, dstQueueFamilyIndex));
alignmentData.push_back(FIELD_SIZEOF(VkImageMemoryBarrier, dstQueueFamilyIndex));
alignmentData.push_back(offsetof(VkImageMemoryBarrier, image));
alignmentData.push_back(FIELD_SIZEOF(VkImageMemoryBarrier, image));
alignmentData.push_back(offsetof(VkImageMemoryBarrier, subresourceRange));
alignmentData.push_back(FIELD_SIZEOF(VkImageMemoryBarrier, subresourceRange));
alignmentData.push_back(offsetof(VkImageCreateInfo, sType));
alignmentData.push_back(FIELD_SIZEOF(VkImageCreateInfo, sType));
alignmentData.push_back(offsetof(VkImageCreateInfo, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkImageCreateInfo, pNext));
alignmentData.push_back(offsetof(VkImageCreateInfo, flags));
alignmentData.push_back(FIELD_SIZEOF(VkImageCreateInfo, flags));
alignmentData.push_back(offsetof(VkImageCreateInfo, imageType));
alignmentData.push_back(FIELD_SIZEOF(VkImageCreateInfo, imageType));
alignmentData.push_back(offsetof(VkImageCreateInfo, format));
alignmentData.push_back(FIELD_SIZEOF(VkImageCreateInfo, format));
alignmentData.push_back(offsetof(VkImageCreateInfo, extent));
alignmentData.push_back(FIELD_SIZEOF(VkImageCreateInfo, extent));
alignmentData.push_back(offsetof(VkImageCreateInfo, mipLevels));
alignmentData.push_back(FIELD_SIZEOF(VkImageCreateInfo, mipLevels));
alignmentData.push_back(offsetof(VkImageCreateInfo, arrayLayers));
alignmentData.push_back(FIELD_SIZEOF(VkImageCreateInfo, arrayLayers));
alignmentData.push_back(offsetof(VkImageCreateInfo, samples));
alignmentData.push_back(FIELD_SIZEOF(VkImageCreateInfo, samples));
alignmentData.push_back(offsetof(VkImageCreateInfo, tiling));
alignmentData.push_back(FIELD_SIZEOF(VkImageCreateInfo, tiling));
alignmentData.push_back(offsetof(VkImageCreateInfo, usage));
alignmentData.push_back(FIELD_SIZEOF(VkImageCreateInfo, usage));
alignmentData.push_back(offsetof(VkImageCreateInfo, sharingMode));
alignmentData.push_back(FIELD_SIZEOF(VkImageCreateInfo, sharingMode));
alignmentData.push_back(offsetof(VkImageCreateInfo, queueFamilyIndexCount));
alignmentData.push_back(FIELD_SIZEOF(VkImageCreateInfo, queueFamilyIndexCount));
alignmentData.push_back(offsetof(VkImageCreateInfo, pQueueFamilyIndices));
alignmentData.push_back(FIELD_SIZEOF(VkImageCreateInfo, pQueueFamilyIndices));
alignmentData.push_back(offsetof(VkImageCreateInfo, initialLayout));
alignmentData.push_back(FIELD_SIZEOF(VkImageCreateInfo, initialLayout));
alignmentData.push_back(offsetof(VkSubresourceLayout, offset));
alignmentData.push_back(FIELD_SIZEOF(VkSubresourceLayout, offset));
alignmentData.push_back(offsetof(VkSubresourceLayout, size));
alignmentData.push_back(FIELD_SIZEOF(VkSubresourceLayout, size));
alignmentData.push_back(offsetof(VkSubresourceLayout, rowPitch));
alignmentData.push_back(FIELD_SIZEOF(VkSubresourceLayout, rowPitch));
alignmentData.push_back(offsetof(VkSubresourceLayout, arrayPitch));
alignmentData.push_back(FIELD_SIZEOF(VkSubresourceLayout, arrayPitch));
alignmentData.push_back(offsetof(VkSubresourceLayout, depthPitch));
alignmentData.push_back(FIELD_SIZEOF(VkSubresourceLayout, depthPitch));
alignmentData.push_back(offsetof(VkImageViewCreateInfo, sType));
alignmentData.push_back(FIELD_SIZEOF(VkImageViewCreateInfo, sType));
alignmentData.push_back(offsetof(VkImageViewCreateInfo, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkImageViewCreateInfo, pNext));
alignmentData.push_back(offsetof(VkImageViewCreateInfo, flags));
alignmentData.push_back(FIELD_SIZEOF(VkImageViewCreateInfo, flags));
alignmentData.push_back(offsetof(VkImageViewCreateInfo, image));
alignmentData.push_back(FIELD_SIZEOF(VkImageViewCreateInfo, image));
alignmentData.push_back(offsetof(VkImageViewCreateInfo, viewType));
alignmentData.push_back(FIELD_SIZEOF(VkImageViewCreateInfo, viewType));
alignmentData.push_back(offsetof(VkImageViewCreateInfo, format));
alignmentData.push_back(FIELD_SIZEOF(VkImageViewCreateInfo, format));
alignmentData.push_back(offsetof(VkImageViewCreateInfo, components));
alignmentData.push_back(FIELD_SIZEOF(VkImageViewCreateInfo, components));
alignmentData.push_back(offsetof(VkImageViewCreateInfo, subresourceRange));
alignmentData.push_back(FIELD_SIZEOF(VkImageViewCreateInfo, subresourceRange));
alignmentData.push_back(offsetof(VkBufferCopy, srcOffset));
alignmentData.push_back(FIELD_SIZEOF(VkBufferCopy, srcOffset));
alignmentData.push_back(offsetof(VkBufferCopy, dstOffset));
alignmentData.push_back(FIELD_SIZEOF(VkBufferCopy, dstOffset));
alignmentData.push_back(offsetof(VkBufferCopy, size));
alignmentData.push_back(FIELD_SIZEOF(VkBufferCopy, size));
alignmentData.push_back(offsetof(VkSparseMemoryBind, resourceOffset));
alignmentData.push_back(FIELD_SIZEOF(VkSparseMemoryBind, resourceOffset));
alignmentData.push_back(offsetof(VkSparseMemoryBind, size));
alignmentData.push_back(FIELD_SIZEOF(VkSparseMemoryBind, size));
alignmentData.push_back(offsetof(VkSparseMemoryBind, memory));
alignmentData.push_back(FIELD_SIZEOF(VkSparseMemoryBind, memory));
alignmentData.push_back(offsetof(VkSparseMemoryBind, memoryOffset));
alignmentData.push_back(FIELD_SIZEOF(VkSparseMemoryBind, memoryOffset));
alignmentData.push_back(offsetof(VkSparseMemoryBind, flags));
alignmentData.push_back(FIELD_SIZEOF(VkSparseMemoryBind, flags));
alignmentData.push_back(offsetof(VkSparseImageMemoryBind, subresource));
alignmentData.push_back(FIELD_SIZEOF(VkSparseImageMemoryBind, subresource));
alignmentData.push_back(offsetof(VkSparseImageMemoryBind, offset));
alignmentData.push_back(FIELD_SIZEOF(VkSparseImageMemoryBind, offset));
alignmentData.push_back(offsetof(VkSparseImageMemoryBind, extent));
alignmentData.push_back(FIELD_SIZEOF(VkSparseImageMemoryBind, extent));
alignmentData.push_back(offsetof(VkSparseImageMemoryBind, memory));
alignmentData.push_back(FIELD_SIZEOF(VkSparseImageMemoryBind, memory));
alignmentData.push_back(offsetof(VkSparseImageMemoryBind, memoryOffset));
alignmentData.push_back(FIELD_SIZEOF(VkSparseImageMemoryBind, memoryOffset));
alignmentData.push_back(offsetof(VkSparseImageMemoryBind, flags));
alignmentData.push_back(FIELD_SIZEOF(VkSparseImageMemoryBind, flags));
alignmentData.push_back(offsetof(VkSparseBufferMemoryBindInfo, buffer));
alignmentData.push_back(FIELD_SIZEOF(VkSparseBufferMemoryBindInfo, buffer));
alignmentData.push_back(offsetof(VkSparseBufferMemoryBindInfo, bindCount));
alignmentData.push_back(FIELD_SIZEOF(VkSparseBufferMemoryBindInfo, bindCount));
alignmentData.push_back(offsetof(VkSparseBufferMemoryBindInfo, pBinds));
alignmentData.push_back(FIELD_SIZEOF(VkSparseBufferMemoryBindInfo, pBinds));
alignmentData.push_back(offsetof(VkSparseImageOpaqueMemoryBindInfo, image));
alignmentData.push_back(FIELD_SIZEOF(VkSparseImageOpaqueMemoryBindInfo, image));
alignmentData.push_back(offsetof(VkSparseImageOpaqueMemoryBindInfo, bindCount));
alignmentData.push_back(FIELD_SIZEOF(VkSparseImageOpaqueMemoryBindInfo, bindCount));
alignmentData.push_back(offsetof(VkSparseImageOpaqueMemoryBindInfo, pBinds));
alignmentData.push_back(FIELD_SIZEOF(VkSparseImageOpaqueMemoryBindInfo, pBinds));
alignmentData.push_back(offsetof(VkSparseImageMemoryBindInfo, image));
alignmentData.push_back(FIELD_SIZEOF(VkSparseImageMemoryBindInfo, image));
alignmentData.push_back(offsetof(VkSparseImageMemoryBindInfo, bindCount));
alignmentData.push_back(FIELD_SIZEOF(VkSparseImageMemoryBindInfo, bindCount));
alignmentData.push_back(offsetof(VkSparseImageMemoryBindInfo, pBinds));
alignmentData.push_back(FIELD_SIZEOF(VkSparseImageMemoryBindInfo, pBinds));
alignmentData.push_back(offsetof(VkBindSparseInfo, sType));
alignmentData.push_back(FIELD_SIZEOF(VkBindSparseInfo, sType));
alignmentData.push_back(offsetof(VkBindSparseInfo, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkBindSparseInfo, pNext));
alignmentData.push_back(offsetof(VkBindSparseInfo, waitSemaphoreCount));
alignmentData.push_back(FIELD_SIZEOF(VkBindSparseInfo, waitSemaphoreCount));
alignmentData.push_back(offsetof(VkBindSparseInfo, pWaitSemaphores));
alignmentData.push_back(FIELD_SIZEOF(VkBindSparseInfo, pWaitSemaphores));
alignmentData.push_back(offsetof(VkBindSparseInfo, bufferBindCount));
alignmentData.push_back(FIELD_SIZEOF(VkBindSparseInfo, bufferBindCount));
alignmentData.push_back(offsetof(VkBindSparseInfo, pBufferBinds));
alignmentData.push_back(FIELD_SIZEOF(VkBindSparseInfo, pBufferBinds));
alignmentData.push_back(offsetof(VkBindSparseInfo, imageOpaqueBindCount));
alignmentData.push_back(FIELD_SIZEOF(VkBindSparseInfo, imageOpaqueBindCount));
alignmentData.push_back(offsetof(VkBindSparseInfo, pImageOpaqueBinds));
alignmentData.push_back(FIELD_SIZEOF(VkBindSparseInfo, pImageOpaqueBinds));
alignmentData.push_back(offsetof(VkBindSparseInfo, imageBindCount));
alignmentData.push_back(FIELD_SIZEOF(VkBindSparseInfo, imageBindCount));
alignmentData.push_back(offsetof(VkBindSparseInfo, pImageBinds));
alignmentData.push_back(FIELD_SIZEOF(VkBindSparseInfo, pImageBinds));
alignmentData.push_back(offsetof(VkBindSparseInfo, signalSemaphoreCount));
alignmentData.push_back(FIELD_SIZEOF(VkBindSparseInfo, signalSemaphoreCount));
alignmentData.push_back(offsetof(VkBindSparseInfo, pSignalSemaphores));
alignmentData.push_back(FIELD_SIZEOF(VkBindSparseInfo, pSignalSemaphores));
alignmentData.push_back(offsetof(VkImageCopy, srcSubresource));
alignmentData.push_back(FIELD_SIZEOF(VkImageCopy, srcSubresource));
alignmentData.push_back(offsetof(VkImageCopy, srcOffset));
alignmentData.push_back(FIELD_SIZEOF(VkImageCopy, srcOffset));
alignmentData.push_back(offsetof(VkImageCopy, dstSubresource));
alignmentData.push_back(FIELD_SIZEOF(VkImageCopy, dstSubresource));
alignmentData.push_back(offsetof(VkImageCopy, dstOffset));
alignmentData.push_back(FIELD_SIZEOF(VkImageCopy, dstOffset));
alignmentData.push_back(offsetof(VkImageCopy, extent));
alignmentData.push_back(FIELD_SIZEOF(VkImageCopy, extent));
alignmentData.push_back(offsetof(VkImageBlit, srcSubresource));
alignmentData.push_back(FIELD_SIZEOF(VkImageBlit, srcSubresource));
alignmentData.push_back(offsetof(VkImageBlit, srcOffsets));
alignmentData.push_back(FIELD_SIZEOF(VkImageBlit, srcOffsets));
alignmentData.push_back(offsetof(VkImageBlit, dstSubresource));
alignmentData.push_back(FIELD_SIZEOF(VkImageBlit, dstSubresource));
alignmentData.push_back(offsetof(VkImageBlit, dstOffsets));
alignmentData.push_back(FIELD_SIZEOF(VkImageBlit, dstOffsets));
alignmentData.push_back(offsetof(VkBufferImageCopy, bufferOffset));
alignmentData.push_back(FIELD_SIZEOF(VkBufferImageCopy, bufferOffset));
alignmentData.push_back(offsetof(VkBufferImageCopy, bufferRowLength));
alignmentData.push_back(FIELD_SIZEOF(VkBufferImageCopy, bufferRowLength));
alignmentData.push_back(offsetof(VkBufferImageCopy, bufferImageHeight));
alignmentData.push_back(FIELD_SIZEOF(VkBufferImageCopy, bufferImageHeight));
alignmentData.push_back(offsetof(VkBufferImageCopy, imageSubresource));
alignmentData.push_back(FIELD_SIZEOF(VkBufferImageCopy, imageSubresource));
alignmentData.push_back(offsetof(VkBufferImageCopy, imageOffset));
alignmentData.push_back(FIELD_SIZEOF(VkBufferImageCopy, imageOffset));
alignmentData.push_back(offsetof(VkBufferImageCopy, imageExtent));
alignmentData.push_back(FIELD_SIZEOF(VkBufferImageCopy, imageExtent));
alignmentData.push_back(offsetof(VkImageResolve, srcSubresource));
alignmentData.push_back(FIELD_SIZEOF(VkImageResolve, srcSubresource));
alignmentData.push_back(offsetof(VkImageResolve, srcOffset));
alignmentData.push_back(FIELD_SIZEOF(VkImageResolve, srcOffset));
alignmentData.push_back(offsetof(VkImageResolve, dstSubresource));
alignmentData.push_back(FIELD_SIZEOF(VkImageResolve, dstSubresource));
alignmentData.push_back(offsetof(VkImageResolve, dstOffset));
alignmentData.push_back(FIELD_SIZEOF(VkImageResolve, dstOffset));
alignmentData.push_back(offsetof(VkImageResolve, extent));
alignmentData.push_back(FIELD_SIZEOF(VkImageResolve, extent));
alignmentData.push_back(offsetof(VkShaderModuleCreateInfo, sType));
alignmentData.push_back(FIELD_SIZEOF(VkShaderModuleCreateInfo, sType));
alignmentData.push_back(offsetof(VkShaderModuleCreateInfo, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkShaderModuleCreateInfo, pNext));
alignmentData.push_back(offsetof(VkShaderModuleCreateInfo, flags));
alignmentData.push_back(FIELD_SIZEOF(VkShaderModuleCreateInfo, flags));
alignmentData.push_back(offsetof(VkShaderModuleCreateInfo, codeSize));
alignmentData.push_back(FIELD_SIZEOF(VkShaderModuleCreateInfo, codeSize));
alignmentData.push_back(offsetof(VkShaderModuleCreateInfo, pCode));
alignmentData.push_back(FIELD_SIZEOF(VkShaderModuleCreateInfo, pCode));
alignmentData.push_back(offsetof(VkDescriptorSetLayoutBinding, binding));
alignmentData.push_back(FIELD_SIZEOF(VkDescriptorSetLayoutBinding, binding));
alignmentData.push_back(offsetof(VkDescriptorSetLayoutBinding, descriptorType));
alignmentData.push_back(FIELD_SIZEOF(VkDescriptorSetLayoutBinding, descriptorType));
alignmentData.push_back(offsetof(VkDescriptorSetLayoutBinding, descriptorCount));
alignmentData.push_back(FIELD_SIZEOF(VkDescriptorSetLayoutBinding, descriptorCount));
alignmentData.push_back(offsetof(VkDescriptorSetLayoutBinding, stageFlags));
alignmentData.push_back(FIELD_SIZEOF(VkDescriptorSetLayoutBinding, stageFlags));
alignmentData.push_back(offsetof(VkDescriptorSetLayoutBinding, pImmutableSamplers));
alignmentData.push_back(FIELD_SIZEOF(VkDescriptorSetLayoutBinding, pImmutableSamplers));
alignmentData.push_back(offsetof(VkDescriptorSetLayoutCreateInfo, sType));
alignmentData.push_back(FIELD_SIZEOF(VkDescriptorSetLayoutCreateInfo, sType));
alignmentData.push_back(offsetof(VkDescriptorSetLayoutCreateInfo, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkDescriptorSetLayoutCreateInfo, pNext));
alignmentData.push_back(offsetof(VkDescriptorSetLayoutCreateInfo, flags));
alignmentData.push_back(FIELD_SIZEOF(VkDescriptorSetLayoutCreateInfo, flags));
alignmentData.push_back(offsetof(VkDescriptorSetLayoutCreateInfo, bindingCount));
alignmentData.push_back(FIELD_SIZEOF(VkDescriptorSetLayoutCreateInfo, bindingCount));
alignmentData.push_back(offsetof(VkDescriptorSetLayoutCreateInfo, pBindings));
alignmentData.push_back(FIELD_SIZEOF(VkDescriptorSetLayoutCreateInfo, pBindings));
alignmentData.push_back(offsetof(VkDescriptorPoolSize, type));
alignmentData.push_back(FIELD_SIZEOF(VkDescriptorPoolSize, type));
alignmentData.push_back(offsetof(VkDescriptorPoolSize, descriptorCount));
alignmentData.push_back(FIELD_SIZEOF(VkDescriptorPoolSize, descriptorCount));
alignmentData.push_back(offsetof(VkDescriptorPoolCreateInfo, sType));
alignmentData.push_back(FIELD_SIZEOF(VkDescriptorPoolCreateInfo, sType));
alignmentData.push_back(offsetof(VkDescriptorPoolCreateInfo, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkDescriptorPoolCreateInfo, pNext));
alignmentData.push_back(offsetof(VkDescriptorPoolCreateInfo, flags));
alignmentData.push_back(FIELD_SIZEOF(VkDescriptorPoolCreateInfo, flags));
alignmentData.push_back(offsetof(VkDescriptorPoolCreateInfo, maxSets));
alignmentData.push_back(FIELD_SIZEOF(VkDescriptorPoolCreateInfo, maxSets));
alignmentData.push_back(offsetof(VkDescriptorPoolCreateInfo, poolSizeCount));
alignmentData.push_back(FIELD_SIZEOF(VkDescriptorPoolCreateInfo, poolSizeCount));
alignmentData.push_back(offsetof(VkDescriptorPoolCreateInfo, pPoolSizes));
alignmentData.push_back(FIELD_SIZEOF(VkDescriptorPoolCreateInfo, pPoolSizes));
alignmentData.push_back(offsetof(VkDescriptorSetAllocateInfo, sType));
alignmentData.push_back(FIELD_SIZEOF(VkDescriptorSetAllocateInfo, sType));
alignmentData.push_back(offsetof(VkDescriptorSetAllocateInfo, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkDescriptorSetAllocateInfo, pNext));
alignmentData.push_back(offsetof(VkDescriptorSetAllocateInfo, descriptorPool));
alignmentData.push_back(FIELD_SIZEOF(VkDescriptorSetAllocateInfo, descriptorPool));
alignmentData.push_back(offsetof(VkDescriptorSetAllocateInfo, descriptorSetCount));
alignmentData.push_back(FIELD_SIZEOF(VkDescriptorSetAllocateInfo, descriptorSetCount));
alignmentData.push_back(offsetof(VkDescriptorSetAllocateInfo, pSetLayouts));
alignmentData.push_back(FIELD_SIZEOF(VkDescriptorSetAllocateInfo, pSetLayouts));
alignmentData.push_back(offsetof(VkSpecializationMapEntry, constantID));
alignmentData.push_back(FIELD_SIZEOF(VkSpecializationMapEntry, constantID));
alignmentData.push_back(offsetof(VkSpecializationMapEntry, offset));
alignmentData.push_back(FIELD_SIZEOF(VkSpecializationMapEntry, offset));
alignmentData.push_back(offsetof(VkSpecializationMapEntry, size));
alignmentData.push_back(FIELD_SIZEOF(VkSpecializationMapEntry, size));
alignmentData.push_back(offsetof(VkSpecializationInfo, mapEntryCount));
alignmentData.push_back(FIELD_SIZEOF(VkSpecializationInfo, mapEntryCount));
alignmentData.push_back(offsetof(VkSpecializationInfo, pMapEntries));
alignmentData.push_back(FIELD_SIZEOF(VkSpecializationInfo, pMapEntries));
alignmentData.push_back(offsetof(VkSpecializationInfo, dataSize));
alignmentData.push_back(FIELD_SIZEOF(VkSpecializationInfo, dataSize));
alignmentData.push_back(offsetof(VkSpecializationInfo, pData));
alignmentData.push_back(FIELD_SIZEOF(VkSpecializationInfo, pData));
alignmentData.push_back(offsetof(VkPipelineShaderStageCreateInfo, sType));
alignmentData.push_back(FIELD_SIZEOF(VkPipelineShaderStageCreateInfo, sType));
alignmentData.push_back(offsetof(VkPipelineShaderStageCreateInfo, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkPipelineShaderStageCreateInfo, pNext));
alignmentData.push_back(offsetof(VkPipelineShaderStageCreateInfo, flags));
alignmentData.push_back(FIELD_SIZEOF(VkPipelineShaderStageCreateInfo, flags));
alignmentData.push_back(offsetof(VkPipelineShaderStageCreateInfo, stage));
alignmentData.push_back(FIELD_SIZEOF(VkPipelineShaderStageCreateInfo, stage));
alignmentData.push_back(offsetof(VkPipelineShaderStageCreateInfo, module));
alignmentData.push_back(FIELD_SIZEOF(VkPipelineShaderStageCreateInfo, module));
alignmentData.push_back(offsetof(VkPipelineShaderStageCreateInfo, pName));
alignmentData.push_back(FIELD_SIZEOF(VkPipelineShaderStageCreateInfo, pName));
alignmentData.push_back(offsetof(VkPipelineShaderStageCreateInfo, pSpecializationInfo));
alignmentData.push_back(FIELD_SIZEOF(VkPipelineShaderStageCreateInfo, pSpecializationInfo));
alignmentData.push_back(offsetof(VkComputePipelineCreateInfo, sType));
alignmentData.push_back(FIELD_SIZEOF(VkComputePipelineCreateInfo, sType));
alignmentData.push_back(offsetof(VkComputePipelineCreateInfo, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkComputePipelineCreateInfo, pNext));
alignmentData.push_back(offsetof(VkComputePipelineCreateInfo, flags));
alignmentData.push_back(FIELD_SIZEOF(VkComputePipelineCreateInfo, flags));
alignmentData.push_back(offsetof(VkComputePipelineCreateInfo, stage));
alignmentData.push_back(FIELD_SIZEOF(VkComputePipelineCreateInfo, stage));
alignmentData.push_back(offsetof(VkComputePipelineCreateInfo, layout));
alignmentData.push_back(FIELD_SIZEOF(VkComputePipelineCreateInfo, layout));
alignmentData.push_back(offsetof(VkComputePipelineCreateInfo, basePipelineHandle));
alignmentData.push_back(FIELD_SIZEOF(VkComputePipelineCreateInfo, basePipelineHandle));
alignmentData.push_back(offsetof(VkComputePipelineCreateInfo, basePipelineIndex));
alignmentData.push_back(FIELD_SIZEOF(VkComputePipelineCreateInfo, basePipelineIndex));
alignmentData.push_back(offsetof(VkVertexInputBindingDescription, binding));
alignmentData.push_back(FIELD_SIZEOF(VkVertexInputBindingDescription, binding));
alignmentData.push_back(offsetof(VkVertexInputBindingDescription, stride));
alignmentData.push_back(FIELD_SIZEOF(VkVertexInputBindingDescription, stride));
alignmentData.push_back(offsetof(VkVertexInputBindingDescription, inputRate));
alignmentData.push_back(FIELD_SIZEOF(VkVertexInputBindingDescription, inputRate));
alignmentData.push_back(offsetof(VkVertexInputAttributeDescription, location));
alignmentData.push_back(FIELD_SIZEOF(VkVertexInputAttributeDescription, location));
alignmentData.push_back(offsetof(VkVertexInputAttributeDescription, binding));
alignmentData.push_back(FIELD_SIZEOF(VkVertexInputAttributeDescription, binding));
alignmentData.push_back(offsetof(VkVertexInputAttributeDescription, format));
alignmentData.push_back(FIELD_SIZEOF(VkVertexInputAttributeDescription, format));
alignmentData.push_back(offsetof(VkVertexInputAttributeDescription, offset));
alignmentData.push_back(FIELD_SIZEOF(VkVertexInputAttributeDescription, offset));
alignmentData.push_back(offsetof(VkPipelineVertexInputStateCreateInfo, sType));
alignmentData.push_back(FIELD_SIZEOF(VkPipelineVertexInputStateCreateInfo, sType));
alignmentData.push_back(offsetof(VkPipelineVertexInputStateCreateInfo, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkPipelineVertexInputStateCreateInfo, pNext));
alignmentData.push_back(offsetof(VkPipelineVertexInputStateCreateInfo, flags));
alignmentData.push_back(FIELD_SIZEOF(VkPipelineVertexInputStateCreateInfo, flags));
alignmentData.push_back(offsetof(VkPipelineVertexInputStateCreateInfo, vertexBindingDescriptionCount));
alignmentData.push_back(FIELD_SIZEOF(VkPipelineVertexInputStateCreateInfo, vertexBindingDescriptionCount));
alignmentData.push_back(offsetof(VkPipelineVertexInputStateCreateInfo, pVertexBindingDescriptions));
alignmentData.push_back(FIELD_SIZEOF(VkPipelineVertexInputStateCreateInfo, pVertexBindingDescriptions));
alignmentData.push_back(offsetof(VkPipelineVertexInputStateCreateInfo, vertexAttributeDescriptionCount));
alignmentData.push_back(FIELD_SIZEOF(VkPipelineVertexInputStateCreateInfo, vertexAttributeDescriptionCount));
alignmentData.push_back(offsetof(VkPipelineVertexInputStateCreateInfo, pVertexAttributeDescriptions));
alignmentData.push_back(FIELD_SIZEOF(VkPipelineVertexInputStateCreateInfo, pVertexAttributeDescriptions));
alignmentData.push_back(offsetof(VkPipelineInputAssemblyStateCreateInfo, sType));
alignmentData.push_back(FIELD_SIZEOF(VkPipelineInputAssemblyStateCreateInfo, sType));
alignmentData.push_back(offsetof(VkPipelineInputAssemblyStateCreateInfo, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkPipelineInputAssemblyStateCreateInfo, pNext));
alignmentData.push_back(offsetof(VkPipelineInputAssemblyStateCreateInfo, flags));
alignmentData.push_back(FIELD_SIZEOF(VkPipelineInputAssemblyStateCreateInfo, flags));
alignmentData.push_back(offsetof(VkPipelineInputAssemblyStateCreateInfo, topology));
alignmentData.push_back(FIELD_SIZEOF(VkPipelineInputAssemblyStateCreateInfo, topology));
alignmentData.push_back(offsetof(VkPipelineInputAssemblyStateCreateInfo, primitiveRestartEnable));
alignmentData.push_back(FIELD_SIZEOF(VkPipelineInputAssemblyStateCreateInfo, primitiveRestartEnable));
alignmentData.push_back(offsetof(VkPipelineTessellationStateCreateInfo, sType));
alignmentData.push_back(FIELD_SIZEOF(VkPipelineTessellationStateCreateInfo, sType));
alignmentData.push_back(offsetof(VkPipelineTessellationStateCreateInfo, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkPipelineTessellationStateCreateInfo, pNext));
alignmentData.push_back(offsetof(VkPipelineTessellationStateCreateInfo, flags));
alignmentData.push_back(FIELD_SIZEOF(VkPipelineTessellationStateCreateInfo, flags));
alignmentData.push_back(offsetof(VkPipelineTessellationStateCreateInfo, patchControlPoints));
alignmentData.push_back(FIELD_SIZEOF(VkPipelineTessellationStateCreateInfo, patchControlPoints));
alignmentData.push_back(offsetof(VkPipelineViewportStateCreateInfo, sType));
alignmentData.push_back(FIELD_SIZEOF(VkPipelineViewportStateCreateInfo, sType));
alignmentData.push_back(offsetof(VkPipelineViewportStateCreateInfo, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkPipelineViewportStateCreateInfo, pNext));
alignmentData.push_back(offsetof(VkPipelineViewportStateCreateInfo, flags));
alignmentData.push_back(FIELD_SIZEOF(VkPipelineViewportStateCreateInfo, flags));
alignmentData.push_back(offsetof(VkPipelineViewportStateCreateInfo, viewportCount));
alignmentData.push_back(FIELD_SIZEOF(VkPipelineViewportStateCreateInfo, viewportCount));
alignmentData.push_back(offsetof(VkPipelineViewportStateCreateInfo, pViewports));
alignmentData.push_back(FIELD_SIZEOF(VkPipelineViewportStateCreateInfo, pViewports));
alignmentData.push_back(offsetof(VkPipelineViewportStateCreateInfo, scissorCount));
alignmentData.push_back(FIELD_SIZEOF(VkPipelineViewportStateCreateInfo, scissorCount));
alignmentData.push_back(offsetof(VkPipelineViewportStateCreateInfo, pScissors));
alignmentData.push_back(FIELD_SIZEOF(VkPipelineViewportStateCreateInfo, pScissors));
alignmentData.push_back(offsetof(VkPipelineRasterizationStateCreateInfo, sType));
alignmentData.push_back(FIELD_SIZEOF(VkPipelineRasterizationStateCreateInfo, sType));
alignmentData.push_back(offsetof(VkPipelineRasterizationStateCreateInfo, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkPipelineRasterizationStateCreateInfo, pNext));
alignmentData.push_back(offsetof(VkPipelineRasterizationStateCreateInfo, flags));
alignmentData.push_back(FIELD_SIZEOF(VkPipelineRasterizationStateCreateInfo, flags));
alignmentData.push_back(offsetof(VkPipelineRasterizationStateCreateInfo, depthClampEnable));
alignmentData.push_back(FIELD_SIZEOF(VkPipelineRasterizationStateCreateInfo, depthClampEnable));
alignmentData.push_back(offsetof(VkPipelineRasterizationStateCreateInfo, rasterizerDiscardEnable));
alignmentData.push_back(FIELD_SIZEOF(VkPipelineRasterizationStateCreateInfo, rasterizerDiscardEnable));
alignmentData.push_back(offsetof(VkPipelineRasterizationStateCreateInfo, polygonMode));
alignmentData.push_back(FIELD_SIZEOF(VkPipelineRasterizationStateCreateInfo, polygonMode));
alignmentData.push_back(offsetof(VkPipelineRasterizationStateCreateInfo, cullMode));
alignmentData.push_back(FIELD_SIZEOF(VkPipelineRasterizationStateCreateInfo, cullMode));
alignmentData.push_back(offsetof(VkPipelineRasterizationStateCreateInfo, frontFace));
alignmentData.push_back(FIELD_SIZEOF(VkPipelineRasterizationStateCreateInfo, frontFace));
alignmentData.push_back(offsetof(VkPipelineRasterizationStateCreateInfo, depthBiasEnable));
alignmentData.push_back(FIELD_SIZEOF(VkPipelineRasterizationStateCreateInfo, depthBiasEnable));
alignmentData.push_back(offsetof(VkPipelineRasterizationStateCreateInfo, depthBiasConstantFactor));
alignmentData.push_back(FIELD_SIZEOF(VkPipelineRasterizationStateCreateInfo, depthBiasConstantFactor));
alignmentData.push_back(offsetof(VkPipelineRasterizationStateCreateInfo, depthBiasClamp));
alignmentData.push_back(FIELD_SIZEOF(VkPipelineRasterizationStateCreateInfo, depthBiasClamp));
alignmentData.push_back(offsetof(VkPipelineRasterizationStateCreateInfo, depthBiasSlopeFactor));
alignmentData.push_back(FIELD_SIZEOF(VkPipelineRasterizationStateCreateInfo, depthBiasSlopeFactor));
alignmentData.push_back(offsetof(VkPipelineRasterizationStateCreateInfo, lineWidth));
alignmentData.push_back(FIELD_SIZEOF(VkPipelineRasterizationStateCreateInfo, lineWidth));
alignmentData.push_back(offsetof(VkPipelineMultisampleStateCreateInfo, sType));
alignmentData.push_back(FIELD_SIZEOF(VkPipelineMultisampleStateCreateInfo, sType));
alignmentData.push_back(offsetof(VkPipelineMultisampleStateCreateInfo, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkPipelineMultisampleStateCreateInfo, pNext));
alignmentData.push_back(offsetof(VkPipelineMultisampleStateCreateInfo, flags));
alignmentData.push_back(FIELD_SIZEOF(VkPipelineMultisampleStateCreateInfo, flags));
alignmentData.push_back(offsetof(VkPipelineMultisampleStateCreateInfo, rasterizationSamples));
alignmentData.push_back(FIELD_SIZEOF(VkPipelineMultisampleStateCreateInfo, rasterizationSamples));
alignmentData.push_back(offsetof(VkPipelineMultisampleStateCreateInfo, sampleShadingEnable));
alignmentData.push_back(FIELD_SIZEOF(VkPipelineMultisampleStateCreateInfo, sampleShadingEnable));
alignmentData.push_back(offsetof(VkPipelineMultisampleStateCreateInfo, minSampleShading));
alignmentData.push_back(FIELD_SIZEOF(VkPipelineMultisampleStateCreateInfo, minSampleShading));
alignmentData.push_back(offsetof(VkPipelineMultisampleStateCreateInfo, pSampleMask));
alignmentData.push_back(FIELD_SIZEOF(VkPipelineMultisampleStateCreateInfo, pSampleMask));
alignmentData.push_back(offsetof(VkPipelineMultisampleStateCreateInfo, alphaToCoverageEnable));
alignmentData.push_back(FIELD_SIZEOF(VkPipelineMultisampleStateCreateInfo, alphaToCoverageEnable));
alignmentData.push_back(offsetof(VkPipelineMultisampleStateCreateInfo, alphaToOneEnable));
alignmentData.push_back(FIELD_SIZEOF(VkPipelineMultisampleStateCreateInfo, alphaToOneEnable));
alignmentData.push_back(offsetof(VkPipelineColorBlendAttachmentState, blendEnable));
alignmentData.push_back(FIELD_SIZEOF(VkPipelineColorBlendAttachmentState, blendEnable));
alignmentData.push_back(offsetof(VkPipelineColorBlendAttachmentState, srcColorBlendFactor));
alignmentData.push_back(FIELD_SIZEOF(VkPipelineColorBlendAttachmentState, srcColorBlendFactor));
alignmentData.push_back(offsetof(VkPipelineColorBlendAttachmentState, dstColorBlendFactor));
alignmentData.push_back(FIELD_SIZEOF(VkPipelineColorBlendAttachmentState, dstColorBlendFactor));
alignmentData.push_back(offsetof(VkPipelineColorBlendAttachmentState, colorBlendOp));
alignmentData.push_back(FIELD_SIZEOF(VkPipelineColorBlendAttachmentState, colorBlendOp));
alignmentData.push_back(offsetof(VkPipelineColorBlendAttachmentState, srcAlphaBlendFactor));
alignmentData.push_back(FIELD_SIZEOF(VkPipelineColorBlendAttachmentState, srcAlphaBlendFactor));
alignmentData.push_back(offsetof(VkPipelineColorBlendAttachmentState, dstAlphaBlendFactor));
alignmentData.push_back(FIELD_SIZEOF(VkPipelineColorBlendAttachmentState, dstAlphaBlendFactor));
alignmentData.push_back(offsetof(VkPipelineColorBlendAttachmentState, alphaBlendOp));
alignmentData.push_back(FIELD_SIZEOF(VkPipelineColorBlendAttachmentState, alphaBlendOp));
alignmentData.push_back(offsetof(VkPipelineColorBlendAttachmentState, colorWriteMask));
alignmentData.push_back(FIELD_SIZEOF(VkPipelineColorBlendAttachmentState, colorWriteMask));
alignmentData.push_back(offsetof(VkPipelineColorBlendStateCreateInfo, sType));
alignmentData.push_back(FIELD_SIZEOF(VkPipelineColorBlendStateCreateInfo, sType));
alignmentData.push_back(offsetof(VkPipelineColorBlendStateCreateInfo, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkPipelineColorBlendStateCreateInfo, pNext));
alignmentData.push_back(offsetof(VkPipelineColorBlendStateCreateInfo, flags));
alignmentData.push_back(FIELD_SIZEOF(VkPipelineColorBlendStateCreateInfo, flags));
alignmentData.push_back(offsetof(VkPipelineColorBlendStateCreateInfo, logicOpEnable));
alignmentData.push_back(FIELD_SIZEOF(VkPipelineColorBlendStateCreateInfo, logicOpEnable));
alignmentData.push_back(offsetof(VkPipelineColorBlendStateCreateInfo, logicOp));
alignmentData.push_back(FIELD_SIZEOF(VkPipelineColorBlendStateCreateInfo, logicOp));
alignmentData.push_back(offsetof(VkPipelineColorBlendStateCreateInfo, attachmentCount));
alignmentData.push_back(FIELD_SIZEOF(VkPipelineColorBlendStateCreateInfo, attachmentCount));
alignmentData.push_back(offsetof(VkPipelineColorBlendStateCreateInfo, pAttachments));
alignmentData.push_back(FIELD_SIZEOF(VkPipelineColorBlendStateCreateInfo, pAttachments));
alignmentData.push_back(offsetof(VkPipelineColorBlendStateCreateInfo, blendConstants));
alignmentData.push_back(FIELD_SIZEOF(VkPipelineColorBlendStateCreateInfo, blendConstants));
alignmentData.push_back(offsetof(VkPipelineDynamicStateCreateInfo, sType));
alignmentData.push_back(FIELD_SIZEOF(VkPipelineDynamicStateCreateInfo, sType));
alignmentData.push_back(offsetof(VkPipelineDynamicStateCreateInfo, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkPipelineDynamicStateCreateInfo, pNext));
alignmentData.push_back(offsetof(VkPipelineDynamicStateCreateInfo, flags));
alignmentData.push_back(FIELD_SIZEOF(VkPipelineDynamicStateCreateInfo, flags));
alignmentData.push_back(offsetof(VkPipelineDynamicStateCreateInfo, dynamicStateCount));
alignmentData.push_back(FIELD_SIZEOF(VkPipelineDynamicStateCreateInfo, dynamicStateCount));
alignmentData.push_back(offsetof(VkPipelineDynamicStateCreateInfo, pDynamicStates));
alignmentData.push_back(FIELD_SIZEOF(VkPipelineDynamicStateCreateInfo, pDynamicStates));
alignmentData.push_back(offsetof(VkStencilOpState, failOp));
alignmentData.push_back(FIELD_SIZEOF(VkStencilOpState, failOp));
alignmentData.push_back(offsetof(VkStencilOpState, passOp));
alignmentData.push_back(FIELD_SIZEOF(VkStencilOpState, passOp));
alignmentData.push_back(offsetof(VkStencilOpState, depthFailOp));
alignmentData.push_back(FIELD_SIZEOF(VkStencilOpState, depthFailOp));
alignmentData.push_back(offsetof(VkStencilOpState, compareOp));
alignmentData.push_back(FIELD_SIZEOF(VkStencilOpState, compareOp));
alignmentData.push_back(offsetof(VkStencilOpState, compareMask));
alignmentData.push_back(FIELD_SIZEOF(VkStencilOpState, compareMask));
alignmentData.push_back(offsetof(VkStencilOpState, writeMask));
alignmentData.push_back(FIELD_SIZEOF(VkStencilOpState, writeMask));
alignmentData.push_back(offsetof(VkStencilOpState, reference));
alignmentData.push_back(FIELD_SIZEOF(VkStencilOpState, reference));
alignmentData.push_back(offsetof(VkPipelineDepthStencilStateCreateInfo, sType));
alignmentData.push_back(FIELD_SIZEOF(VkPipelineDepthStencilStateCreateInfo, sType));
alignmentData.push_back(offsetof(VkPipelineDepthStencilStateCreateInfo, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkPipelineDepthStencilStateCreateInfo, pNext));
alignmentData.push_back(offsetof(VkPipelineDepthStencilStateCreateInfo, flags));
alignmentData.push_back(FIELD_SIZEOF(VkPipelineDepthStencilStateCreateInfo, flags));
alignmentData.push_back(offsetof(VkPipelineDepthStencilStateCreateInfo, depthTestEnable));
alignmentData.push_back(FIELD_SIZEOF(VkPipelineDepthStencilStateCreateInfo, depthTestEnable));
alignmentData.push_back(offsetof(VkPipelineDepthStencilStateCreateInfo, depthWriteEnable));
alignmentData.push_back(FIELD_SIZEOF(VkPipelineDepthStencilStateCreateInfo, depthWriteEnable));
alignmentData.push_back(offsetof(VkPipelineDepthStencilStateCreateInfo, depthCompareOp));
alignmentData.push_back(FIELD_SIZEOF(VkPipelineDepthStencilStateCreateInfo, depthCompareOp));
alignmentData.push_back(offsetof(VkPipelineDepthStencilStateCreateInfo, depthBoundsTestEnable));
alignmentData.push_back(FIELD_SIZEOF(VkPipelineDepthStencilStateCreateInfo, depthBoundsTestEnable));
alignmentData.push_back(offsetof(VkPipelineDepthStencilStateCreateInfo, stencilTestEnable));
alignmentData.push_back(FIELD_SIZEOF(VkPipelineDepthStencilStateCreateInfo, stencilTestEnable));
alignmentData.push_back(offsetof(VkPipelineDepthStencilStateCreateInfo, front));
alignmentData.push_back(FIELD_SIZEOF(VkPipelineDepthStencilStateCreateInfo, front));
alignmentData.push_back(offsetof(VkPipelineDepthStencilStateCreateInfo, back));
alignmentData.push_back(FIELD_SIZEOF(VkPipelineDepthStencilStateCreateInfo, back));
alignmentData.push_back(offsetof(VkPipelineDepthStencilStateCreateInfo, minDepthBounds));
alignmentData.push_back(FIELD_SIZEOF(VkPipelineDepthStencilStateCreateInfo, minDepthBounds));
alignmentData.push_back(offsetof(VkPipelineDepthStencilStateCreateInfo, maxDepthBounds));
alignmentData.push_back(FIELD_SIZEOF(VkPipelineDepthStencilStateCreateInfo, maxDepthBounds));
alignmentData.push_back(offsetof(VkGraphicsPipelineCreateInfo, sType));
alignmentData.push_back(FIELD_SIZEOF(VkGraphicsPipelineCreateInfo, sType));
alignmentData.push_back(offsetof(VkGraphicsPipelineCreateInfo, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkGraphicsPipelineCreateInfo, pNext));
alignmentData.push_back(offsetof(VkGraphicsPipelineCreateInfo, flags));
alignmentData.push_back(FIELD_SIZEOF(VkGraphicsPipelineCreateInfo, flags));
alignmentData.push_back(offsetof(VkGraphicsPipelineCreateInfo, stageCount));
alignmentData.push_back(FIELD_SIZEOF(VkGraphicsPipelineCreateInfo, stageCount));
alignmentData.push_back(offsetof(VkGraphicsPipelineCreateInfo, pStages));
alignmentData.push_back(FIELD_SIZEOF(VkGraphicsPipelineCreateInfo, pStages));
alignmentData.push_back(offsetof(VkGraphicsPipelineCreateInfo, pVertexInputState));
alignmentData.push_back(FIELD_SIZEOF(VkGraphicsPipelineCreateInfo, pVertexInputState));
alignmentData.push_back(offsetof(VkGraphicsPipelineCreateInfo, pInputAssemblyState));
alignmentData.push_back(FIELD_SIZEOF(VkGraphicsPipelineCreateInfo, pInputAssemblyState));
alignmentData.push_back(offsetof(VkGraphicsPipelineCreateInfo, pTessellationState));
alignmentData.push_back(FIELD_SIZEOF(VkGraphicsPipelineCreateInfo, pTessellationState));
alignmentData.push_back(offsetof(VkGraphicsPipelineCreateInfo, pViewportState));
alignmentData.push_back(FIELD_SIZEOF(VkGraphicsPipelineCreateInfo, pViewportState));
alignmentData.push_back(offsetof(VkGraphicsPipelineCreateInfo, pRasterizationState));
alignmentData.push_back(FIELD_SIZEOF(VkGraphicsPipelineCreateInfo, pRasterizationState));
alignmentData.push_back(offsetof(VkGraphicsPipelineCreateInfo, pMultisampleState));
alignmentData.push_back(FIELD_SIZEOF(VkGraphicsPipelineCreateInfo, pMultisampleState));
alignmentData.push_back(offsetof(VkGraphicsPipelineCreateInfo, pDepthStencilState));
alignmentData.push_back(FIELD_SIZEOF(VkGraphicsPipelineCreateInfo, pDepthStencilState));
alignmentData.push_back(offsetof(VkGraphicsPipelineCreateInfo, pColorBlendState));
alignmentData.push_back(FIELD_SIZEOF(VkGraphicsPipelineCreateInfo, pColorBlendState));
alignmentData.push_back(offsetof(VkGraphicsPipelineCreateInfo, pDynamicState));
alignmentData.push_back(FIELD_SIZEOF(VkGraphicsPipelineCreateInfo, pDynamicState));
alignmentData.push_back(offsetof(VkGraphicsPipelineCreateInfo, layout));
alignmentData.push_back(FIELD_SIZEOF(VkGraphicsPipelineCreateInfo, layout));
alignmentData.push_back(offsetof(VkGraphicsPipelineCreateInfo, renderPass));
alignmentData.push_back(FIELD_SIZEOF(VkGraphicsPipelineCreateInfo, renderPass));
alignmentData.push_back(offsetof(VkGraphicsPipelineCreateInfo, subpass));
alignmentData.push_back(FIELD_SIZEOF(VkGraphicsPipelineCreateInfo, subpass));
alignmentData.push_back(offsetof(VkGraphicsPipelineCreateInfo, basePipelineHandle));
alignmentData.push_back(FIELD_SIZEOF(VkGraphicsPipelineCreateInfo, basePipelineHandle));
alignmentData.push_back(offsetof(VkGraphicsPipelineCreateInfo, basePipelineIndex));
alignmentData.push_back(FIELD_SIZEOF(VkGraphicsPipelineCreateInfo, basePipelineIndex));
alignmentData.push_back(offsetof(VkPipelineCacheCreateInfo, sType));
alignmentData.push_back(FIELD_SIZEOF(VkPipelineCacheCreateInfo, sType));
alignmentData.push_back(offsetof(VkPipelineCacheCreateInfo, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkPipelineCacheCreateInfo, pNext));
alignmentData.push_back(offsetof(VkPipelineCacheCreateInfo, flags));
alignmentData.push_back(FIELD_SIZEOF(VkPipelineCacheCreateInfo, flags));
alignmentData.push_back(offsetof(VkPipelineCacheCreateInfo, initialDataSize));
alignmentData.push_back(FIELD_SIZEOF(VkPipelineCacheCreateInfo, initialDataSize));
alignmentData.push_back(offsetof(VkPipelineCacheCreateInfo, pInitialData));
alignmentData.push_back(FIELD_SIZEOF(VkPipelineCacheCreateInfo, pInitialData));
alignmentData.push_back(offsetof(VkPipelineCacheHeaderVersionOne, headerSize));
alignmentData.push_back(FIELD_SIZEOF(VkPipelineCacheHeaderVersionOne, headerSize));
alignmentData.push_back(offsetof(VkPipelineCacheHeaderVersionOne, headerVersion));
alignmentData.push_back(FIELD_SIZEOF(VkPipelineCacheHeaderVersionOne, headerVersion));
alignmentData.push_back(offsetof(VkPipelineCacheHeaderVersionOne, vendorID));
alignmentData.push_back(FIELD_SIZEOF(VkPipelineCacheHeaderVersionOne, vendorID));
alignmentData.push_back(offsetof(VkPipelineCacheHeaderVersionOne, deviceID));
alignmentData.push_back(FIELD_SIZEOF(VkPipelineCacheHeaderVersionOne, deviceID));
alignmentData.push_back(offsetof(VkPipelineCacheHeaderVersionOne, pipelineCacheUUID));
alignmentData.push_back(FIELD_SIZEOF(VkPipelineCacheHeaderVersionOne, pipelineCacheUUID));
alignmentData.push_back(offsetof(VkPushConstantRange, stageFlags));
alignmentData.push_back(FIELD_SIZEOF(VkPushConstantRange, stageFlags));
alignmentData.push_back(offsetof(VkPushConstantRange, offset));
alignmentData.push_back(FIELD_SIZEOF(VkPushConstantRange, offset));
alignmentData.push_back(offsetof(VkPushConstantRange, size));
alignmentData.push_back(FIELD_SIZEOF(VkPushConstantRange, size));
alignmentData.push_back(offsetof(VkPipelineLayoutCreateInfo, sType));
alignmentData.push_back(FIELD_SIZEOF(VkPipelineLayoutCreateInfo, sType));
alignmentData.push_back(offsetof(VkPipelineLayoutCreateInfo, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkPipelineLayoutCreateInfo, pNext));
alignmentData.push_back(offsetof(VkPipelineLayoutCreateInfo, flags));
alignmentData.push_back(FIELD_SIZEOF(VkPipelineLayoutCreateInfo, flags));
alignmentData.push_back(offsetof(VkPipelineLayoutCreateInfo, setLayoutCount));
alignmentData.push_back(FIELD_SIZEOF(VkPipelineLayoutCreateInfo, setLayoutCount));
alignmentData.push_back(offsetof(VkPipelineLayoutCreateInfo, pSetLayouts));
alignmentData.push_back(FIELD_SIZEOF(VkPipelineLayoutCreateInfo, pSetLayouts));
alignmentData.push_back(offsetof(VkPipelineLayoutCreateInfo, pushConstantRangeCount));
alignmentData.push_back(FIELD_SIZEOF(VkPipelineLayoutCreateInfo, pushConstantRangeCount));
alignmentData.push_back(offsetof(VkPipelineLayoutCreateInfo, pPushConstantRanges));
alignmentData.push_back(FIELD_SIZEOF(VkPipelineLayoutCreateInfo, pPushConstantRanges));
alignmentData.push_back(offsetof(VkSamplerCreateInfo, sType));
alignmentData.push_back(FIELD_SIZEOF(VkSamplerCreateInfo, sType));
alignmentData.push_back(offsetof(VkSamplerCreateInfo, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkSamplerCreateInfo, pNext));
alignmentData.push_back(offsetof(VkSamplerCreateInfo, flags));
alignmentData.push_back(FIELD_SIZEOF(VkSamplerCreateInfo, flags));
alignmentData.push_back(offsetof(VkSamplerCreateInfo, magFilter));
alignmentData.push_back(FIELD_SIZEOF(VkSamplerCreateInfo, magFilter));
alignmentData.push_back(offsetof(VkSamplerCreateInfo, minFilter));
alignmentData.push_back(FIELD_SIZEOF(VkSamplerCreateInfo, minFilter));
alignmentData.push_back(offsetof(VkSamplerCreateInfo, mipmapMode));
alignmentData.push_back(FIELD_SIZEOF(VkSamplerCreateInfo, mipmapMode));
alignmentData.push_back(offsetof(VkSamplerCreateInfo, addressModeU));
alignmentData.push_back(FIELD_SIZEOF(VkSamplerCreateInfo, addressModeU));
alignmentData.push_back(offsetof(VkSamplerCreateInfo, addressModeV));
alignmentData.push_back(FIELD_SIZEOF(VkSamplerCreateInfo, addressModeV));
alignmentData.push_back(offsetof(VkSamplerCreateInfo, addressModeW));
alignmentData.push_back(FIELD_SIZEOF(VkSamplerCreateInfo, addressModeW));
alignmentData.push_back(offsetof(VkSamplerCreateInfo, mipLodBias));
alignmentData.push_back(FIELD_SIZEOF(VkSamplerCreateInfo, mipLodBias));
alignmentData.push_back(offsetof(VkSamplerCreateInfo, anisotropyEnable));
alignmentData.push_back(FIELD_SIZEOF(VkSamplerCreateInfo, anisotropyEnable));
alignmentData.push_back(offsetof(VkSamplerCreateInfo, maxAnisotropy));
alignmentData.push_back(FIELD_SIZEOF(VkSamplerCreateInfo, maxAnisotropy));
alignmentData.push_back(offsetof(VkSamplerCreateInfo, compareEnable));
alignmentData.push_back(FIELD_SIZEOF(VkSamplerCreateInfo, compareEnable));
alignmentData.push_back(offsetof(VkSamplerCreateInfo, compareOp));
alignmentData.push_back(FIELD_SIZEOF(VkSamplerCreateInfo, compareOp));
alignmentData.push_back(offsetof(VkSamplerCreateInfo, minLod));
alignmentData.push_back(FIELD_SIZEOF(VkSamplerCreateInfo, minLod));
alignmentData.push_back(offsetof(VkSamplerCreateInfo, maxLod));
alignmentData.push_back(FIELD_SIZEOF(VkSamplerCreateInfo, maxLod));
alignmentData.push_back(offsetof(VkSamplerCreateInfo, borderColor));
alignmentData.push_back(FIELD_SIZEOF(VkSamplerCreateInfo, borderColor));
alignmentData.push_back(offsetof(VkSamplerCreateInfo, unnormalizedCoordinates));
alignmentData.push_back(FIELD_SIZEOF(VkSamplerCreateInfo, unnormalizedCoordinates));
alignmentData.push_back(offsetof(VkCommandPoolCreateInfo, sType));
alignmentData.push_back(FIELD_SIZEOF(VkCommandPoolCreateInfo, sType));
alignmentData.push_back(offsetof(VkCommandPoolCreateInfo, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkCommandPoolCreateInfo, pNext));
alignmentData.push_back(offsetof(VkCommandPoolCreateInfo, flags));
alignmentData.push_back(FIELD_SIZEOF(VkCommandPoolCreateInfo, flags));
alignmentData.push_back(offsetof(VkCommandPoolCreateInfo, queueFamilyIndex));
alignmentData.push_back(FIELD_SIZEOF(VkCommandPoolCreateInfo, queueFamilyIndex));
alignmentData.push_back(offsetof(VkCommandBufferAllocateInfo, sType));
alignmentData.push_back(FIELD_SIZEOF(VkCommandBufferAllocateInfo, sType));
alignmentData.push_back(offsetof(VkCommandBufferAllocateInfo, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkCommandBufferAllocateInfo, pNext));
alignmentData.push_back(offsetof(VkCommandBufferAllocateInfo, commandPool));
alignmentData.push_back(FIELD_SIZEOF(VkCommandBufferAllocateInfo, commandPool));
alignmentData.push_back(offsetof(VkCommandBufferAllocateInfo, level));
alignmentData.push_back(FIELD_SIZEOF(VkCommandBufferAllocateInfo, level));
alignmentData.push_back(offsetof(VkCommandBufferAllocateInfo, commandBufferCount));
alignmentData.push_back(FIELD_SIZEOF(VkCommandBufferAllocateInfo, commandBufferCount));
alignmentData.push_back(offsetof(VkCommandBufferInheritanceInfo, sType));
alignmentData.push_back(FIELD_SIZEOF(VkCommandBufferInheritanceInfo, sType));
alignmentData.push_back(offsetof(VkCommandBufferInheritanceInfo, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkCommandBufferInheritanceInfo, pNext));
alignmentData.push_back(offsetof(VkCommandBufferInheritanceInfo, renderPass));
alignmentData.push_back(FIELD_SIZEOF(VkCommandBufferInheritanceInfo, renderPass));
alignmentData.push_back(offsetof(VkCommandBufferInheritanceInfo, subpass));
alignmentData.push_back(FIELD_SIZEOF(VkCommandBufferInheritanceInfo, subpass));
alignmentData.push_back(offsetof(VkCommandBufferInheritanceInfo, framebuffer));
alignmentData.push_back(FIELD_SIZEOF(VkCommandBufferInheritanceInfo, framebuffer));
alignmentData.push_back(offsetof(VkCommandBufferInheritanceInfo, occlusionQueryEnable));
alignmentData.push_back(FIELD_SIZEOF(VkCommandBufferInheritanceInfo, occlusionQueryEnable));
alignmentData.push_back(offsetof(VkCommandBufferInheritanceInfo, queryFlags));
alignmentData.push_back(FIELD_SIZEOF(VkCommandBufferInheritanceInfo, queryFlags));
alignmentData.push_back(offsetof(VkCommandBufferInheritanceInfo, pipelineStatistics));
alignmentData.push_back(FIELD_SIZEOF(VkCommandBufferInheritanceInfo, pipelineStatistics));
alignmentData.push_back(offsetof(VkCommandBufferBeginInfo, sType));
alignmentData.push_back(FIELD_SIZEOF(VkCommandBufferBeginInfo, sType));
alignmentData.push_back(offsetof(VkCommandBufferBeginInfo, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkCommandBufferBeginInfo, pNext));
alignmentData.push_back(offsetof(VkCommandBufferBeginInfo, flags));
alignmentData.push_back(FIELD_SIZEOF(VkCommandBufferBeginInfo, flags));
alignmentData.push_back(offsetof(VkCommandBufferBeginInfo, pInheritanceInfo));
alignmentData.push_back(FIELD_SIZEOF(VkCommandBufferBeginInfo, pInheritanceInfo));
alignmentData.push_back(offsetof(VkRenderPassBeginInfo, sType));
alignmentData.push_back(FIELD_SIZEOF(VkRenderPassBeginInfo, sType));
alignmentData.push_back(offsetof(VkRenderPassBeginInfo, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkRenderPassBeginInfo, pNext));
alignmentData.push_back(offsetof(VkRenderPassBeginInfo, renderPass));
alignmentData.push_back(FIELD_SIZEOF(VkRenderPassBeginInfo, renderPass));
alignmentData.push_back(offsetof(VkRenderPassBeginInfo, framebuffer));
alignmentData.push_back(FIELD_SIZEOF(VkRenderPassBeginInfo, framebuffer));
alignmentData.push_back(offsetof(VkRenderPassBeginInfo, renderArea));
alignmentData.push_back(FIELD_SIZEOF(VkRenderPassBeginInfo, renderArea));
alignmentData.push_back(offsetof(VkRenderPassBeginInfo, clearValueCount));
alignmentData.push_back(FIELD_SIZEOF(VkRenderPassBeginInfo, clearValueCount));
alignmentData.push_back(offsetof(VkRenderPassBeginInfo, pClearValues));
alignmentData.push_back(FIELD_SIZEOF(VkRenderPassBeginInfo, pClearValues));
alignmentData.push_back(offsetof(VkClearDepthStencilValue, depth));
alignmentData.push_back(FIELD_SIZEOF(VkClearDepthStencilValue, depth));
alignmentData.push_back(offsetof(VkClearDepthStencilValue, stencil));
alignmentData.push_back(FIELD_SIZEOF(VkClearDepthStencilValue, stencil));
alignmentData.push_back(offsetof(VkClearAttachment, aspectMask));
alignmentData.push_back(FIELD_SIZEOF(VkClearAttachment, aspectMask));
alignmentData.push_back(offsetof(VkClearAttachment, colorAttachment));
alignmentData.push_back(FIELD_SIZEOF(VkClearAttachment, colorAttachment));
alignmentData.push_back(offsetof(VkClearAttachment, clearValue));
alignmentData.push_back(FIELD_SIZEOF(VkClearAttachment, clearValue));
alignmentData.push_back(offsetof(VkAttachmentDescription, flags));
alignmentData.push_back(FIELD_SIZEOF(VkAttachmentDescription, flags));
alignmentData.push_back(offsetof(VkAttachmentDescription, format));
alignmentData.push_back(FIELD_SIZEOF(VkAttachmentDescription, format));
alignmentData.push_back(offsetof(VkAttachmentDescription, samples));
alignmentData.push_back(FIELD_SIZEOF(VkAttachmentDescription, samples));
alignmentData.push_back(offsetof(VkAttachmentDescription, loadOp));
alignmentData.push_back(FIELD_SIZEOF(VkAttachmentDescription, loadOp));
alignmentData.push_back(offsetof(VkAttachmentDescription, storeOp));
alignmentData.push_back(FIELD_SIZEOF(VkAttachmentDescription, storeOp));
alignmentData.push_back(offsetof(VkAttachmentDescription, stencilLoadOp));
alignmentData.push_back(FIELD_SIZEOF(VkAttachmentDescription, stencilLoadOp));
alignmentData.push_back(offsetof(VkAttachmentDescription, stencilStoreOp));
alignmentData.push_back(FIELD_SIZEOF(VkAttachmentDescription, stencilStoreOp));
alignmentData.push_back(offsetof(VkAttachmentDescription, initialLayout));
alignmentData.push_back(FIELD_SIZEOF(VkAttachmentDescription, initialLayout));
alignmentData.push_back(offsetof(VkAttachmentDescription, finalLayout));
alignmentData.push_back(FIELD_SIZEOF(VkAttachmentDescription, finalLayout));
alignmentData.push_back(offsetof(VkAttachmentReference, attachment));
alignmentData.push_back(FIELD_SIZEOF(VkAttachmentReference, attachment));
alignmentData.push_back(offsetof(VkAttachmentReference, layout));
alignmentData.push_back(FIELD_SIZEOF(VkAttachmentReference, layout));
alignmentData.push_back(offsetof(VkSubpassDescription, flags));
alignmentData.push_back(FIELD_SIZEOF(VkSubpassDescription, flags));
alignmentData.push_back(offsetof(VkSubpassDescription, pipelineBindPoint));
alignmentData.push_back(FIELD_SIZEOF(VkSubpassDescription, pipelineBindPoint));
alignmentData.push_back(offsetof(VkSubpassDescription, inputAttachmentCount));
alignmentData.push_back(FIELD_SIZEOF(VkSubpassDescription, inputAttachmentCount));
alignmentData.push_back(offsetof(VkSubpassDescription, pInputAttachments));
alignmentData.push_back(FIELD_SIZEOF(VkSubpassDescription, pInputAttachments));
alignmentData.push_back(offsetof(VkSubpassDescription, colorAttachmentCount));
alignmentData.push_back(FIELD_SIZEOF(VkSubpassDescription, colorAttachmentCount));
alignmentData.push_back(offsetof(VkSubpassDescription, pColorAttachments));
alignmentData.push_back(FIELD_SIZEOF(VkSubpassDescription, pColorAttachments));
alignmentData.push_back(offsetof(VkSubpassDescription, pResolveAttachments));
alignmentData.push_back(FIELD_SIZEOF(VkSubpassDescription, pResolveAttachments));
alignmentData.push_back(offsetof(VkSubpassDescription, pDepthStencilAttachment));
alignmentData.push_back(FIELD_SIZEOF(VkSubpassDescription, pDepthStencilAttachment));
alignmentData.push_back(offsetof(VkSubpassDescription, preserveAttachmentCount));
alignmentData.push_back(FIELD_SIZEOF(VkSubpassDescription, preserveAttachmentCount));
alignmentData.push_back(offsetof(VkSubpassDescription, pPreserveAttachments));
alignmentData.push_back(FIELD_SIZEOF(VkSubpassDescription, pPreserveAttachments));
alignmentData.push_back(offsetof(VkSubpassDependency, srcSubpass));
alignmentData.push_back(FIELD_SIZEOF(VkSubpassDependency, srcSubpass));
alignmentData.push_back(offsetof(VkSubpassDependency, dstSubpass));
alignmentData.push_back(FIELD_SIZEOF(VkSubpassDependency, dstSubpass));
alignmentData.push_back(offsetof(VkSubpassDependency, srcStageMask));
alignmentData.push_back(FIELD_SIZEOF(VkSubpassDependency, srcStageMask));
alignmentData.push_back(offsetof(VkSubpassDependency, dstStageMask));
alignmentData.push_back(FIELD_SIZEOF(VkSubpassDependency, dstStageMask));
alignmentData.push_back(offsetof(VkSubpassDependency, srcAccessMask));
alignmentData.push_back(FIELD_SIZEOF(VkSubpassDependency, srcAccessMask));
alignmentData.push_back(offsetof(VkSubpassDependency, dstAccessMask));
alignmentData.push_back(FIELD_SIZEOF(VkSubpassDependency, dstAccessMask));
alignmentData.push_back(offsetof(VkSubpassDependency, dependencyFlags));
alignmentData.push_back(FIELD_SIZEOF(VkSubpassDependency, dependencyFlags));
alignmentData.push_back(offsetof(VkRenderPassCreateInfo, sType));
alignmentData.push_back(FIELD_SIZEOF(VkRenderPassCreateInfo, sType));
alignmentData.push_back(offsetof(VkRenderPassCreateInfo, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkRenderPassCreateInfo, pNext));
alignmentData.push_back(offsetof(VkRenderPassCreateInfo, flags));
alignmentData.push_back(FIELD_SIZEOF(VkRenderPassCreateInfo, flags));
alignmentData.push_back(offsetof(VkRenderPassCreateInfo, attachmentCount));
alignmentData.push_back(FIELD_SIZEOF(VkRenderPassCreateInfo, attachmentCount));
alignmentData.push_back(offsetof(VkRenderPassCreateInfo, pAttachments));
alignmentData.push_back(FIELD_SIZEOF(VkRenderPassCreateInfo, pAttachments));
alignmentData.push_back(offsetof(VkRenderPassCreateInfo, subpassCount));
alignmentData.push_back(FIELD_SIZEOF(VkRenderPassCreateInfo, subpassCount));
alignmentData.push_back(offsetof(VkRenderPassCreateInfo, pSubpasses));
alignmentData.push_back(FIELD_SIZEOF(VkRenderPassCreateInfo, pSubpasses));
alignmentData.push_back(offsetof(VkRenderPassCreateInfo, dependencyCount));
alignmentData.push_back(FIELD_SIZEOF(VkRenderPassCreateInfo, dependencyCount));
alignmentData.push_back(offsetof(VkRenderPassCreateInfo, pDependencies));
alignmentData.push_back(FIELD_SIZEOF(VkRenderPassCreateInfo, pDependencies));
alignmentData.push_back(offsetof(VkEventCreateInfo, sType));
alignmentData.push_back(FIELD_SIZEOF(VkEventCreateInfo, sType));
alignmentData.push_back(offsetof(VkEventCreateInfo, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkEventCreateInfo, pNext));
alignmentData.push_back(offsetof(VkEventCreateInfo, flags));
alignmentData.push_back(FIELD_SIZEOF(VkEventCreateInfo, flags));
alignmentData.push_back(offsetof(VkFenceCreateInfo, sType));
alignmentData.push_back(FIELD_SIZEOF(VkFenceCreateInfo, sType));
alignmentData.push_back(offsetof(VkFenceCreateInfo, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkFenceCreateInfo, pNext));
alignmentData.push_back(offsetof(VkFenceCreateInfo, flags));
alignmentData.push_back(FIELD_SIZEOF(VkFenceCreateInfo, flags));
alignmentData.push_back(offsetof(VkPhysicalDeviceFeatures, robustBufferAccess));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceFeatures, robustBufferAccess));
alignmentData.push_back(offsetof(VkPhysicalDeviceFeatures, fullDrawIndexUint32));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceFeatures, fullDrawIndexUint32));
alignmentData.push_back(offsetof(VkPhysicalDeviceFeatures, imageCubeArray));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceFeatures, imageCubeArray));
alignmentData.push_back(offsetof(VkPhysicalDeviceFeatures, independentBlend));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceFeatures, independentBlend));
alignmentData.push_back(offsetof(VkPhysicalDeviceFeatures, geometryShader));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceFeatures, geometryShader));
alignmentData.push_back(offsetof(VkPhysicalDeviceFeatures, tessellationShader));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceFeatures, tessellationShader));
alignmentData.push_back(offsetof(VkPhysicalDeviceFeatures, sampleRateShading));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceFeatures, sampleRateShading));
alignmentData.push_back(offsetof(VkPhysicalDeviceFeatures, dualSrcBlend));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceFeatures, dualSrcBlend));
alignmentData.push_back(offsetof(VkPhysicalDeviceFeatures, logicOp));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceFeatures, logicOp));
alignmentData.push_back(offsetof(VkPhysicalDeviceFeatures, multiDrawIndirect));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceFeatures, multiDrawIndirect));
alignmentData.push_back(offsetof(VkPhysicalDeviceFeatures, drawIndirectFirstInstance));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceFeatures, drawIndirectFirstInstance));
alignmentData.push_back(offsetof(VkPhysicalDeviceFeatures, depthClamp));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceFeatures, depthClamp));
alignmentData.push_back(offsetof(VkPhysicalDeviceFeatures, depthBiasClamp));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceFeatures, depthBiasClamp));
alignmentData.push_back(offsetof(VkPhysicalDeviceFeatures, fillModeNonSolid));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceFeatures, fillModeNonSolid));
alignmentData.push_back(offsetof(VkPhysicalDeviceFeatures, depthBounds));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceFeatures, depthBounds));
alignmentData.push_back(offsetof(VkPhysicalDeviceFeatures, wideLines));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceFeatures, wideLines));
alignmentData.push_back(offsetof(VkPhysicalDeviceFeatures, largePoints));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceFeatures, largePoints));
alignmentData.push_back(offsetof(VkPhysicalDeviceFeatures, alphaToOne));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceFeatures, alphaToOne));
alignmentData.push_back(offsetof(VkPhysicalDeviceFeatures, multiViewport));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceFeatures, multiViewport));
alignmentData.push_back(offsetof(VkPhysicalDeviceFeatures, samplerAnisotropy));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceFeatures, samplerAnisotropy));
alignmentData.push_back(offsetof(VkPhysicalDeviceFeatures, textureCompressionETC2));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceFeatures, textureCompressionETC2));
alignmentData.push_back(offsetof(VkPhysicalDeviceFeatures, textureCompressionASTC_LDR));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceFeatures, textureCompressionASTC_LDR));
alignmentData.push_back(offsetof(VkPhysicalDeviceFeatures, textureCompressionBC));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceFeatures, textureCompressionBC));
alignmentData.push_back(offsetof(VkPhysicalDeviceFeatures, occlusionQueryPrecise));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceFeatures, occlusionQueryPrecise));
alignmentData.push_back(offsetof(VkPhysicalDeviceFeatures, pipelineStatisticsQuery));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceFeatures, pipelineStatisticsQuery));
alignmentData.push_back(offsetof(VkPhysicalDeviceFeatures, vertexPipelineStoresAndAtomics));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceFeatures, vertexPipelineStoresAndAtomics));
alignmentData.push_back(offsetof(VkPhysicalDeviceFeatures, fragmentStoresAndAtomics));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceFeatures, fragmentStoresAndAtomics));
alignmentData.push_back(offsetof(VkPhysicalDeviceFeatures, shaderTessellationAndGeometryPointSize));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceFeatures, shaderTessellationAndGeometryPointSize));
alignmentData.push_back(offsetof(VkPhysicalDeviceFeatures, shaderImageGatherExtended));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceFeatures, shaderImageGatherExtended));
alignmentData.push_back(offsetof(VkPhysicalDeviceFeatures, shaderStorageImageExtendedFormats));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceFeatures, shaderStorageImageExtendedFormats));
alignmentData.push_back(offsetof(VkPhysicalDeviceFeatures, shaderStorageImageMultisample));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceFeatures, shaderStorageImageMultisample));
alignmentData.push_back(offsetof(VkPhysicalDeviceFeatures, shaderStorageImageReadWithoutFormat));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceFeatures, shaderStorageImageReadWithoutFormat));
alignmentData.push_back(offsetof(VkPhysicalDeviceFeatures, shaderStorageImageWriteWithoutFormat));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceFeatures, shaderStorageImageWriteWithoutFormat));
alignmentData.push_back(offsetof(VkPhysicalDeviceFeatures, shaderUniformBufferArrayDynamicIndexing));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceFeatures, shaderUniformBufferArrayDynamicIndexing));
alignmentData.push_back(offsetof(VkPhysicalDeviceFeatures, shaderSampledImageArrayDynamicIndexing));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceFeatures, shaderSampledImageArrayDynamicIndexing));
alignmentData.push_back(offsetof(VkPhysicalDeviceFeatures, shaderStorageBufferArrayDynamicIndexing));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceFeatures, shaderStorageBufferArrayDynamicIndexing));
alignmentData.push_back(offsetof(VkPhysicalDeviceFeatures, shaderStorageImageArrayDynamicIndexing));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceFeatures, shaderStorageImageArrayDynamicIndexing));
alignmentData.push_back(offsetof(VkPhysicalDeviceFeatures, shaderClipDistance));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceFeatures, shaderClipDistance));
alignmentData.push_back(offsetof(VkPhysicalDeviceFeatures, shaderCullDistance));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceFeatures, shaderCullDistance));
alignmentData.push_back(offsetof(VkPhysicalDeviceFeatures, shaderFloat64));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceFeatures, shaderFloat64));
alignmentData.push_back(offsetof(VkPhysicalDeviceFeatures, shaderInt64));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceFeatures, shaderInt64));
alignmentData.push_back(offsetof(VkPhysicalDeviceFeatures, shaderInt16));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceFeatures, shaderInt16));
alignmentData.push_back(offsetof(VkPhysicalDeviceFeatures, shaderResourceResidency));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceFeatures, shaderResourceResidency));
alignmentData.push_back(offsetof(VkPhysicalDeviceFeatures, shaderResourceMinLod));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceFeatures, shaderResourceMinLod));
alignmentData.push_back(offsetof(VkPhysicalDeviceFeatures, sparseBinding));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceFeatures, sparseBinding));
alignmentData.push_back(offsetof(VkPhysicalDeviceFeatures, sparseResidencyBuffer));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceFeatures, sparseResidencyBuffer));
alignmentData.push_back(offsetof(VkPhysicalDeviceFeatures, sparseResidencyImage2D));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceFeatures, sparseResidencyImage2D));
alignmentData.push_back(offsetof(VkPhysicalDeviceFeatures, sparseResidencyImage3D));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceFeatures, sparseResidencyImage3D));
alignmentData.push_back(offsetof(VkPhysicalDeviceFeatures, sparseResidency2Samples));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceFeatures, sparseResidency2Samples));
alignmentData.push_back(offsetof(VkPhysicalDeviceFeatures, sparseResidency4Samples));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceFeatures, sparseResidency4Samples));
alignmentData.push_back(offsetof(VkPhysicalDeviceFeatures, sparseResidency8Samples));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceFeatures, sparseResidency8Samples));
alignmentData.push_back(offsetof(VkPhysicalDeviceFeatures, sparseResidency16Samples));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceFeatures, sparseResidency16Samples));
alignmentData.push_back(offsetof(VkPhysicalDeviceFeatures, sparseResidencyAliased));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceFeatures, sparseResidencyAliased));
alignmentData.push_back(offsetof(VkPhysicalDeviceFeatures, variableMultisampleRate));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceFeatures, variableMultisampleRate));
alignmentData.push_back(offsetof(VkPhysicalDeviceFeatures, inheritedQueries));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceFeatures, inheritedQueries));
alignmentData.push_back(offsetof(VkPhysicalDeviceSparseProperties, residencyStandard2DBlockShape));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceSparseProperties, residencyStandard2DBlockShape));
alignmentData.push_back(offsetof(VkPhysicalDeviceSparseProperties, residencyStandard2DMultisampleBlockShape));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceSparseProperties, residencyStandard2DMultisampleBlockShape));
alignmentData.push_back(offsetof(VkPhysicalDeviceSparseProperties, residencyStandard3DBlockShape));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceSparseProperties, residencyStandard3DBlockShape));
alignmentData.push_back(offsetof(VkPhysicalDeviceSparseProperties, residencyAlignedMipSize));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceSparseProperties, residencyAlignedMipSize));
alignmentData.push_back(offsetof(VkPhysicalDeviceSparseProperties, residencyNonResidentStrict));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceSparseProperties, residencyNonResidentStrict));
alignmentData.push_back(offsetof(VkPhysicalDeviceLimits, maxImageDimension1D));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceLimits, maxImageDimension1D));
alignmentData.push_back(offsetof(VkPhysicalDeviceLimits, maxImageDimension2D));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceLimits, maxImageDimension2D));
alignmentData.push_back(offsetof(VkPhysicalDeviceLimits, maxImageDimension3D));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceLimits, maxImageDimension3D));
alignmentData.push_back(offsetof(VkPhysicalDeviceLimits, maxImageDimensionCube));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceLimits, maxImageDimensionCube));
alignmentData.push_back(offsetof(VkPhysicalDeviceLimits, maxImageArrayLayers));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceLimits, maxImageArrayLayers));
alignmentData.push_back(offsetof(VkPhysicalDeviceLimits, maxTexelBufferElements));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceLimits, maxTexelBufferElements));
alignmentData.push_back(offsetof(VkPhysicalDeviceLimits, maxUniformBufferRange));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceLimits, maxUniformBufferRange));
alignmentData.push_back(offsetof(VkPhysicalDeviceLimits, maxStorageBufferRange));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceLimits, maxStorageBufferRange));
alignmentData.push_back(offsetof(VkPhysicalDeviceLimits, maxPushConstantsSize));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceLimits, maxPushConstantsSize));
alignmentData.push_back(offsetof(VkPhysicalDeviceLimits, maxMemoryAllocationCount));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceLimits, maxMemoryAllocationCount));
alignmentData.push_back(offsetof(VkPhysicalDeviceLimits, maxSamplerAllocationCount));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceLimits, maxSamplerAllocationCount));
alignmentData.push_back(offsetof(VkPhysicalDeviceLimits, bufferImageGranularity));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceLimits, bufferImageGranularity));
alignmentData.push_back(offsetof(VkPhysicalDeviceLimits, sparseAddressSpaceSize));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceLimits, sparseAddressSpaceSize));
alignmentData.push_back(offsetof(VkPhysicalDeviceLimits, maxBoundDescriptorSets));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceLimits, maxBoundDescriptorSets));
alignmentData.push_back(offsetof(VkPhysicalDeviceLimits, maxPerStageDescriptorSamplers));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceLimits, maxPerStageDescriptorSamplers));
alignmentData.push_back(offsetof(VkPhysicalDeviceLimits, maxPerStageDescriptorUniformBuffers));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceLimits, maxPerStageDescriptorUniformBuffers));
alignmentData.push_back(offsetof(VkPhysicalDeviceLimits, maxPerStageDescriptorStorageBuffers));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceLimits, maxPerStageDescriptorStorageBuffers));
alignmentData.push_back(offsetof(VkPhysicalDeviceLimits, maxPerStageDescriptorSampledImages));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceLimits, maxPerStageDescriptorSampledImages));
alignmentData.push_back(offsetof(VkPhysicalDeviceLimits, maxPerStageDescriptorStorageImages));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceLimits, maxPerStageDescriptorStorageImages));
alignmentData.push_back(offsetof(VkPhysicalDeviceLimits, maxPerStageDescriptorInputAttachments));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceLimits, maxPerStageDescriptorInputAttachments));
alignmentData.push_back(offsetof(VkPhysicalDeviceLimits, maxPerStageResources));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceLimits, maxPerStageResources));
alignmentData.push_back(offsetof(VkPhysicalDeviceLimits, maxDescriptorSetSamplers));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceLimits, maxDescriptorSetSamplers));
alignmentData.push_back(offsetof(VkPhysicalDeviceLimits, maxDescriptorSetUniformBuffers));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceLimits, maxDescriptorSetUniformBuffers));
alignmentData.push_back(offsetof(VkPhysicalDeviceLimits, maxDescriptorSetUniformBuffersDynamic));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceLimits, maxDescriptorSetUniformBuffersDynamic));
alignmentData.push_back(offsetof(VkPhysicalDeviceLimits, maxDescriptorSetStorageBuffers));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceLimits, maxDescriptorSetStorageBuffers));
alignmentData.push_back(offsetof(VkPhysicalDeviceLimits, maxDescriptorSetStorageBuffersDynamic));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceLimits, maxDescriptorSetStorageBuffersDynamic));
alignmentData.push_back(offsetof(VkPhysicalDeviceLimits, maxDescriptorSetSampledImages));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceLimits, maxDescriptorSetSampledImages));
alignmentData.push_back(offsetof(VkPhysicalDeviceLimits, maxDescriptorSetStorageImages));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceLimits, maxDescriptorSetStorageImages));
alignmentData.push_back(offsetof(VkPhysicalDeviceLimits, maxDescriptorSetInputAttachments));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceLimits, maxDescriptorSetInputAttachments));
alignmentData.push_back(offsetof(VkPhysicalDeviceLimits, maxVertexInputAttributes));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceLimits, maxVertexInputAttributes));
alignmentData.push_back(offsetof(VkPhysicalDeviceLimits, maxVertexInputBindings));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceLimits, maxVertexInputBindings));
alignmentData.push_back(offsetof(VkPhysicalDeviceLimits, maxVertexInputAttributeOffset));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceLimits, maxVertexInputAttributeOffset));
alignmentData.push_back(offsetof(VkPhysicalDeviceLimits, maxVertexInputBindingStride));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceLimits, maxVertexInputBindingStride));
alignmentData.push_back(offsetof(VkPhysicalDeviceLimits, maxVertexOutputComponents));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceLimits, maxVertexOutputComponents));
alignmentData.push_back(offsetof(VkPhysicalDeviceLimits, maxTessellationGenerationLevel));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceLimits, maxTessellationGenerationLevel));
alignmentData.push_back(offsetof(VkPhysicalDeviceLimits, maxTessellationPatchSize));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceLimits, maxTessellationPatchSize));
alignmentData.push_back(offsetof(VkPhysicalDeviceLimits, maxTessellationControlPerVertexInputComponents));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceLimits, maxTessellationControlPerVertexInputComponents));
alignmentData.push_back(offsetof(VkPhysicalDeviceLimits, maxTessellationControlPerVertexOutputComponents));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceLimits, maxTessellationControlPerVertexOutputComponents));
alignmentData.push_back(offsetof(VkPhysicalDeviceLimits, maxTessellationControlPerPatchOutputComponents));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceLimits, maxTessellationControlPerPatchOutputComponents));
alignmentData.push_back(offsetof(VkPhysicalDeviceLimits, maxTessellationControlTotalOutputComponents));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceLimits, maxTessellationControlTotalOutputComponents));
alignmentData.push_back(offsetof(VkPhysicalDeviceLimits, maxTessellationEvaluationInputComponents));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceLimits, maxTessellationEvaluationInputComponents));
alignmentData.push_back(offsetof(VkPhysicalDeviceLimits, maxTessellationEvaluationOutputComponents));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceLimits, maxTessellationEvaluationOutputComponents));
alignmentData.push_back(offsetof(VkPhysicalDeviceLimits, maxGeometryShaderInvocations));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceLimits, maxGeometryShaderInvocations));
alignmentData.push_back(offsetof(VkPhysicalDeviceLimits, maxGeometryInputComponents));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceLimits, maxGeometryInputComponents));
alignmentData.push_back(offsetof(VkPhysicalDeviceLimits, maxGeometryOutputComponents));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceLimits, maxGeometryOutputComponents));
alignmentData.push_back(offsetof(VkPhysicalDeviceLimits, maxGeometryOutputVertices));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceLimits, maxGeometryOutputVertices));
alignmentData.push_back(offsetof(VkPhysicalDeviceLimits, maxGeometryTotalOutputComponents));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceLimits, maxGeometryTotalOutputComponents));
alignmentData.push_back(offsetof(VkPhysicalDeviceLimits, maxFragmentInputComponents));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceLimits, maxFragmentInputComponents));
alignmentData.push_back(offsetof(VkPhysicalDeviceLimits, maxFragmentOutputAttachments));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceLimits, maxFragmentOutputAttachments));
alignmentData.push_back(offsetof(VkPhysicalDeviceLimits, maxFragmentDualSrcAttachments));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceLimits, maxFragmentDualSrcAttachments));
alignmentData.push_back(offsetof(VkPhysicalDeviceLimits, maxFragmentCombinedOutputResources));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceLimits, maxFragmentCombinedOutputResources));
alignmentData.push_back(offsetof(VkPhysicalDeviceLimits, maxComputeSharedMemorySize));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceLimits, maxComputeSharedMemorySize));
alignmentData.push_back(offsetof(VkPhysicalDeviceLimits, maxComputeWorkGroupCount));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceLimits, maxComputeWorkGroupCount));
alignmentData.push_back(offsetof(VkPhysicalDeviceLimits, maxComputeWorkGroupInvocations));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceLimits, maxComputeWorkGroupInvocations));
alignmentData.push_back(offsetof(VkPhysicalDeviceLimits, maxComputeWorkGroupSize));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceLimits, maxComputeWorkGroupSize));
alignmentData.push_back(offsetof(VkPhysicalDeviceLimits, subPixelPrecisionBits));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceLimits, subPixelPrecisionBits));
alignmentData.push_back(offsetof(VkPhysicalDeviceLimits, subTexelPrecisionBits));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceLimits, subTexelPrecisionBits));
alignmentData.push_back(offsetof(VkPhysicalDeviceLimits, mipmapPrecisionBits));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceLimits, mipmapPrecisionBits));
alignmentData.push_back(offsetof(VkPhysicalDeviceLimits, maxDrawIndexedIndexValue));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceLimits, maxDrawIndexedIndexValue));
alignmentData.push_back(offsetof(VkPhysicalDeviceLimits, maxDrawIndirectCount));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceLimits, maxDrawIndirectCount));
alignmentData.push_back(offsetof(VkPhysicalDeviceLimits, maxSamplerLodBias));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceLimits, maxSamplerLodBias));
alignmentData.push_back(offsetof(VkPhysicalDeviceLimits, maxSamplerAnisotropy));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceLimits, maxSamplerAnisotropy));
alignmentData.push_back(offsetof(VkPhysicalDeviceLimits, maxViewports));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceLimits, maxViewports));
alignmentData.push_back(offsetof(VkPhysicalDeviceLimits, maxViewportDimensions));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceLimits, maxViewportDimensions));
alignmentData.push_back(offsetof(VkPhysicalDeviceLimits, viewportBoundsRange));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceLimits, viewportBoundsRange));
alignmentData.push_back(offsetof(VkPhysicalDeviceLimits, viewportSubPixelBits));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceLimits, viewportSubPixelBits));
alignmentData.push_back(offsetof(VkPhysicalDeviceLimits, minMemoryMapAlignment));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceLimits, minMemoryMapAlignment));
alignmentData.push_back(offsetof(VkPhysicalDeviceLimits, minTexelBufferOffsetAlignment));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceLimits, minTexelBufferOffsetAlignment));
alignmentData.push_back(offsetof(VkPhysicalDeviceLimits, minUniformBufferOffsetAlignment));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceLimits, minUniformBufferOffsetAlignment));
alignmentData.push_back(offsetof(VkPhysicalDeviceLimits, minStorageBufferOffsetAlignment));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceLimits, minStorageBufferOffsetAlignment));
alignmentData.push_back(offsetof(VkPhysicalDeviceLimits, minTexelOffset));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceLimits, minTexelOffset));
alignmentData.push_back(offsetof(VkPhysicalDeviceLimits, maxTexelOffset));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceLimits, maxTexelOffset));
alignmentData.push_back(offsetof(VkPhysicalDeviceLimits, minTexelGatherOffset));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceLimits, minTexelGatherOffset));
alignmentData.push_back(offsetof(VkPhysicalDeviceLimits, maxTexelGatherOffset));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceLimits, maxTexelGatherOffset));
alignmentData.push_back(offsetof(VkPhysicalDeviceLimits, minInterpolationOffset));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceLimits, minInterpolationOffset));
alignmentData.push_back(offsetof(VkPhysicalDeviceLimits, maxInterpolationOffset));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceLimits, maxInterpolationOffset));
alignmentData.push_back(offsetof(VkPhysicalDeviceLimits, subPixelInterpolationOffsetBits));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceLimits, subPixelInterpolationOffsetBits));
alignmentData.push_back(offsetof(VkPhysicalDeviceLimits, maxFramebufferWidth));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceLimits, maxFramebufferWidth));
alignmentData.push_back(offsetof(VkPhysicalDeviceLimits, maxFramebufferHeight));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceLimits, maxFramebufferHeight));
alignmentData.push_back(offsetof(VkPhysicalDeviceLimits, maxFramebufferLayers));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceLimits, maxFramebufferLayers));
alignmentData.push_back(offsetof(VkPhysicalDeviceLimits, framebufferColorSampleCounts));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceLimits, framebufferColorSampleCounts));
alignmentData.push_back(offsetof(VkPhysicalDeviceLimits, framebufferDepthSampleCounts));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceLimits, framebufferDepthSampleCounts));
alignmentData.push_back(offsetof(VkPhysicalDeviceLimits, framebufferStencilSampleCounts));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceLimits, framebufferStencilSampleCounts));
alignmentData.push_back(offsetof(VkPhysicalDeviceLimits, framebufferNoAttachmentsSampleCounts));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceLimits, framebufferNoAttachmentsSampleCounts));
alignmentData.push_back(offsetof(VkPhysicalDeviceLimits, maxColorAttachments));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceLimits, maxColorAttachments));
alignmentData.push_back(offsetof(VkPhysicalDeviceLimits, sampledImageColorSampleCounts));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceLimits, sampledImageColorSampleCounts));
alignmentData.push_back(offsetof(VkPhysicalDeviceLimits, sampledImageIntegerSampleCounts));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceLimits, sampledImageIntegerSampleCounts));
alignmentData.push_back(offsetof(VkPhysicalDeviceLimits, sampledImageDepthSampleCounts));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceLimits, sampledImageDepthSampleCounts));
alignmentData.push_back(offsetof(VkPhysicalDeviceLimits, sampledImageStencilSampleCounts));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceLimits, sampledImageStencilSampleCounts));
alignmentData.push_back(offsetof(VkPhysicalDeviceLimits, storageImageSampleCounts));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceLimits, storageImageSampleCounts));
alignmentData.push_back(offsetof(VkPhysicalDeviceLimits, maxSampleMaskWords));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceLimits, maxSampleMaskWords));
alignmentData.push_back(offsetof(VkPhysicalDeviceLimits, timestampComputeAndGraphics));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceLimits, timestampComputeAndGraphics));
alignmentData.push_back(offsetof(VkPhysicalDeviceLimits, timestampPeriod));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceLimits, timestampPeriod));
alignmentData.push_back(offsetof(VkPhysicalDeviceLimits, maxClipDistances));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceLimits, maxClipDistances));
alignmentData.push_back(offsetof(VkPhysicalDeviceLimits, maxCullDistances));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceLimits, maxCullDistances));
alignmentData.push_back(offsetof(VkPhysicalDeviceLimits, maxCombinedClipAndCullDistances));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceLimits, maxCombinedClipAndCullDistances));
alignmentData.push_back(offsetof(VkPhysicalDeviceLimits, discreteQueuePriorities));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceLimits, discreteQueuePriorities));
alignmentData.push_back(offsetof(VkPhysicalDeviceLimits, pointSizeRange));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceLimits, pointSizeRange));
alignmentData.push_back(offsetof(VkPhysicalDeviceLimits, lineWidthRange));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceLimits, lineWidthRange));
alignmentData.push_back(offsetof(VkPhysicalDeviceLimits, pointSizeGranularity));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceLimits, pointSizeGranularity));
alignmentData.push_back(offsetof(VkPhysicalDeviceLimits, lineWidthGranularity));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceLimits, lineWidthGranularity));
alignmentData.push_back(offsetof(VkPhysicalDeviceLimits, strictLines));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceLimits, strictLines));
alignmentData.push_back(offsetof(VkPhysicalDeviceLimits, standardSampleLocations));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceLimits, standardSampleLocations));
alignmentData.push_back(offsetof(VkPhysicalDeviceLimits, optimalBufferCopyOffsetAlignment));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceLimits, optimalBufferCopyOffsetAlignment));
alignmentData.push_back(offsetof(VkPhysicalDeviceLimits, optimalBufferCopyRowPitchAlignment));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceLimits, optimalBufferCopyRowPitchAlignment));
alignmentData.push_back(offsetof(VkPhysicalDeviceLimits, nonCoherentAtomSize));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceLimits, nonCoherentAtomSize));
alignmentData.push_back(offsetof(VkSemaphoreCreateInfo, sType));
alignmentData.push_back(FIELD_SIZEOF(VkSemaphoreCreateInfo, sType));
alignmentData.push_back(offsetof(VkSemaphoreCreateInfo, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkSemaphoreCreateInfo, pNext));
alignmentData.push_back(offsetof(VkSemaphoreCreateInfo, flags));
alignmentData.push_back(FIELD_SIZEOF(VkSemaphoreCreateInfo, flags));
alignmentData.push_back(offsetof(VkQueryPoolCreateInfo, sType));
alignmentData.push_back(FIELD_SIZEOF(VkQueryPoolCreateInfo, sType));
alignmentData.push_back(offsetof(VkQueryPoolCreateInfo, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkQueryPoolCreateInfo, pNext));
alignmentData.push_back(offsetof(VkQueryPoolCreateInfo, flags));
alignmentData.push_back(FIELD_SIZEOF(VkQueryPoolCreateInfo, flags));
alignmentData.push_back(offsetof(VkQueryPoolCreateInfo, queryType));
alignmentData.push_back(FIELD_SIZEOF(VkQueryPoolCreateInfo, queryType));
alignmentData.push_back(offsetof(VkQueryPoolCreateInfo, queryCount));
alignmentData.push_back(FIELD_SIZEOF(VkQueryPoolCreateInfo, queryCount));
alignmentData.push_back(offsetof(VkQueryPoolCreateInfo, pipelineStatistics));
alignmentData.push_back(FIELD_SIZEOF(VkQueryPoolCreateInfo, pipelineStatistics));
alignmentData.push_back(offsetof(VkFramebufferCreateInfo, sType));
alignmentData.push_back(FIELD_SIZEOF(VkFramebufferCreateInfo, sType));
alignmentData.push_back(offsetof(VkFramebufferCreateInfo, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkFramebufferCreateInfo, pNext));
alignmentData.push_back(offsetof(VkFramebufferCreateInfo, flags));
alignmentData.push_back(FIELD_SIZEOF(VkFramebufferCreateInfo, flags));
alignmentData.push_back(offsetof(VkFramebufferCreateInfo, renderPass));
alignmentData.push_back(FIELD_SIZEOF(VkFramebufferCreateInfo, renderPass));
alignmentData.push_back(offsetof(VkFramebufferCreateInfo, attachmentCount));
alignmentData.push_back(FIELD_SIZEOF(VkFramebufferCreateInfo, attachmentCount));
alignmentData.push_back(offsetof(VkFramebufferCreateInfo, pAttachments));
alignmentData.push_back(FIELD_SIZEOF(VkFramebufferCreateInfo, pAttachments));
alignmentData.push_back(offsetof(VkFramebufferCreateInfo, width));
alignmentData.push_back(FIELD_SIZEOF(VkFramebufferCreateInfo, width));
alignmentData.push_back(offsetof(VkFramebufferCreateInfo, height));
alignmentData.push_back(FIELD_SIZEOF(VkFramebufferCreateInfo, height));
alignmentData.push_back(offsetof(VkFramebufferCreateInfo, layers));
alignmentData.push_back(FIELD_SIZEOF(VkFramebufferCreateInfo, layers));
alignmentData.push_back(offsetof(VkDrawIndirectCommand, vertexCount));
alignmentData.push_back(FIELD_SIZEOF(VkDrawIndirectCommand, vertexCount));
alignmentData.push_back(offsetof(VkDrawIndirectCommand, instanceCount));
alignmentData.push_back(FIELD_SIZEOF(VkDrawIndirectCommand, instanceCount));
alignmentData.push_back(offsetof(VkDrawIndirectCommand, firstVertex));
alignmentData.push_back(FIELD_SIZEOF(VkDrawIndirectCommand, firstVertex));
alignmentData.push_back(offsetof(VkDrawIndirectCommand, firstInstance));
alignmentData.push_back(FIELD_SIZEOF(VkDrawIndirectCommand, firstInstance));
alignmentData.push_back(offsetof(VkDrawIndexedIndirectCommand, indexCount));
alignmentData.push_back(FIELD_SIZEOF(VkDrawIndexedIndirectCommand, indexCount));
alignmentData.push_back(offsetof(VkDrawIndexedIndirectCommand, instanceCount));
alignmentData.push_back(FIELD_SIZEOF(VkDrawIndexedIndirectCommand, instanceCount));
alignmentData.push_back(offsetof(VkDrawIndexedIndirectCommand, firstIndex));
alignmentData.push_back(FIELD_SIZEOF(VkDrawIndexedIndirectCommand, firstIndex));
alignmentData.push_back(offsetof(VkDrawIndexedIndirectCommand, vertexOffset));
alignmentData.push_back(FIELD_SIZEOF(VkDrawIndexedIndirectCommand, vertexOffset));
alignmentData.push_back(offsetof(VkDrawIndexedIndirectCommand, firstInstance));
alignmentData.push_back(FIELD_SIZEOF(VkDrawIndexedIndirectCommand, firstInstance));
alignmentData.push_back(offsetof(VkDispatchIndirectCommand, x));
alignmentData.push_back(FIELD_SIZEOF(VkDispatchIndirectCommand, x));
alignmentData.push_back(offsetof(VkDispatchIndirectCommand, y));
alignmentData.push_back(FIELD_SIZEOF(VkDispatchIndirectCommand, y));
alignmentData.push_back(offsetof(VkDispatchIndirectCommand, z));
alignmentData.push_back(FIELD_SIZEOF(VkDispatchIndirectCommand, z));
alignmentData.push_back(offsetof(VkMultiDrawInfoEXT, firstVertex));
alignmentData.push_back(FIELD_SIZEOF(VkMultiDrawInfoEXT, firstVertex));
alignmentData.push_back(offsetof(VkMultiDrawInfoEXT, vertexCount));
alignmentData.push_back(FIELD_SIZEOF(VkMultiDrawInfoEXT, vertexCount));
alignmentData.push_back(offsetof(VkMultiDrawIndexedInfoEXT, firstIndex));
alignmentData.push_back(FIELD_SIZEOF(VkMultiDrawIndexedInfoEXT, firstIndex));
alignmentData.push_back(offsetof(VkMultiDrawIndexedInfoEXT, indexCount));
alignmentData.push_back(FIELD_SIZEOF(VkMultiDrawIndexedInfoEXT, indexCount));
alignmentData.push_back(offsetof(VkMultiDrawIndexedInfoEXT, vertexOffset));
alignmentData.push_back(FIELD_SIZEOF(VkMultiDrawIndexedInfoEXT, vertexOffset));
alignmentData.push_back(offsetof(VkSubmitInfo, sType));
alignmentData.push_back(FIELD_SIZEOF(VkSubmitInfo, sType));
alignmentData.push_back(offsetof(VkSubmitInfo, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkSubmitInfo, pNext));
alignmentData.push_back(offsetof(VkSubmitInfo, waitSemaphoreCount));
alignmentData.push_back(FIELD_SIZEOF(VkSubmitInfo, waitSemaphoreCount));
alignmentData.push_back(offsetof(VkSubmitInfo, pWaitSemaphores));
alignmentData.push_back(FIELD_SIZEOF(VkSubmitInfo, pWaitSemaphores));
alignmentData.push_back(offsetof(VkSubmitInfo, pWaitDstStageMask));
alignmentData.push_back(FIELD_SIZEOF(VkSubmitInfo, pWaitDstStageMask));
alignmentData.push_back(offsetof(VkSubmitInfo, commandBufferCount));
alignmentData.push_back(FIELD_SIZEOF(VkSubmitInfo, commandBufferCount));
alignmentData.push_back(offsetof(VkSubmitInfo, pCommandBuffers));
alignmentData.push_back(FIELD_SIZEOF(VkSubmitInfo, pCommandBuffers));
alignmentData.push_back(offsetof(VkSubmitInfo, signalSemaphoreCount));
alignmentData.push_back(FIELD_SIZEOF(VkSubmitInfo, signalSemaphoreCount));
alignmentData.push_back(offsetof(VkSubmitInfo, pSignalSemaphores));
alignmentData.push_back(FIELD_SIZEOF(VkSubmitInfo, pSignalSemaphores));
alignmentData.push_back(offsetof(VkDisplayPropertiesKHR, display));
alignmentData.push_back(FIELD_SIZEOF(VkDisplayPropertiesKHR, display));
alignmentData.push_back(offsetof(VkDisplayPropertiesKHR, displayName));
alignmentData.push_back(FIELD_SIZEOF(VkDisplayPropertiesKHR, displayName));
alignmentData.push_back(offsetof(VkDisplayPropertiesKHR, physicalDimensions));
alignmentData.push_back(FIELD_SIZEOF(VkDisplayPropertiesKHR, physicalDimensions));
alignmentData.push_back(offsetof(VkDisplayPropertiesKHR, physicalResolution));
alignmentData.push_back(FIELD_SIZEOF(VkDisplayPropertiesKHR, physicalResolution));
alignmentData.push_back(offsetof(VkDisplayPropertiesKHR, supportedTransforms));
alignmentData.push_back(FIELD_SIZEOF(VkDisplayPropertiesKHR, supportedTransforms));
alignmentData.push_back(offsetof(VkDisplayPropertiesKHR, planeReorderPossible));
alignmentData.push_back(FIELD_SIZEOF(VkDisplayPropertiesKHR, planeReorderPossible));
alignmentData.push_back(offsetof(VkDisplayPropertiesKHR, persistentContent));
alignmentData.push_back(FIELD_SIZEOF(VkDisplayPropertiesKHR, persistentContent));
alignmentData.push_back(offsetof(VkDisplayPlanePropertiesKHR, currentDisplay));
alignmentData.push_back(FIELD_SIZEOF(VkDisplayPlanePropertiesKHR, currentDisplay));
alignmentData.push_back(offsetof(VkDisplayPlanePropertiesKHR, currentStackIndex));
alignmentData.push_back(FIELD_SIZEOF(VkDisplayPlanePropertiesKHR, currentStackIndex));
alignmentData.push_back(offsetof(VkDisplayModeParametersKHR, visibleRegion));
alignmentData.push_back(FIELD_SIZEOF(VkDisplayModeParametersKHR, visibleRegion));
alignmentData.push_back(offsetof(VkDisplayModeParametersKHR, refreshRate));
alignmentData.push_back(FIELD_SIZEOF(VkDisplayModeParametersKHR, refreshRate));
alignmentData.push_back(offsetof(VkDisplayModePropertiesKHR, displayMode));
alignmentData.push_back(FIELD_SIZEOF(VkDisplayModePropertiesKHR, displayMode));
alignmentData.push_back(offsetof(VkDisplayModePropertiesKHR, parameters));
alignmentData.push_back(FIELD_SIZEOF(VkDisplayModePropertiesKHR, parameters));
alignmentData.push_back(offsetof(VkDisplayModeCreateInfoKHR, sType));
alignmentData.push_back(FIELD_SIZEOF(VkDisplayModeCreateInfoKHR, sType));
alignmentData.push_back(offsetof(VkDisplayModeCreateInfoKHR, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkDisplayModeCreateInfoKHR, pNext));
alignmentData.push_back(offsetof(VkDisplayModeCreateInfoKHR, flags));
alignmentData.push_back(FIELD_SIZEOF(VkDisplayModeCreateInfoKHR, flags));
alignmentData.push_back(offsetof(VkDisplayModeCreateInfoKHR, parameters));
alignmentData.push_back(FIELD_SIZEOF(VkDisplayModeCreateInfoKHR, parameters));
alignmentData.push_back(offsetof(VkDisplayPlaneCapabilitiesKHR, supportedAlpha));
alignmentData.push_back(FIELD_SIZEOF(VkDisplayPlaneCapabilitiesKHR, supportedAlpha));
alignmentData.push_back(offsetof(VkDisplayPlaneCapabilitiesKHR, minSrcPosition));
alignmentData.push_back(FIELD_SIZEOF(VkDisplayPlaneCapabilitiesKHR, minSrcPosition));
alignmentData.push_back(offsetof(VkDisplayPlaneCapabilitiesKHR, maxSrcPosition));
alignmentData.push_back(FIELD_SIZEOF(VkDisplayPlaneCapabilitiesKHR, maxSrcPosition));
alignmentData.push_back(offsetof(VkDisplayPlaneCapabilitiesKHR, minSrcExtent));
alignmentData.push_back(FIELD_SIZEOF(VkDisplayPlaneCapabilitiesKHR, minSrcExtent));
alignmentData.push_back(offsetof(VkDisplayPlaneCapabilitiesKHR, maxSrcExtent));
alignmentData.push_back(FIELD_SIZEOF(VkDisplayPlaneCapabilitiesKHR, maxSrcExtent));
alignmentData.push_back(offsetof(VkDisplayPlaneCapabilitiesKHR, minDstPosition));
alignmentData.push_back(FIELD_SIZEOF(VkDisplayPlaneCapabilitiesKHR, minDstPosition));
alignmentData.push_back(offsetof(VkDisplayPlaneCapabilitiesKHR, maxDstPosition));
alignmentData.push_back(FIELD_SIZEOF(VkDisplayPlaneCapabilitiesKHR, maxDstPosition));
alignmentData.push_back(offsetof(VkDisplayPlaneCapabilitiesKHR, minDstExtent));
alignmentData.push_back(FIELD_SIZEOF(VkDisplayPlaneCapabilitiesKHR, minDstExtent));
alignmentData.push_back(offsetof(VkDisplayPlaneCapabilitiesKHR, maxDstExtent));
alignmentData.push_back(FIELD_SIZEOF(VkDisplayPlaneCapabilitiesKHR, maxDstExtent));
alignmentData.push_back(offsetof(VkDisplaySurfaceCreateInfoKHR, sType));
alignmentData.push_back(FIELD_SIZEOF(VkDisplaySurfaceCreateInfoKHR, sType));
alignmentData.push_back(offsetof(VkDisplaySurfaceCreateInfoKHR, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkDisplaySurfaceCreateInfoKHR, pNext));
alignmentData.push_back(offsetof(VkDisplaySurfaceCreateInfoKHR, flags));
alignmentData.push_back(FIELD_SIZEOF(VkDisplaySurfaceCreateInfoKHR, flags));
alignmentData.push_back(offsetof(VkDisplaySurfaceCreateInfoKHR, displayMode));
alignmentData.push_back(FIELD_SIZEOF(VkDisplaySurfaceCreateInfoKHR, displayMode));
alignmentData.push_back(offsetof(VkDisplaySurfaceCreateInfoKHR, planeIndex));
alignmentData.push_back(FIELD_SIZEOF(VkDisplaySurfaceCreateInfoKHR, planeIndex));
alignmentData.push_back(offsetof(VkDisplaySurfaceCreateInfoKHR, planeStackIndex));
alignmentData.push_back(FIELD_SIZEOF(VkDisplaySurfaceCreateInfoKHR, planeStackIndex));
alignmentData.push_back(offsetof(VkDisplaySurfaceCreateInfoKHR, transform));
alignmentData.push_back(FIELD_SIZEOF(VkDisplaySurfaceCreateInfoKHR, transform));
alignmentData.push_back(offsetof(VkDisplaySurfaceCreateInfoKHR, globalAlpha));
alignmentData.push_back(FIELD_SIZEOF(VkDisplaySurfaceCreateInfoKHR, globalAlpha));
alignmentData.push_back(offsetof(VkDisplaySurfaceCreateInfoKHR, alphaMode));
alignmentData.push_back(FIELD_SIZEOF(VkDisplaySurfaceCreateInfoKHR, alphaMode));
alignmentData.push_back(offsetof(VkDisplaySurfaceCreateInfoKHR, imageExtent));
alignmentData.push_back(FIELD_SIZEOF(VkDisplaySurfaceCreateInfoKHR, imageExtent));
alignmentData.push_back(offsetof(VkDisplayPresentInfoKHR, sType));
alignmentData.push_back(FIELD_SIZEOF(VkDisplayPresentInfoKHR, sType));
alignmentData.push_back(offsetof(VkDisplayPresentInfoKHR, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkDisplayPresentInfoKHR, pNext));
alignmentData.push_back(offsetof(VkDisplayPresentInfoKHR, srcRect));
alignmentData.push_back(FIELD_SIZEOF(VkDisplayPresentInfoKHR, srcRect));
alignmentData.push_back(offsetof(VkDisplayPresentInfoKHR, dstRect));
alignmentData.push_back(FIELD_SIZEOF(VkDisplayPresentInfoKHR, dstRect));
alignmentData.push_back(offsetof(VkDisplayPresentInfoKHR, persistent));
alignmentData.push_back(FIELD_SIZEOF(VkDisplayPresentInfoKHR, persistent));
alignmentData.push_back(offsetof(VkSurfaceCapabilitiesKHR, minImageCount));
alignmentData.push_back(FIELD_SIZEOF(VkSurfaceCapabilitiesKHR, minImageCount));
alignmentData.push_back(offsetof(VkSurfaceCapabilitiesKHR, maxImageCount));
alignmentData.push_back(FIELD_SIZEOF(VkSurfaceCapabilitiesKHR, maxImageCount));
alignmentData.push_back(offsetof(VkSurfaceCapabilitiesKHR, currentExtent));
alignmentData.push_back(FIELD_SIZEOF(VkSurfaceCapabilitiesKHR, currentExtent));
alignmentData.push_back(offsetof(VkSurfaceCapabilitiesKHR, minImageExtent));
alignmentData.push_back(FIELD_SIZEOF(VkSurfaceCapabilitiesKHR, minImageExtent));
alignmentData.push_back(offsetof(VkSurfaceCapabilitiesKHR, maxImageExtent));
alignmentData.push_back(FIELD_SIZEOF(VkSurfaceCapabilitiesKHR, maxImageExtent));
alignmentData.push_back(offsetof(VkSurfaceCapabilitiesKHR, maxImageArrayLayers));
alignmentData.push_back(FIELD_SIZEOF(VkSurfaceCapabilitiesKHR, maxImageArrayLayers));
alignmentData.push_back(offsetof(VkSurfaceCapabilitiesKHR, supportedTransforms));
alignmentData.push_back(FIELD_SIZEOF(VkSurfaceCapabilitiesKHR, supportedTransforms));
alignmentData.push_back(offsetof(VkSurfaceCapabilitiesKHR, currentTransform));
alignmentData.push_back(FIELD_SIZEOF(VkSurfaceCapabilitiesKHR, currentTransform));
alignmentData.push_back(offsetof(VkSurfaceCapabilitiesKHR, supportedCompositeAlpha));
alignmentData.push_back(FIELD_SIZEOF(VkSurfaceCapabilitiesKHR, supportedCompositeAlpha));
alignmentData.push_back(offsetof(VkSurfaceCapabilitiesKHR, supportedUsageFlags));
alignmentData.push_back(FIELD_SIZEOF(VkSurfaceCapabilitiesKHR, supportedUsageFlags));
alignmentData.push_back(offsetof(VkSurfaceFormatKHR, format));
alignmentData.push_back(FIELD_SIZEOF(VkSurfaceFormatKHR, format));
alignmentData.push_back(offsetof(VkSurfaceFormatKHR, colorSpace));
alignmentData.push_back(FIELD_SIZEOF(VkSurfaceFormatKHR, colorSpace));
alignmentData.push_back(offsetof(VkSwapchainCreateInfoKHR, sType));
alignmentData.push_back(FIELD_SIZEOF(VkSwapchainCreateInfoKHR, sType));
alignmentData.push_back(offsetof(VkSwapchainCreateInfoKHR, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkSwapchainCreateInfoKHR, pNext));
alignmentData.push_back(offsetof(VkSwapchainCreateInfoKHR, flags));
alignmentData.push_back(FIELD_SIZEOF(VkSwapchainCreateInfoKHR, flags));
alignmentData.push_back(offsetof(VkSwapchainCreateInfoKHR, surface));
alignmentData.push_back(FIELD_SIZEOF(VkSwapchainCreateInfoKHR, surface));
alignmentData.push_back(offsetof(VkSwapchainCreateInfoKHR, minImageCount));
alignmentData.push_back(FIELD_SIZEOF(VkSwapchainCreateInfoKHR, minImageCount));
alignmentData.push_back(offsetof(VkSwapchainCreateInfoKHR, imageFormat));
alignmentData.push_back(FIELD_SIZEOF(VkSwapchainCreateInfoKHR, imageFormat));
alignmentData.push_back(offsetof(VkSwapchainCreateInfoKHR, imageColorSpace));
alignmentData.push_back(FIELD_SIZEOF(VkSwapchainCreateInfoKHR, imageColorSpace));
alignmentData.push_back(offsetof(VkSwapchainCreateInfoKHR, imageExtent));
alignmentData.push_back(FIELD_SIZEOF(VkSwapchainCreateInfoKHR, imageExtent));
alignmentData.push_back(offsetof(VkSwapchainCreateInfoKHR, imageArrayLayers));
alignmentData.push_back(FIELD_SIZEOF(VkSwapchainCreateInfoKHR, imageArrayLayers));
alignmentData.push_back(offsetof(VkSwapchainCreateInfoKHR, imageUsage));
alignmentData.push_back(FIELD_SIZEOF(VkSwapchainCreateInfoKHR, imageUsage));
alignmentData.push_back(offsetof(VkSwapchainCreateInfoKHR, imageSharingMode));
alignmentData.push_back(FIELD_SIZEOF(VkSwapchainCreateInfoKHR, imageSharingMode));
alignmentData.push_back(offsetof(VkSwapchainCreateInfoKHR, queueFamilyIndexCount));
alignmentData.push_back(FIELD_SIZEOF(VkSwapchainCreateInfoKHR, queueFamilyIndexCount));
alignmentData.push_back(offsetof(VkSwapchainCreateInfoKHR, pQueueFamilyIndices));
alignmentData.push_back(FIELD_SIZEOF(VkSwapchainCreateInfoKHR, pQueueFamilyIndices));
alignmentData.push_back(offsetof(VkSwapchainCreateInfoKHR, preTransform));
alignmentData.push_back(FIELD_SIZEOF(VkSwapchainCreateInfoKHR, preTransform));
alignmentData.push_back(offsetof(VkSwapchainCreateInfoKHR, compositeAlpha));
alignmentData.push_back(FIELD_SIZEOF(VkSwapchainCreateInfoKHR, compositeAlpha));
alignmentData.push_back(offsetof(VkSwapchainCreateInfoKHR, presentMode));
alignmentData.push_back(FIELD_SIZEOF(VkSwapchainCreateInfoKHR, presentMode));
alignmentData.push_back(offsetof(VkSwapchainCreateInfoKHR, clipped));
alignmentData.push_back(FIELD_SIZEOF(VkSwapchainCreateInfoKHR, clipped));
alignmentData.push_back(offsetof(VkSwapchainCreateInfoKHR, oldSwapchain));
alignmentData.push_back(FIELD_SIZEOF(VkSwapchainCreateInfoKHR, oldSwapchain));
alignmentData.push_back(offsetof(VkPresentInfoKHR, sType));
alignmentData.push_back(FIELD_SIZEOF(VkPresentInfoKHR, sType));
alignmentData.push_back(offsetof(VkPresentInfoKHR, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkPresentInfoKHR, pNext));
alignmentData.push_back(offsetof(VkPresentInfoKHR, waitSemaphoreCount));
alignmentData.push_back(FIELD_SIZEOF(VkPresentInfoKHR, waitSemaphoreCount));
alignmentData.push_back(offsetof(VkPresentInfoKHR, pWaitSemaphores));
alignmentData.push_back(FIELD_SIZEOF(VkPresentInfoKHR, pWaitSemaphores));
alignmentData.push_back(offsetof(VkPresentInfoKHR, swapchainCount));
alignmentData.push_back(FIELD_SIZEOF(VkPresentInfoKHR, swapchainCount));
alignmentData.push_back(offsetof(VkPresentInfoKHR, pSwapchains));
alignmentData.push_back(FIELD_SIZEOF(VkPresentInfoKHR, pSwapchains));
alignmentData.push_back(offsetof(VkPresentInfoKHR, pImageIndices));
alignmentData.push_back(FIELD_SIZEOF(VkPresentInfoKHR, pImageIndices));
alignmentData.push_back(offsetof(VkPresentInfoKHR, pResults));
alignmentData.push_back(FIELD_SIZEOF(VkPresentInfoKHR, pResults));
alignmentData.push_back(offsetof(VkValidationFlagsEXT, sType));
alignmentData.push_back(FIELD_SIZEOF(VkValidationFlagsEXT, sType));
alignmentData.push_back(offsetof(VkValidationFlagsEXT, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkValidationFlagsEXT, pNext));
alignmentData.push_back(offsetof(VkValidationFlagsEXT, disabledValidationCheckCount));
alignmentData.push_back(FIELD_SIZEOF(VkValidationFlagsEXT, disabledValidationCheckCount));
alignmentData.push_back(offsetof(VkValidationFlagsEXT, pDisabledValidationChecks));
alignmentData.push_back(FIELD_SIZEOF(VkValidationFlagsEXT, pDisabledValidationChecks));
alignmentData.push_back(offsetof(VkValidationFeaturesEXT, sType));
alignmentData.push_back(FIELD_SIZEOF(VkValidationFeaturesEXT, sType));
alignmentData.push_back(offsetof(VkValidationFeaturesEXT, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkValidationFeaturesEXT, pNext));
alignmentData.push_back(offsetof(VkValidationFeaturesEXT, enabledValidationFeatureCount));
alignmentData.push_back(FIELD_SIZEOF(VkValidationFeaturesEXT, enabledValidationFeatureCount));
alignmentData.push_back(offsetof(VkValidationFeaturesEXT, pEnabledValidationFeatures));
alignmentData.push_back(FIELD_SIZEOF(VkValidationFeaturesEXT, pEnabledValidationFeatures));
alignmentData.push_back(offsetof(VkValidationFeaturesEXT, disabledValidationFeatureCount));
alignmentData.push_back(FIELD_SIZEOF(VkValidationFeaturesEXT, disabledValidationFeatureCount));
alignmentData.push_back(offsetof(VkValidationFeaturesEXT, pDisabledValidationFeatures));
alignmentData.push_back(FIELD_SIZEOF(VkValidationFeaturesEXT, pDisabledValidationFeatures));
alignmentData.push_back(offsetof(VkDevicePrivateDataCreateInfo, sType));
alignmentData.push_back(FIELD_SIZEOF(VkDevicePrivateDataCreateInfo, sType));
alignmentData.push_back(offsetof(VkDevicePrivateDataCreateInfo, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkDevicePrivateDataCreateInfo, pNext));
alignmentData.push_back(offsetof(VkDevicePrivateDataCreateInfo, privateDataSlotRequestCount));
alignmentData.push_back(FIELD_SIZEOF(VkDevicePrivateDataCreateInfo, privateDataSlotRequestCount));

alignmentData.push_back(offsetof(VkPrivateDataSlotCreateInfo, sType));
alignmentData.push_back(FIELD_SIZEOF(VkPrivateDataSlotCreateInfo, sType));
alignmentData.push_back(offsetof(VkPrivateDataSlotCreateInfo, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkPrivateDataSlotCreateInfo, pNext));
alignmentData.push_back(offsetof(VkPrivateDataSlotCreateInfo, flags));
alignmentData.push_back(FIELD_SIZEOF(VkPrivateDataSlotCreateInfo, flags));

alignmentData.push_back(offsetof(VkPhysicalDevicePrivateDataFeatures, sType));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDevicePrivateDataFeatures, sType));
alignmentData.push_back(offsetof(VkPhysicalDevicePrivateDataFeatures, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDevicePrivateDataFeatures, pNext));
alignmentData.push_back(offsetof(VkPhysicalDevicePrivateDataFeatures, privateData));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDevicePrivateDataFeatures, privateData));

alignmentData.push_back(offsetof(VkPhysicalDeviceMultiDrawPropertiesEXT, sType));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceMultiDrawPropertiesEXT, sType));
alignmentData.push_back(offsetof(VkPhysicalDeviceMultiDrawPropertiesEXT, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceMultiDrawPropertiesEXT, pNext));
alignmentData.push_back(offsetof(VkPhysicalDeviceMultiDrawPropertiesEXT, maxMultiDrawCount));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceMultiDrawPropertiesEXT, maxMultiDrawCount));
alignmentData.push_back(offsetof(VkPhysicalDeviceFeatures2, sType));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceFeatures2, sType));
alignmentData.push_back(offsetof(VkPhysicalDeviceFeatures2, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceFeatures2, pNext));
alignmentData.push_back(offsetof(VkPhysicalDeviceFeatures2, features));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceFeatures2, features));

alignmentData.push_back(offsetof(VkPhysicalDeviceProperties2, sType));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceProperties2, sType));
alignmentData.push_back(offsetof(VkPhysicalDeviceProperties2, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceProperties2, pNext));
alignmentData.push_back(offsetof(VkPhysicalDeviceProperties2, properties));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceProperties2, properties));

alignmentData.push_back(offsetof(VkFormatProperties2, sType));
alignmentData.push_back(FIELD_SIZEOF(VkFormatProperties2, sType));
alignmentData.push_back(offsetof(VkFormatProperties2, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkFormatProperties2, pNext));
alignmentData.push_back(offsetof(VkFormatProperties2, formatProperties));
alignmentData.push_back(FIELD_SIZEOF(VkFormatProperties2, formatProperties));

alignmentData.push_back(offsetof(VkImageFormatProperties2, sType));
alignmentData.push_back(FIELD_SIZEOF(VkImageFormatProperties2, sType));
alignmentData.push_back(offsetof(VkImageFormatProperties2, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkImageFormatProperties2, pNext));
alignmentData.push_back(offsetof(VkImageFormatProperties2, imageFormatProperties));
alignmentData.push_back(FIELD_SIZEOF(VkImageFormatProperties2, imageFormatProperties));

alignmentData.push_back(offsetof(VkPhysicalDeviceImageFormatInfo2, sType));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceImageFormatInfo2, sType));
alignmentData.push_back(offsetof(VkPhysicalDeviceImageFormatInfo2, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceImageFormatInfo2, pNext));
alignmentData.push_back(offsetof(VkPhysicalDeviceImageFormatInfo2, format));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceImageFormatInfo2, format));
alignmentData.push_back(offsetof(VkPhysicalDeviceImageFormatInfo2, type));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceImageFormatInfo2, type));
alignmentData.push_back(offsetof(VkPhysicalDeviceImageFormatInfo2, tiling));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceImageFormatInfo2, tiling));
alignmentData.push_back(offsetof(VkPhysicalDeviceImageFormatInfo2, usage));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceImageFormatInfo2, usage));
alignmentData.push_back(offsetof(VkPhysicalDeviceImageFormatInfo2, flags));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceImageFormatInfo2, flags));

alignmentData.push_back(offsetof(VkQueueFamilyProperties2, sType));
alignmentData.push_back(FIELD_SIZEOF(VkQueueFamilyProperties2, sType));
alignmentData.push_back(offsetof(VkQueueFamilyProperties2, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkQueueFamilyProperties2, pNext));
alignmentData.push_back(offsetof(VkQueueFamilyProperties2, queueFamilyProperties));
alignmentData.push_back(FIELD_SIZEOF(VkQueueFamilyProperties2, queueFamilyProperties));

alignmentData.push_back(offsetof(VkPhysicalDeviceMemoryProperties2, sType));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceMemoryProperties2, sType));
alignmentData.push_back(offsetof(VkPhysicalDeviceMemoryProperties2, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceMemoryProperties2, pNext));
alignmentData.push_back(offsetof(VkPhysicalDeviceMemoryProperties2, memoryProperties));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceMemoryProperties2, memoryProperties));

alignmentData.push_back(offsetof(VkSparseImageFormatProperties2, sType));
alignmentData.push_back(FIELD_SIZEOF(VkSparseImageFormatProperties2, sType));
alignmentData.push_back(offsetof(VkSparseImageFormatProperties2, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkSparseImageFormatProperties2, pNext));
alignmentData.push_back(offsetof(VkSparseImageFormatProperties2, properties));
alignmentData.push_back(FIELD_SIZEOF(VkSparseImageFormatProperties2, properties));

alignmentData.push_back(offsetof(VkPhysicalDeviceSparseImageFormatInfo2, sType));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceSparseImageFormatInfo2, sType));
alignmentData.push_back(offsetof(VkPhysicalDeviceSparseImageFormatInfo2, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceSparseImageFormatInfo2, pNext));
alignmentData.push_back(offsetof(VkPhysicalDeviceSparseImageFormatInfo2, format));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceSparseImageFormatInfo2, format));
alignmentData.push_back(offsetof(VkPhysicalDeviceSparseImageFormatInfo2, type));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceSparseImageFormatInfo2, type));
alignmentData.push_back(offsetof(VkPhysicalDeviceSparseImageFormatInfo2, samples));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceSparseImageFormatInfo2, samples));
alignmentData.push_back(offsetof(VkPhysicalDeviceSparseImageFormatInfo2, usage));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceSparseImageFormatInfo2, usage));
alignmentData.push_back(offsetof(VkPhysicalDeviceSparseImageFormatInfo2, tiling));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceSparseImageFormatInfo2, tiling));

alignmentData.push_back(offsetof(VkPhysicalDevicePushDescriptorPropertiesKHR, sType));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDevicePushDescriptorPropertiesKHR, sType));
alignmentData.push_back(offsetof(VkPhysicalDevicePushDescriptorPropertiesKHR, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDevicePushDescriptorPropertiesKHR, pNext));
alignmentData.push_back(offsetof(VkPhysicalDevicePushDescriptorPropertiesKHR, maxPushDescriptors));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDevicePushDescriptorPropertiesKHR, maxPushDescriptors));
alignmentData.push_back(offsetof(VkConformanceVersion, major));
alignmentData.push_back(FIELD_SIZEOF(VkConformanceVersion, major));
alignmentData.push_back(offsetof(VkConformanceVersion, minor));
alignmentData.push_back(FIELD_SIZEOF(VkConformanceVersion, minor));
alignmentData.push_back(offsetof(VkConformanceVersion, subminor));
alignmentData.push_back(FIELD_SIZEOF(VkConformanceVersion, subminor));
alignmentData.push_back(offsetof(VkConformanceVersion, patch));
alignmentData.push_back(FIELD_SIZEOF(VkConformanceVersion, patch));

alignmentData.push_back(offsetof(VkPhysicalDeviceDriverProperties, sType));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceDriverProperties, sType));
alignmentData.push_back(offsetof(VkPhysicalDeviceDriverProperties, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceDriverProperties, pNext));
alignmentData.push_back(offsetof(VkPhysicalDeviceDriverProperties, driverID));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceDriverProperties, driverID));
alignmentData.push_back(offsetof(VkPhysicalDeviceDriverProperties, driverName));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceDriverProperties, driverName));
alignmentData.push_back(offsetof(VkPhysicalDeviceDriverProperties, driverInfo));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceDriverProperties, driverInfo));
alignmentData.push_back(offsetof(VkPhysicalDeviceDriverProperties, conformanceVersion));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceDriverProperties, conformanceVersion));

alignmentData.push_back(offsetof(VkPresentRegionsKHR, sType));
alignmentData.push_back(FIELD_SIZEOF(VkPresentRegionsKHR, sType));
alignmentData.push_back(offsetof(VkPresentRegionsKHR, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkPresentRegionsKHR, pNext));
alignmentData.push_back(offsetof(VkPresentRegionsKHR, swapchainCount));
alignmentData.push_back(FIELD_SIZEOF(VkPresentRegionsKHR, swapchainCount));
alignmentData.push_back(offsetof(VkPresentRegionsKHR, pRegions));
alignmentData.push_back(FIELD_SIZEOF(VkPresentRegionsKHR, pRegions));
alignmentData.push_back(offsetof(VkPresentRegionKHR, rectangleCount));
alignmentData.push_back(FIELD_SIZEOF(VkPresentRegionKHR, rectangleCount));
alignmentData.push_back(offsetof(VkPresentRegionKHR, pRectangles));
alignmentData.push_back(FIELD_SIZEOF(VkPresentRegionKHR, pRectangles));
alignmentData.push_back(offsetof(VkRectLayerKHR, offset));
alignmentData.push_back(FIELD_SIZEOF(VkRectLayerKHR, offset));
alignmentData.push_back(offsetof(VkRectLayerKHR, extent));
alignmentData.push_back(FIELD_SIZEOF(VkRectLayerKHR, extent));
alignmentData.push_back(offsetof(VkRectLayerKHR, layer));
alignmentData.push_back(FIELD_SIZEOF(VkRectLayerKHR, layer));
alignmentData.push_back(offsetof(VkPhysicalDeviceVariablePointersFeatures, sType));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceVariablePointersFeatures, sType));
alignmentData.push_back(offsetof(VkPhysicalDeviceVariablePointersFeatures, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceVariablePointersFeatures, pNext));
alignmentData.push_back(offsetof(VkPhysicalDeviceVariablePointersFeatures, variablePointersStorageBuffer));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceVariablePointersFeatures, variablePointersStorageBuffer));
alignmentData.push_back(offsetof(VkPhysicalDeviceVariablePointersFeatures, variablePointers));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceVariablePointersFeatures, variablePointers));



alignmentData.push_back(offsetof(VkExternalMemoryProperties, externalMemoryFeatures));
alignmentData.push_back(FIELD_SIZEOF(VkExternalMemoryProperties, externalMemoryFeatures));
alignmentData.push_back(offsetof(VkExternalMemoryProperties, exportFromImportedHandleTypes));
alignmentData.push_back(FIELD_SIZEOF(VkExternalMemoryProperties, exportFromImportedHandleTypes));
alignmentData.push_back(offsetof(VkExternalMemoryProperties, compatibleHandleTypes));
alignmentData.push_back(FIELD_SIZEOF(VkExternalMemoryProperties, compatibleHandleTypes));
alignmentData.push_back(offsetof(VkPhysicalDeviceExternalImageFormatInfo, sType));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceExternalImageFormatInfo, sType));
alignmentData.push_back(offsetof(VkPhysicalDeviceExternalImageFormatInfo, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceExternalImageFormatInfo, pNext));
alignmentData.push_back(offsetof(VkPhysicalDeviceExternalImageFormatInfo, handleType));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceExternalImageFormatInfo, handleType));
alignmentData.push_back(offsetof(VkExternalImageFormatProperties, sType));
alignmentData.push_back(FIELD_SIZEOF(VkExternalImageFormatProperties, sType));
alignmentData.push_back(offsetof(VkExternalImageFormatProperties, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkExternalImageFormatProperties, pNext));
alignmentData.push_back(offsetof(VkExternalImageFormatProperties, externalMemoryProperties));
alignmentData.push_back(FIELD_SIZEOF(VkExternalImageFormatProperties, externalMemoryProperties));
alignmentData.push_back(offsetof(VkPhysicalDeviceExternalBufferInfo, sType));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceExternalBufferInfo, sType));
alignmentData.push_back(offsetof(VkPhysicalDeviceExternalBufferInfo, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceExternalBufferInfo, pNext));
alignmentData.push_back(offsetof(VkPhysicalDeviceExternalBufferInfo, flags));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceExternalBufferInfo, flags));
alignmentData.push_back(offsetof(VkPhysicalDeviceExternalBufferInfo, usage));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceExternalBufferInfo, usage));
alignmentData.push_back(offsetof(VkPhysicalDeviceExternalBufferInfo, handleType));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceExternalBufferInfo, handleType));
alignmentData.push_back(offsetof(VkExternalBufferProperties, sType));
alignmentData.push_back(FIELD_SIZEOF(VkExternalBufferProperties, sType));
alignmentData.push_back(offsetof(VkExternalBufferProperties, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkExternalBufferProperties, pNext));
alignmentData.push_back(offsetof(VkExternalBufferProperties, externalMemoryProperties));
alignmentData.push_back(FIELD_SIZEOF(VkExternalBufferProperties, externalMemoryProperties));
alignmentData.push_back(offsetof(VkPhysicalDeviceIDProperties, sType));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceIDProperties, sType));
alignmentData.push_back(offsetof(VkPhysicalDeviceIDProperties, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceIDProperties, pNext));
alignmentData.push_back(offsetof(VkPhysicalDeviceIDProperties, deviceUUID));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceIDProperties, deviceUUID));
alignmentData.push_back(offsetof(VkPhysicalDeviceIDProperties, driverUUID));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceIDProperties, driverUUID));
alignmentData.push_back(offsetof(VkPhysicalDeviceIDProperties, deviceLUID));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceIDProperties, deviceLUID));
alignmentData.push_back(offsetof(VkPhysicalDeviceIDProperties, deviceNodeMask));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceIDProperties, deviceNodeMask));
alignmentData.push_back(offsetof(VkPhysicalDeviceIDProperties, deviceLUIDValid));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceIDProperties, deviceLUIDValid));
alignmentData.push_back(offsetof(VkExternalMemoryImageCreateInfo, sType));
alignmentData.push_back(FIELD_SIZEOF(VkExternalMemoryImageCreateInfo, sType));
alignmentData.push_back(offsetof(VkExternalMemoryImageCreateInfo, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkExternalMemoryImageCreateInfo, pNext));
alignmentData.push_back(offsetof(VkExternalMemoryImageCreateInfo, handleTypes));
alignmentData.push_back(FIELD_SIZEOF(VkExternalMemoryImageCreateInfo, handleTypes));
alignmentData.push_back(offsetof(VkExternalMemoryBufferCreateInfo, sType));
alignmentData.push_back(FIELD_SIZEOF(VkExternalMemoryBufferCreateInfo, sType));
alignmentData.push_back(offsetof(VkExternalMemoryBufferCreateInfo, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkExternalMemoryBufferCreateInfo, pNext));
alignmentData.push_back(offsetof(VkExternalMemoryBufferCreateInfo, handleTypes));
alignmentData.push_back(FIELD_SIZEOF(VkExternalMemoryBufferCreateInfo, handleTypes));
alignmentData.push_back(offsetof(VkExportMemoryAllocateInfo, sType));
alignmentData.push_back(FIELD_SIZEOF(VkExportMemoryAllocateInfo, sType));
alignmentData.push_back(offsetof(VkExportMemoryAllocateInfo, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkExportMemoryAllocateInfo, pNext));
alignmentData.push_back(offsetof(VkExportMemoryAllocateInfo, handleTypes));
alignmentData.push_back(FIELD_SIZEOF(VkExportMemoryAllocateInfo, handleTypes));
alignmentData.push_back(offsetof(VkPhysicalDeviceExternalSemaphoreInfo, sType));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceExternalSemaphoreInfo, sType));
alignmentData.push_back(offsetof(VkPhysicalDeviceExternalSemaphoreInfo, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceExternalSemaphoreInfo, pNext));
alignmentData.push_back(offsetof(VkPhysicalDeviceExternalSemaphoreInfo, handleType));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceExternalSemaphoreInfo, handleType));
alignmentData.push_back(offsetof(VkExternalSemaphoreProperties, sType));
alignmentData.push_back(FIELD_SIZEOF(VkExternalSemaphoreProperties, sType));
alignmentData.push_back(offsetof(VkExternalSemaphoreProperties, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkExternalSemaphoreProperties, pNext));
alignmentData.push_back(offsetof(VkExternalSemaphoreProperties, exportFromImportedHandleTypes));
alignmentData.push_back(FIELD_SIZEOF(VkExternalSemaphoreProperties, exportFromImportedHandleTypes));
alignmentData.push_back(offsetof(VkExternalSemaphoreProperties, compatibleHandleTypes));
alignmentData.push_back(FIELD_SIZEOF(VkExternalSemaphoreProperties, compatibleHandleTypes));
alignmentData.push_back(offsetof(VkExternalSemaphoreProperties, externalSemaphoreFeatures));
alignmentData.push_back(FIELD_SIZEOF(VkExternalSemaphoreProperties, externalSemaphoreFeatures));
alignmentData.push_back(offsetof(VkExportSemaphoreCreateInfo, sType));
alignmentData.push_back(FIELD_SIZEOF(VkExportSemaphoreCreateInfo, sType));
alignmentData.push_back(offsetof(VkExportSemaphoreCreateInfo, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkExportSemaphoreCreateInfo, pNext));
alignmentData.push_back(offsetof(VkExportSemaphoreCreateInfo, handleTypes));
alignmentData.push_back(FIELD_SIZEOF(VkExportSemaphoreCreateInfo, handleTypes));
alignmentData.push_back(offsetof(VkPhysicalDeviceExternalFenceInfo, sType));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceExternalFenceInfo, sType));
alignmentData.push_back(offsetof(VkPhysicalDeviceExternalFenceInfo, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceExternalFenceInfo, pNext));
alignmentData.push_back(offsetof(VkPhysicalDeviceExternalFenceInfo, handleType));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceExternalFenceInfo, handleType));
alignmentData.push_back(offsetof(VkExternalFenceProperties, sType));
alignmentData.push_back(FIELD_SIZEOF(VkExternalFenceProperties, sType));
alignmentData.push_back(offsetof(VkExternalFenceProperties, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkExternalFenceProperties, pNext));
alignmentData.push_back(offsetof(VkExternalFenceProperties, exportFromImportedHandleTypes));
alignmentData.push_back(FIELD_SIZEOF(VkExternalFenceProperties, exportFromImportedHandleTypes));
alignmentData.push_back(offsetof(VkExternalFenceProperties, compatibleHandleTypes));
alignmentData.push_back(FIELD_SIZEOF(VkExternalFenceProperties, compatibleHandleTypes));
alignmentData.push_back(offsetof(VkExternalFenceProperties, externalFenceFeatures));
alignmentData.push_back(FIELD_SIZEOF(VkExternalFenceProperties, externalFenceFeatures));
alignmentData.push_back(offsetof(VkExportFenceCreateInfo, sType));
alignmentData.push_back(FIELD_SIZEOF(VkExportFenceCreateInfo, sType));
alignmentData.push_back(offsetof(VkExportFenceCreateInfo, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkExportFenceCreateInfo, pNext));
alignmentData.push_back(offsetof(VkExportFenceCreateInfo, handleTypes));
alignmentData.push_back(FIELD_SIZEOF(VkExportFenceCreateInfo, handleTypes));
alignmentData.push_back(offsetof(VkPhysicalDeviceMultiviewFeatures, sType));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceMultiviewFeatures, sType));
alignmentData.push_back(offsetof(VkPhysicalDeviceMultiviewFeatures, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceMultiviewFeatures, pNext));
alignmentData.push_back(offsetof(VkPhysicalDeviceMultiviewFeatures, multiview));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceMultiviewFeatures, multiview));
alignmentData.push_back(offsetof(VkPhysicalDeviceMultiviewFeatures, multiviewGeometryShader));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceMultiviewFeatures, multiviewGeometryShader));
alignmentData.push_back(offsetof(VkPhysicalDeviceMultiviewFeatures, multiviewTessellationShader));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceMultiviewFeatures, multiviewTessellationShader));

alignmentData.push_back(offsetof(VkPhysicalDeviceMultiviewProperties, sType));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceMultiviewProperties, sType));
alignmentData.push_back(offsetof(VkPhysicalDeviceMultiviewProperties, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceMultiviewProperties, pNext));
alignmentData.push_back(offsetof(VkPhysicalDeviceMultiviewProperties, maxMultiviewViewCount));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceMultiviewProperties, maxMultiviewViewCount));
alignmentData.push_back(offsetof(VkPhysicalDeviceMultiviewProperties, maxMultiviewInstanceIndex));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceMultiviewProperties, maxMultiviewInstanceIndex));

alignmentData.push_back(offsetof(VkRenderPassMultiviewCreateInfo, sType));
alignmentData.push_back(FIELD_SIZEOF(VkRenderPassMultiviewCreateInfo, sType));
alignmentData.push_back(offsetof(VkRenderPassMultiviewCreateInfo, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkRenderPassMultiviewCreateInfo, pNext));
alignmentData.push_back(offsetof(VkRenderPassMultiviewCreateInfo, subpassCount));
alignmentData.push_back(FIELD_SIZEOF(VkRenderPassMultiviewCreateInfo, subpassCount));
alignmentData.push_back(offsetof(VkRenderPassMultiviewCreateInfo, pViewMasks));
alignmentData.push_back(FIELD_SIZEOF(VkRenderPassMultiviewCreateInfo, pViewMasks));
alignmentData.push_back(offsetof(VkRenderPassMultiviewCreateInfo, dependencyCount));
alignmentData.push_back(FIELD_SIZEOF(VkRenderPassMultiviewCreateInfo, dependencyCount));
alignmentData.push_back(offsetof(VkRenderPassMultiviewCreateInfo, pViewOffsets));
alignmentData.push_back(FIELD_SIZEOF(VkRenderPassMultiviewCreateInfo, pViewOffsets));
alignmentData.push_back(offsetof(VkRenderPassMultiviewCreateInfo, correlationMaskCount));
alignmentData.push_back(FIELD_SIZEOF(VkRenderPassMultiviewCreateInfo, correlationMaskCount));
alignmentData.push_back(offsetof(VkRenderPassMultiviewCreateInfo, pCorrelationMasks));
alignmentData.push_back(FIELD_SIZEOF(VkRenderPassMultiviewCreateInfo, pCorrelationMasks));

alignmentData.push_back(offsetof(VkPhysicalDeviceGroupProperties, sType));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceGroupProperties, sType));
alignmentData.push_back(offsetof(VkPhysicalDeviceGroupProperties, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceGroupProperties, pNext));
alignmentData.push_back(offsetof(VkPhysicalDeviceGroupProperties, physicalDeviceCount));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceGroupProperties, physicalDeviceCount));
alignmentData.push_back(offsetof(VkPhysicalDeviceGroupProperties, physicalDevices));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceGroupProperties, physicalDevices));
alignmentData.push_back(offsetof(VkPhysicalDeviceGroupProperties, subsetAllocation));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceGroupProperties, subsetAllocation));

alignmentData.push_back(offsetof(VkMemoryAllocateFlagsInfo, sType));
alignmentData.push_back(FIELD_SIZEOF(VkMemoryAllocateFlagsInfo, sType));
alignmentData.push_back(offsetof(VkMemoryAllocateFlagsInfo, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkMemoryAllocateFlagsInfo, pNext));
alignmentData.push_back(offsetof(VkMemoryAllocateFlagsInfo, flags));
alignmentData.push_back(FIELD_SIZEOF(VkMemoryAllocateFlagsInfo, flags));
alignmentData.push_back(offsetof(VkMemoryAllocateFlagsInfo, deviceMask));
alignmentData.push_back(FIELD_SIZEOF(VkMemoryAllocateFlagsInfo, deviceMask));

alignmentData.push_back(offsetof(VkBindBufferMemoryInfo, sType));
alignmentData.push_back(FIELD_SIZEOF(VkBindBufferMemoryInfo, sType));
alignmentData.push_back(offsetof(VkBindBufferMemoryInfo, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkBindBufferMemoryInfo, pNext));
alignmentData.push_back(offsetof(VkBindBufferMemoryInfo, buffer));
alignmentData.push_back(FIELD_SIZEOF(VkBindBufferMemoryInfo, buffer));
alignmentData.push_back(offsetof(VkBindBufferMemoryInfo, memory));
alignmentData.push_back(FIELD_SIZEOF(VkBindBufferMemoryInfo, memory));
alignmentData.push_back(offsetof(VkBindBufferMemoryInfo, memoryOffset));
alignmentData.push_back(FIELD_SIZEOF(VkBindBufferMemoryInfo, memoryOffset));

alignmentData.push_back(offsetof(VkBindBufferMemoryDeviceGroupInfo, sType));
alignmentData.push_back(FIELD_SIZEOF(VkBindBufferMemoryDeviceGroupInfo, sType));
alignmentData.push_back(offsetof(VkBindBufferMemoryDeviceGroupInfo, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkBindBufferMemoryDeviceGroupInfo, pNext));
alignmentData.push_back(offsetof(VkBindBufferMemoryDeviceGroupInfo, deviceIndexCount));
alignmentData.push_back(FIELD_SIZEOF(VkBindBufferMemoryDeviceGroupInfo, deviceIndexCount));
alignmentData.push_back(offsetof(VkBindBufferMemoryDeviceGroupInfo, pDeviceIndices));
alignmentData.push_back(FIELD_SIZEOF(VkBindBufferMemoryDeviceGroupInfo, pDeviceIndices));

alignmentData.push_back(offsetof(VkBindImageMemoryInfo, sType));
alignmentData.push_back(FIELD_SIZEOF(VkBindImageMemoryInfo, sType));
alignmentData.push_back(offsetof(VkBindImageMemoryInfo, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkBindImageMemoryInfo, pNext));
alignmentData.push_back(offsetof(VkBindImageMemoryInfo, image));
alignmentData.push_back(FIELD_SIZEOF(VkBindImageMemoryInfo, image));
alignmentData.push_back(offsetof(VkBindImageMemoryInfo, memory));
alignmentData.push_back(FIELD_SIZEOF(VkBindImageMemoryInfo, memory));
alignmentData.push_back(offsetof(VkBindImageMemoryInfo, memoryOffset));
alignmentData.push_back(FIELD_SIZEOF(VkBindImageMemoryInfo, memoryOffset));

alignmentData.push_back(offsetof(VkBindImageMemoryDeviceGroupInfo, sType));
alignmentData.push_back(FIELD_SIZEOF(VkBindImageMemoryDeviceGroupInfo, sType));
alignmentData.push_back(offsetof(VkBindImageMemoryDeviceGroupInfo, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkBindImageMemoryDeviceGroupInfo, pNext));
alignmentData.push_back(offsetof(VkBindImageMemoryDeviceGroupInfo, deviceIndexCount));
alignmentData.push_back(FIELD_SIZEOF(VkBindImageMemoryDeviceGroupInfo, deviceIndexCount));
alignmentData.push_back(offsetof(VkBindImageMemoryDeviceGroupInfo, pDeviceIndices));
alignmentData.push_back(FIELD_SIZEOF(VkBindImageMemoryDeviceGroupInfo, pDeviceIndices));
alignmentData.push_back(offsetof(VkBindImageMemoryDeviceGroupInfo, splitInstanceBindRegionCount));
alignmentData.push_back(FIELD_SIZEOF(VkBindImageMemoryDeviceGroupInfo, splitInstanceBindRegionCount));
alignmentData.push_back(offsetof(VkBindImageMemoryDeviceGroupInfo, pSplitInstanceBindRegions));
alignmentData.push_back(FIELD_SIZEOF(VkBindImageMemoryDeviceGroupInfo, pSplitInstanceBindRegions));

alignmentData.push_back(offsetof(VkDeviceGroupRenderPassBeginInfo, sType));
alignmentData.push_back(FIELD_SIZEOF(VkDeviceGroupRenderPassBeginInfo, sType));
alignmentData.push_back(offsetof(VkDeviceGroupRenderPassBeginInfo, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkDeviceGroupRenderPassBeginInfo, pNext));
alignmentData.push_back(offsetof(VkDeviceGroupRenderPassBeginInfo, deviceMask));
alignmentData.push_back(FIELD_SIZEOF(VkDeviceGroupRenderPassBeginInfo, deviceMask));
alignmentData.push_back(offsetof(VkDeviceGroupRenderPassBeginInfo, deviceRenderAreaCount));
alignmentData.push_back(FIELD_SIZEOF(VkDeviceGroupRenderPassBeginInfo, deviceRenderAreaCount));
alignmentData.push_back(offsetof(VkDeviceGroupRenderPassBeginInfo, pDeviceRenderAreas));
alignmentData.push_back(FIELD_SIZEOF(VkDeviceGroupRenderPassBeginInfo, pDeviceRenderAreas));

alignmentData.push_back(offsetof(VkDeviceGroupCommandBufferBeginInfo, sType));
alignmentData.push_back(FIELD_SIZEOF(VkDeviceGroupCommandBufferBeginInfo, sType));
alignmentData.push_back(offsetof(VkDeviceGroupCommandBufferBeginInfo, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkDeviceGroupCommandBufferBeginInfo, pNext));
alignmentData.push_back(offsetof(VkDeviceGroupCommandBufferBeginInfo, deviceMask));
alignmentData.push_back(FIELD_SIZEOF(VkDeviceGroupCommandBufferBeginInfo, deviceMask));

alignmentData.push_back(offsetof(VkDeviceGroupSubmitInfo, sType));
alignmentData.push_back(FIELD_SIZEOF(VkDeviceGroupSubmitInfo, sType));
alignmentData.push_back(offsetof(VkDeviceGroupSubmitInfo, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkDeviceGroupSubmitInfo, pNext));
alignmentData.push_back(offsetof(VkDeviceGroupSubmitInfo, waitSemaphoreCount));
alignmentData.push_back(FIELD_SIZEOF(VkDeviceGroupSubmitInfo, waitSemaphoreCount));
alignmentData.push_back(offsetof(VkDeviceGroupSubmitInfo, pWaitSemaphoreDeviceIndices));
alignmentData.push_back(FIELD_SIZEOF(VkDeviceGroupSubmitInfo, pWaitSemaphoreDeviceIndices));
alignmentData.push_back(offsetof(VkDeviceGroupSubmitInfo, commandBufferCount));
alignmentData.push_back(FIELD_SIZEOF(VkDeviceGroupSubmitInfo, commandBufferCount));
alignmentData.push_back(offsetof(VkDeviceGroupSubmitInfo, pCommandBufferDeviceMasks));
alignmentData.push_back(FIELD_SIZEOF(VkDeviceGroupSubmitInfo, pCommandBufferDeviceMasks));
alignmentData.push_back(offsetof(VkDeviceGroupSubmitInfo, signalSemaphoreCount));
alignmentData.push_back(FIELD_SIZEOF(VkDeviceGroupSubmitInfo, signalSemaphoreCount));
alignmentData.push_back(offsetof(VkDeviceGroupSubmitInfo, pSignalSemaphoreDeviceIndices));
alignmentData.push_back(FIELD_SIZEOF(VkDeviceGroupSubmitInfo, pSignalSemaphoreDeviceIndices));

alignmentData.push_back(offsetof(VkDeviceGroupBindSparseInfo, sType));
alignmentData.push_back(FIELD_SIZEOF(VkDeviceGroupBindSparseInfo, sType));
alignmentData.push_back(offsetof(VkDeviceGroupBindSparseInfo, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkDeviceGroupBindSparseInfo, pNext));
alignmentData.push_back(offsetof(VkDeviceGroupBindSparseInfo, resourceDeviceIndex));
alignmentData.push_back(FIELD_SIZEOF(VkDeviceGroupBindSparseInfo, resourceDeviceIndex));
alignmentData.push_back(offsetof(VkDeviceGroupBindSparseInfo, memoryDeviceIndex));
alignmentData.push_back(FIELD_SIZEOF(VkDeviceGroupBindSparseInfo, memoryDeviceIndex));

alignmentData.push_back(offsetof(VkDeviceGroupPresentCapabilitiesKHR, sType));
alignmentData.push_back(FIELD_SIZEOF(VkDeviceGroupPresentCapabilitiesKHR, sType));
alignmentData.push_back(offsetof(VkDeviceGroupPresentCapabilitiesKHR, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkDeviceGroupPresentCapabilitiesKHR, pNext));
alignmentData.push_back(offsetof(VkDeviceGroupPresentCapabilitiesKHR, presentMask));
alignmentData.push_back(FIELD_SIZEOF(VkDeviceGroupPresentCapabilitiesKHR, presentMask));
alignmentData.push_back(offsetof(VkDeviceGroupPresentCapabilitiesKHR, modes));
alignmentData.push_back(FIELD_SIZEOF(VkDeviceGroupPresentCapabilitiesKHR, modes));
alignmentData.push_back(offsetof(VkImageSwapchainCreateInfoKHR, sType));
alignmentData.push_back(FIELD_SIZEOF(VkImageSwapchainCreateInfoKHR, sType));
alignmentData.push_back(offsetof(VkImageSwapchainCreateInfoKHR, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkImageSwapchainCreateInfoKHR, pNext));
alignmentData.push_back(offsetof(VkImageSwapchainCreateInfoKHR, swapchain));
alignmentData.push_back(FIELD_SIZEOF(VkImageSwapchainCreateInfoKHR, swapchain));
alignmentData.push_back(offsetof(VkBindImageMemorySwapchainInfoKHR, sType));
alignmentData.push_back(FIELD_SIZEOF(VkBindImageMemorySwapchainInfoKHR, sType));
alignmentData.push_back(offsetof(VkBindImageMemorySwapchainInfoKHR, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkBindImageMemorySwapchainInfoKHR, pNext));
alignmentData.push_back(offsetof(VkBindImageMemorySwapchainInfoKHR, swapchain));
alignmentData.push_back(FIELD_SIZEOF(VkBindImageMemorySwapchainInfoKHR, swapchain));
alignmentData.push_back(offsetof(VkBindImageMemorySwapchainInfoKHR, imageIndex));
alignmentData.push_back(FIELD_SIZEOF(VkBindImageMemorySwapchainInfoKHR, imageIndex));
alignmentData.push_back(offsetof(VkAcquireNextImageInfoKHR, sType));
alignmentData.push_back(FIELD_SIZEOF(VkAcquireNextImageInfoKHR, sType));
alignmentData.push_back(offsetof(VkAcquireNextImageInfoKHR, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkAcquireNextImageInfoKHR, pNext));
alignmentData.push_back(offsetof(VkAcquireNextImageInfoKHR, swapchain));
alignmentData.push_back(FIELD_SIZEOF(VkAcquireNextImageInfoKHR, swapchain));
alignmentData.push_back(offsetof(VkAcquireNextImageInfoKHR, timeout));
alignmentData.push_back(FIELD_SIZEOF(VkAcquireNextImageInfoKHR, timeout));
alignmentData.push_back(offsetof(VkAcquireNextImageInfoKHR, semaphore));
alignmentData.push_back(FIELD_SIZEOF(VkAcquireNextImageInfoKHR, semaphore));
alignmentData.push_back(offsetof(VkAcquireNextImageInfoKHR, fence));
alignmentData.push_back(FIELD_SIZEOF(VkAcquireNextImageInfoKHR, fence));
alignmentData.push_back(offsetof(VkAcquireNextImageInfoKHR, deviceMask));
alignmentData.push_back(FIELD_SIZEOF(VkAcquireNextImageInfoKHR, deviceMask));
alignmentData.push_back(offsetof(VkDeviceGroupPresentInfoKHR, sType));
alignmentData.push_back(FIELD_SIZEOF(VkDeviceGroupPresentInfoKHR, sType));
alignmentData.push_back(offsetof(VkDeviceGroupPresentInfoKHR, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkDeviceGroupPresentInfoKHR, pNext));
alignmentData.push_back(offsetof(VkDeviceGroupPresentInfoKHR, swapchainCount));
alignmentData.push_back(FIELD_SIZEOF(VkDeviceGroupPresentInfoKHR, swapchainCount));
alignmentData.push_back(offsetof(VkDeviceGroupPresentInfoKHR, pDeviceMasks));
alignmentData.push_back(FIELD_SIZEOF(VkDeviceGroupPresentInfoKHR, pDeviceMasks));
alignmentData.push_back(offsetof(VkDeviceGroupPresentInfoKHR, mode));
alignmentData.push_back(FIELD_SIZEOF(VkDeviceGroupPresentInfoKHR, mode));
alignmentData.push_back(offsetof(VkDeviceGroupDeviceCreateInfo, sType));
alignmentData.push_back(FIELD_SIZEOF(VkDeviceGroupDeviceCreateInfo, sType));
alignmentData.push_back(offsetof(VkDeviceGroupDeviceCreateInfo, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkDeviceGroupDeviceCreateInfo, pNext));
alignmentData.push_back(offsetof(VkDeviceGroupDeviceCreateInfo, physicalDeviceCount));
alignmentData.push_back(FIELD_SIZEOF(VkDeviceGroupDeviceCreateInfo, physicalDeviceCount));
alignmentData.push_back(offsetof(VkDeviceGroupDeviceCreateInfo, pPhysicalDevices));
alignmentData.push_back(FIELD_SIZEOF(VkDeviceGroupDeviceCreateInfo, pPhysicalDevices));

alignmentData.push_back(offsetof(VkDeviceGroupSwapchainCreateInfoKHR, sType));
alignmentData.push_back(FIELD_SIZEOF(VkDeviceGroupSwapchainCreateInfoKHR, sType));
alignmentData.push_back(offsetof(VkDeviceGroupSwapchainCreateInfoKHR, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkDeviceGroupSwapchainCreateInfoKHR, pNext));
alignmentData.push_back(offsetof(VkDeviceGroupSwapchainCreateInfoKHR, modes));
alignmentData.push_back(FIELD_SIZEOF(VkDeviceGroupSwapchainCreateInfoKHR, modes));
alignmentData.push_back(offsetof(VkDescriptorUpdateTemplateEntry, dstBinding));
alignmentData.push_back(FIELD_SIZEOF(VkDescriptorUpdateTemplateEntry, dstBinding));
alignmentData.push_back(offsetof(VkDescriptorUpdateTemplateEntry, dstArrayElement));
alignmentData.push_back(FIELD_SIZEOF(VkDescriptorUpdateTemplateEntry, dstArrayElement));
alignmentData.push_back(offsetof(VkDescriptorUpdateTemplateEntry, descriptorCount));
alignmentData.push_back(FIELD_SIZEOF(VkDescriptorUpdateTemplateEntry, descriptorCount));
alignmentData.push_back(offsetof(VkDescriptorUpdateTemplateEntry, descriptorType));
alignmentData.push_back(FIELD_SIZEOF(VkDescriptorUpdateTemplateEntry, descriptorType));
alignmentData.push_back(offsetof(VkDescriptorUpdateTemplateEntry, offset));
alignmentData.push_back(FIELD_SIZEOF(VkDescriptorUpdateTemplateEntry, offset));
alignmentData.push_back(offsetof(VkDescriptorUpdateTemplateEntry, stride));
alignmentData.push_back(FIELD_SIZEOF(VkDescriptorUpdateTemplateEntry, stride));

alignmentData.push_back(offsetof(VkDescriptorUpdateTemplateCreateInfo, sType));
alignmentData.push_back(FIELD_SIZEOF(VkDescriptorUpdateTemplateCreateInfo, sType));
alignmentData.push_back(offsetof(VkDescriptorUpdateTemplateCreateInfo, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkDescriptorUpdateTemplateCreateInfo, pNext));
alignmentData.push_back(offsetof(VkDescriptorUpdateTemplateCreateInfo, flags));
alignmentData.push_back(FIELD_SIZEOF(VkDescriptorUpdateTemplateCreateInfo, flags));
alignmentData.push_back(offsetof(VkDescriptorUpdateTemplateCreateInfo, descriptorUpdateEntryCount));
alignmentData.push_back(FIELD_SIZEOF(VkDescriptorUpdateTemplateCreateInfo, descriptorUpdateEntryCount));
alignmentData.push_back(offsetof(VkDescriptorUpdateTemplateCreateInfo, pDescriptorUpdateEntries));
alignmentData.push_back(FIELD_SIZEOF(VkDescriptorUpdateTemplateCreateInfo, pDescriptorUpdateEntries));
alignmentData.push_back(offsetof(VkDescriptorUpdateTemplateCreateInfo, templateType));
alignmentData.push_back(FIELD_SIZEOF(VkDescriptorUpdateTemplateCreateInfo, templateType));
alignmentData.push_back(offsetof(VkDescriptorUpdateTemplateCreateInfo, descriptorSetLayout));
alignmentData.push_back(FIELD_SIZEOF(VkDescriptorUpdateTemplateCreateInfo, descriptorSetLayout));
alignmentData.push_back(offsetof(VkDescriptorUpdateTemplateCreateInfo, pipelineBindPoint));
alignmentData.push_back(FIELD_SIZEOF(VkDescriptorUpdateTemplateCreateInfo, pipelineBindPoint));
alignmentData.push_back(offsetof(VkDescriptorUpdateTemplateCreateInfo, pipelineLayout));
alignmentData.push_back(FIELD_SIZEOF(VkDescriptorUpdateTemplateCreateInfo, pipelineLayout));
alignmentData.push_back(offsetof(VkDescriptorUpdateTemplateCreateInfo, set));
alignmentData.push_back(FIELD_SIZEOF(VkDescriptorUpdateTemplateCreateInfo, set));

alignmentData.push_back(offsetof(VkXYColorEXT, x));
alignmentData.push_back(FIELD_SIZEOF(VkXYColorEXT, x));
alignmentData.push_back(offsetof(VkXYColorEXT, y));
alignmentData.push_back(FIELD_SIZEOF(VkXYColorEXT, y));
alignmentData.push_back(offsetof(VkPhysicalDevicePresentIdFeaturesKHR, sType));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDevicePresentIdFeaturesKHR, sType));
alignmentData.push_back(offsetof(VkPhysicalDevicePresentIdFeaturesKHR, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDevicePresentIdFeaturesKHR, pNext));
alignmentData.push_back(offsetof(VkPhysicalDevicePresentIdFeaturesKHR, presentId));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDevicePresentIdFeaturesKHR, presentId));
alignmentData.push_back(offsetof(VkPresentIdKHR, sType));
alignmentData.push_back(FIELD_SIZEOF(VkPresentIdKHR, sType));
alignmentData.push_back(offsetof(VkPresentIdKHR, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkPresentIdKHR, pNext));
alignmentData.push_back(offsetof(VkPresentIdKHR, swapchainCount));
alignmentData.push_back(FIELD_SIZEOF(VkPresentIdKHR, swapchainCount));
alignmentData.push_back(offsetof(VkPresentIdKHR, pPresentIds));
alignmentData.push_back(FIELD_SIZEOF(VkPresentIdKHR, pPresentIds));
alignmentData.push_back(offsetof(VkPhysicalDevicePresentWaitFeaturesKHR, sType));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDevicePresentWaitFeaturesKHR, sType));
alignmentData.push_back(offsetof(VkPhysicalDevicePresentWaitFeaturesKHR, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDevicePresentWaitFeaturesKHR, pNext));
alignmentData.push_back(offsetof(VkPhysicalDevicePresentWaitFeaturesKHR, presentWait));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDevicePresentWaitFeaturesKHR, presentWait));
alignmentData.push_back(offsetof(VkHdrMetadataEXT, sType));
alignmentData.push_back(FIELD_SIZEOF(VkHdrMetadataEXT, sType));
alignmentData.push_back(offsetof(VkHdrMetadataEXT, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkHdrMetadataEXT, pNext));
alignmentData.push_back(offsetof(VkHdrMetadataEXT, displayPrimaryRed));
alignmentData.push_back(FIELD_SIZEOF(VkHdrMetadataEXT, displayPrimaryRed));
alignmentData.push_back(offsetof(VkHdrMetadataEXT, displayPrimaryGreen));
alignmentData.push_back(FIELD_SIZEOF(VkHdrMetadataEXT, displayPrimaryGreen));
alignmentData.push_back(offsetof(VkHdrMetadataEXT, displayPrimaryBlue));
alignmentData.push_back(FIELD_SIZEOF(VkHdrMetadataEXT, displayPrimaryBlue));
alignmentData.push_back(offsetof(VkHdrMetadataEXT, whitePoint));
alignmentData.push_back(FIELD_SIZEOF(VkHdrMetadataEXT, whitePoint));
alignmentData.push_back(offsetof(VkHdrMetadataEXT, maxLuminance));
alignmentData.push_back(FIELD_SIZEOF(VkHdrMetadataEXT, maxLuminance));
alignmentData.push_back(offsetof(VkHdrMetadataEXT, minLuminance));
alignmentData.push_back(FIELD_SIZEOF(VkHdrMetadataEXT, minLuminance));
alignmentData.push_back(offsetof(VkHdrMetadataEXT, maxContentLightLevel));
alignmentData.push_back(FIELD_SIZEOF(VkHdrMetadataEXT, maxContentLightLevel));
alignmentData.push_back(offsetof(VkHdrMetadataEXT, maxFrameAverageLightLevel));
alignmentData.push_back(FIELD_SIZEOF(VkHdrMetadataEXT, maxFrameAverageLightLevel));
alignmentData.push_back(offsetof(VkInputAttachmentAspectReference, subpass));
alignmentData.push_back(FIELD_SIZEOF(VkInputAttachmentAspectReference, subpass));
alignmentData.push_back(offsetof(VkInputAttachmentAspectReference, inputAttachmentIndex));
alignmentData.push_back(FIELD_SIZEOF(VkInputAttachmentAspectReference, inputAttachmentIndex));
alignmentData.push_back(offsetof(VkInputAttachmentAspectReference, aspectMask));
alignmentData.push_back(FIELD_SIZEOF(VkInputAttachmentAspectReference, aspectMask));
alignmentData.push_back(offsetof(VkRenderPassInputAttachmentAspectCreateInfo, sType));
alignmentData.push_back(FIELD_SIZEOF(VkRenderPassInputAttachmentAspectCreateInfo, sType));
alignmentData.push_back(offsetof(VkRenderPassInputAttachmentAspectCreateInfo, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkRenderPassInputAttachmentAspectCreateInfo, pNext));
alignmentData.push_back(offsetof(VkRenderPassInputAttachmentAspectCreateInfo, aspectReferenceCount));
alignmentData.push_back(FIELD_SIZEOF(VkRenderPassInputAttachmentAspectCreateInfo, aspectReferenceCount));
alignmentData.push_back(offsetof(VkRenderPassInputAttachmentAspectCreateInfo, pAspectReferences));
alignmentData.push_back(FIELD_SIZEOF(VkRenderPassInputAttachmentAspectCreateInfo, pAspectReferences));
alignmentData.push_back(offsetof(VkPhysicalDeviceSurfaceInfo2KHR, sType));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceSurfaceInfo2KHR, sType));
alignmentData.push_back(offsetof(VkPhysicalDeviceSurfaceInfo2KHR, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceSurfaceInfo2KHR, pNext));
alignmentData.push_back(offsetof(VkPhysicalDeviceSurfaceInfo2KHR, surface));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceSurfaceInfo2KHR, surface));
alignmentData.push_back(offsetof(VkSurfaceCapabilities2KHR, sType));
alignmentData.push_back(FIELD_SIZEOF(VkSurfaceCapabilities2KHR, sType));
alignmentData.push_back(offsetof(VkSurfaceCapabilities2KHR, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkSurfaceCapabilities2KHR, pNext));
alignmentData.push_back(offsetof(VkSurfaceCapabilities2KHR, surfaceCapabilities));
alignmentData.push_back(FIELD_SIZEOF(VkSurfaceCapabilities2KHR, surfaceCapabilities));
alignmentData.push_back(offsetof(VkSurfaceFormat2KHR, sType));
alignmentData.push_back(FIELD_SIZEOF(VkSurfaceFormat2KHR, sType));
alignmentData.push_back(offsetof(VkSurfaceFormat2KHR, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkSurfaceFormat2KHR, pNext));
alignmentData.push_back(offsetof(VkSurfaceFormat2KHR, surfaceFormat));
alignmentData.push_back(FIELD_SIZEOF(VkSurfaceFormat2KHR, surfaceFormat));
alignmentData.push_back(offsetof(VkDisplayProperties2KHR, sType));
alignmentData.push_back(FIELD_SIZEOF(VkDisplayProperties2KHR, sType));
alignmentData.push_back(offsetof(VkDisplayProperties2KHR, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkDisplayProperties2KHR, pNext));
alignmentData.push_back(offsetof(VkDisplayProperties2KHR, displayProperties));
alignmentData.push_back(FIELD_SIZEOF(VkDisplayProperties2KHR, displayProperties));
alignmentData.push_back(offsetof(VkDisplayPlaneProperties2KHR, sType));
alignmentData.push_back(FIELD_SIZEOF(VkDisplayPlaneProperties2KHR, sType));
alignmentData.push_back(offsetof(VkDisplayPlaneProperties2KHR, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkDisplayPlaneProperties2KHR, pNext));
alignmentData.push_back(offsetof(VkDisplayPlaneProperties2KHR, displayPlaneProperties));
alignmentData.push_back(FIELD_SIZEOF(VkDisplayPlaneProperties2KHR, displayPlaneProperties));
alignmentData.push_back(offsetof(VkDisplayModeProperties2KHR, sType));
alignmentData.push_back(FIELD_SIZEOF(VkDisplayModeProperties2KHR, sType));
alignmentData.push_back(offsetof(VkDisplayModeProperties2KHR, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkDisplayModeProperties2KHR, pNext));
alignmentData.push_back(offsetof(VkDisplayModeProperties2KHR, displayModeProperties));
alignmentData.push_back(FIELD_SIZEOF(VkDisplayModeProperties2KHR, displayModeProperties));
alignmentData.push_back(offsetof(VkDisplayPlaneInfo2KHR, sType));
alignmentData.push_back(FIELD_SIZEOF(VkDisplayPlaneInfo2KHR, sType));
alignmentData.push_back(offsetof(VkDisplayPlaneInfo2KHR, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkDisplayPlaneInfo2KHR, pNext));
alignmentData.push_back(offsetof(VkDisplayPlaneInfo2KHR, mode));
alignmentData.push_back(FIELD_SIZEOF(VkDisplayPlaneInfo2KHR, mode));
alignmentData.push_back(offsetof(VkDisplayPlaneInfo2KHR, planeIndex));
alignmentData.push_back(FIELD_SIZEOF(VkDisplayPlaneInfo2KHR, planeIndex));
alignmentData.push_back(offsetof(VkDisplayPlaneCapabilities2KHR, sType));
alignmentData.push_back(FIELD_SIZEOF(VkDisplayPlaneCapabilities2KHR, sType));
alignmentData.push_back(offsetof(VkDisplayPlaneCapabilities2KHR, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkDisplayPlaneCapabilities2KHR, pNext));
alignmentData.push_back(offsetof(VkDisplayPlaneCapabilities2KHR, capabilities));
alignmentData.push_back(FIELD_SIZEOF(VkDisplayPlaneCapabilities2KHR, capabilities));
alignmentData.push_back(offsetof(VkSharedPresentSurfaceCapabilitiesKHR, sType));
alignmentData.push_back(FIELD_SIZEOF(VkSharedPresentSurfaceCapabilitiesKHR, sType));
alignmentData.push_back(offsetof(VkSharedPresentSurfaceCapabilitiesKHR, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkSharedPresentSurfaceCapabilitiesKHR, pNext));
alignmentData.push_back(offsetof(VkSharedPresentSurfaceCapabilitiesKHR, sharedPresentSupportedUsageFlags));
alignmentData.push_back(FIELD_SIZEOF(VkSharedPresentSurfaceCapabilitiesKHR, sharedPresentSupportedUsageFlags));
alignmentData.push_back(offsetof(VkPhysicalDevice16BitStorageFeatures, sType));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDevice16BitStorageFeatures, sType));
alignmentData.push_back(offsetof(VkPhysicalDevice16BitStorageFeatures, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDevice16BitStorageFeatures, pNext));
alignmentData.push_back(offsetof(VkPhysicalDevice16BitStorageFeatures, storageBuffer16BitAccess));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDevice16BitStorageFeatures, storageBuffer16BitAccess));
alignmentData.push_back(offsetof(VkPhysicalDevice16BitStorageFeatures, uniformAndStorageBuffer16BitAccess));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDevice16BitStorageFeatures, uniformAndStorageBuffer16BitAccess));
alignmentData.push_back(offsetof(VkPhysicalDevice16BitStorageFeatures, storagePushConstant16));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDevice16BitStorageFeatures, storagePushConstant16));
alignmentData.push_back(offsetof(VkPhysicalDevice16BitStorageFeatures, storageInputOutput16));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDevice16BitStorageFeatures, storageInputOutput16));

alignmentData.push_back(offsetof(VkPhysicalDeviceSubgroupProperties, sType));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceSubgroupProperties, sType));
alignmentData.push_back(offsetof(VkPhysicalDeviceSubgroupProperties, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceSubgroupProperties, pNext));
alignmentData.push_back(offsetof(VkPhysicalDeviceSubgroupProperties, subgroupSize));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceSubgroupProperties, subgroupSize));
alignmentData.push_back(offsetof(VkPhysicalDeviceSubgroupProperties, supportedStages));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceSubgroupProperties, supportedStages));
alignmentData.push_back(offsetof(VkPhysicalDeviceSubgroupProperties, supportedOperations));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceSubgroupProperties, supportedOperations));
alignmentData.push_back(offsetof(VkPhysicalDeviceSubgroupProperties, quadOperationsInAllStages));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceSubgroupProperties, quadOperationsInAllStages));
alignmentData.push_back(offsetof(VkPhysicalDeviceShaderSubgroupExtendedTypesFeatures, sType));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceShaderSubgroupExtendedTypesFeatures, sType));
alignmentData.push_back(offsetof(VkPhysicalDeviceShaderSubgroupExtendedTypesFeatures, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceShaderSubgroupExtendedTypesFeatures, pNext));
alignmentData.push_back(offsetof(VkPhysicalDeviceShaderSubgroupExtendedTypesFeatures, shaderSubgroupExtendedTypes));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceShaderSubgroupExtendedTypesFeatures, shaderSubgroupExtendedTypes));

alignmentData.push_back(offsetof(VkBufferMemoryRequirementsInfo2, sType));
alignmentData.push_back(FIELD_SIZEOF(VkBufferMemoryRequirementsInfo2, sType));
alignmentData.push_back(offsetof(VkBufferMemoryRequirementsInfo2, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkBufferMemoryRequirementsInfo2, pNext));
alignmentData.push_back(offsetof(VkBufferMemoryRequirementsInfo2, buffer));
alignmentData.push_back(FIELD_SIZEOF(VkBufferMemoryRequirementsInfo2, buffer));

alignmentData.push_back(offsetof(VkDeviceBufferMemoryRequirements, sType));
alignmentData.push_back(FIELD_SIZEOF(VkDeviceBufferMemoryRequirements, sType));
alignmentData.push_back(offsetof(VkDeviceBufferMemoryRequirements, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkDeviceBufferMemoryRequirements, pNext));
alignmentData.push_back(offsetof(VkDeviceBufferMemoryRequirements, pCreateInfo));
alignmentData.push_back(FIELD_SIZEOF(VkDeviceBufferMemoryRequirements, pCreateInfo));
alignmentData.push_back(offsetof(VkImageMemoryRequirementsInfo2, sType));
alignmentData.push_back(FIELD_SIZEOF(VkImageMemoryRequirementsInfo2, sType));
alignmentData.push_back(offsetof(VkImageMemoryRequirementsInfo2, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkImageMemoryRequirementsInfo2, pNext));
alignmentData.push_back(offsetof(VkImageMemoryRequirementsInfo2, image));
alignmentData.push_back(FIELD_SIZEOF(VkImageMemoryRequirementsInfo2, image));

alignmentData.push_back(offsetof(VkImageSparseMemoryRequirementsInfo2, sType));
alignmentData.push_back(FIELD_SIZEOF(VkImageSparseMemoryRequirementsInfo2, sType));
alignmentData.push_back(offsetof(VkImageSparseMemoryRequirementsInfo2, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkImageSparseMemoryRequirementsInfo2, pNext));
alignmentData.push_back(offsetof(VkImageSparseMemoryRequirementsInfo2, image));
alignmentData.push_back(FIELD_SIZEOF(VkImageSparseMemoryRequirementsInfo2, image));

alignmentData.push_back(offsetof(VkDeviceImageMemoryRequirements, sType));
alignmentData.push_back(FIELD_SIZEOF(VkDeviceImageMemoryRequirements, sType));
alignmentData.push_back(offsetof(VkDeviceImageMemoryRequirements, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkDeviceImageMemoryRequirements, pNext));
alignmentData.push_back(offsetof(VkDeviceImageMemoryRequirements, pCreateInfo));
alignmentData.push_back(FIELD_SIZEOF(VkDeviceImageMemoryRequirements, pCreateInfo));
alignmentData.push_back(offsetof(VkDeviceImageMemoryRequirements, planeAspect));
alignmentData.push_back(FIELD_SIZEOF(VkDeviceImageMemoryRequirements, planeAspect));
alignmentData.push_back(offsetof(VkMemoryRequirements2, sType));
alignmentData.push_back(FIELD_SIZEOF(VkMemoryRequirements2, sType));
alignmentData.push_back(offsetof(VkMemoryRequirements2, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkMemoryRequirements2, pNext));
alignmentData.push_back(offsetof(VkMemoryRequirements2, memoryRequirements));
alignmentData.push_back(FIELD_SIZEOF(VkMemoryRequirements2, memoryRequirements));
alignmentData.push_back(offsetof(VkSparseImageMemoryRequirements2, sType));
alignmentData.push_back(FIELD_SIZEOF(VkSparseImageMemoryRequirements2, sType));
alignmentData.push_back(offsetof(VkSparseImageMemoryRequirements2, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkSparseImageMemoryRequirements2, pNext));
alignmentData.push_back(offsetof(VkSparseImageMemoryRequirements2, memoryRequirements));
alignmentData.push_back(FIELD_SIZEOF(VkSparseImageMemoryRequirements2, memoryRequirements));

alignmentData.push_back(offsetof(VkPhysicalDevicePointClippingProperties, sType));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDevicePointClippingProperties, sType));
alignmentData.push_back(offsetof(VkPhysicalDevicePointClippingProperties, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDevicePointClippingProperties, pNext));
alignmentData.push_back(offsetof(VkPhysicalDevicePointClippingProperties, pointClippingBehavior));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDevicePointClippingProperties, pointClippingBehavior));
alignmentData.push_back(offsetof(VkMemoryDedicatedRequirements, sType));
alignmentData.push_back(FIELD_SIZEOF(VkMemoryDedicatedRequirements, sType));
alignmentData.push_back(offsetof(VkMemoryDedicatedRequirements, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkMemoryDedicatedRequirements, pNext));
alignmentData.push_back(offsetof(VkMemoryDedicatedRequirements, prefersDedicatedAllocation));
alignmentData.push_back(FIELD_SIZEOF(VkMemoryDedicatedRequirements, prefersDedicatedAllocation));
alignmentData.push_back(offsetof(VkMemoryDedicatedRequirements, requiresDedicatedAllocation));
alignmentData.push_back(FIELD_SIZEOF(VkMemoryDedicatedRequirements, requiresDedicatedAllocation));

alignmentData.push_back(offsetof(VkMemoryDedicatedAllocateInfo, sType));
alignmentData.push_back(FIELD_SIZEOF(VkMemoryDedicatedAllocateInfo, sType));
alignmentData.push_back(offsetof(VkMemoryDedicatedAllocateInfo, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkMemoryDedicatedAllocateInfo, pNext));
alignmentData.push_back(offsetof(VkMemoryDedicatedAllocateInfo, image));
alignmentData.push_back(FIELD_SIZEOF(VkMemoryDedicatedAllocateInfo, image));
alignmentData.push_back(offsetof(VkMemoryDedicatedAllocateInfo, buffer));
alignmentData.push_back(FIELD_SIZEOF(VkMemoryDedicatedAllocateInfo, buffer));

alignmentData.push_back(offsetof(VkImageViewUsageCreateInfo, sType));
alignmentData.push_back(FIELD_SIZEOF(VkImageViewUsageCreateInfo, sType));
alignmentData.push_back(offsetof(VkImageViewUsageCreateInfo, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkImageViewUsageCreateInfo, pNext));
alignmentData.push_back(offsetof(VkImageViewUsageCreateInfo, usage));
alignmentData.push_back(FIELD_SIZEOF(VkImageViewUsageCreateInfo, usage));
alignmentData.push_back(offsetof(VkPipelineTessellationDomainOriginStateCreateInfo, sType));
alignmentData.push_back(FIELD_SIZEOF(VkPipelineTessellationDomainOriginStateCreateInfo, sType));
alignmentData.push_back(offsetof(VkPipelineTessellationDomainOriginStateCreateInfo, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkPipelineTessellationDomainOriginStateCreateInfo, pNext));
alignmentData.push_back(offsetof(VkPipelineTessellationDomainOriginStateCreateInfo, domainOrigin));
alignmentData.push_back(FIELD_SIZEOF(VkPipelineTessellationDomainOriginStateCreateInfo, domainOrigin));
alignmentData.push_back(offsetof(VkSamplerYcbcrConversionInfo, sType));
alignmentData.push_back(FIELD_SIZEOF(VkSamplerYcbcrConversionInfo, sType));
alignmentData.push_back(offsetof(VkSamplerYcbcrConversionInfo, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkSamplerYcbcrConversionInfo, pNext));
alignmentData.push_back(offsetof(VkSamplerYcbcrConversionInfo, conversion));
alignmentData.push_back(FIELD_SIZEOF(VkSamplerYcbcrConversionInfo, conversion));

alignmentData.push_back(offsetof(VkSamplerYcbcrConversionCreateInfo, sType));
alignmentData.push_back(FIELD_SIZEOF(VkSamplerYcbcrConversionCreateInfo, sType));
alignmentData.push_back(offsetof(VkSamplerYcbcrConversionCreateInfo, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkSamplerYcbcrConversionCreateInfo, pNext));
alignmentData.push_back(offsetof(VkSamplerYcbcrConversionCreateInfo, format));
alignmentData.push_back(FIELD_SIZEOF(VkSamplerYcbcrConversionCreateInfo, format));
alignmentData.push_back(offsetof(VkSamplerYcbcrConversionCreateInfo, ycbcrModel));
alignmentData.push_back(FIELD_SIZEOF(VkSamplerYcbcrConversionCreateInfo, ycbcrModel));
alignmentData.push_back(offsetof(VkSamplerYcbcrConversionCreateInfo, ycbcrRange));
alignmentData.push_back(FIELD_SIZEOF(VkSamplerYcbcrConversionCreateInfo, ycbcrRange));
alignmentData.push_back(offsetof(VkSamplerYcbcrConversionCreateInfo, components));
alignmentData.push_back(FIELD_SIZEOF(VkSamplerYcbcrConversionCreateInfo, components));
alignmentData.push_back(offsetof(VkSamplerYcbcrConversionCreateInfo, xChromaOffset));
alignmentData.push_back(FIELD_SIZEOF(VkSamplerYcbcrConversionCreateInfo, xChromaOffset));
alignmentData.push_back(offsetof(VkSamplerYcbcrConversionCreateInfo, yChromaOffset));
alignmentData.push_back(FIELD_SIZEOF(VkSamplerYcbcrConversionCreateInfo, yChromaOffset));
alignmentData.push_back(offsetof(VkSamplerYcbcrConversionCreateInfo, chromaFilter));
alignmentData.push_back(FIELD_SIZEOF(VkSamplerYcbcrConversionCreateInfo, chromaFilter));
alignmentData.push_back(offsetof(VkSamplerYcbcrConversionCreateInfo, forceExplicitReconstruction));
alignmentData.push_back(FIELD_SIZEOF(VkSamplerYcbcrConversionCreateInfo, forceExplicitReconstruction));

alignmentData.push_back(offsetof(VkBindImagePlaneMemoryInfo, sType));
alignmentData.push_back(FIELD_SIZEOF(VkBindImagePlaneMemoryInfo, sType));
alignmentData.push_back(offsetof(VkBindImagePlaneMemoryInfo, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkBindImagePlaneMemoryInfo, pNext));
alignmentData.push_back(offsetof(VkBindImagePlaneMemoryInfo, planeAspect));
alignmentData.push_back(FIELD_SIZEOF(VkBindImagePlaneMemoryInfo, planeAspect));

alignmentData.push_back(offsetof(VkImagePlaneMemoryRequirementsInfo, sType));
alignmentData.push_back(FIELD_SIZEOF(VkImagePlaneMemoryRequirementsInfo, sType));
alignmentData.push_back(offsetof(VkImagePlaneMemoryRequirementsInfo, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkImagePlaneMemoryRequirementsInfo, pNext));
alignmentData.push_back(offsetof(VkImagePlaneMemoryRequirementsInfo, planeAspect));
alignmentData.push_back(FIELD_SIZEOF(VkImagePlaneMemoryRequirementsInfo, planeAspect));

alignmentData.push_back(offsetof(VkPhysicalDeviceSamplerYcbcrConversionFeatures, sType));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceSamplerYcbcrConversionFeatures, sType));
alignmentData.push_back(offsetof(VkPhysicalDeviceSamplerYcbcrConversionFeatures, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceSamplerYcbcrConversionFeatures, pNext));
alignmentData.push_back(offsetof(VkPhysicalDeviceSamplerYcbcrConversionFeatures, samplerYcbcrConversion));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceSamplerYcbcrConversionFeatures, samplerYcbcrConversion));

alignmentData.push_back(offsetof(VkSamplerYcbcrConversionImageFormatProperties, sType));
alignmentData.push_back(FIELD_SIZEOF(VkSamplerYcbcrConversionImageFormatProperties, sType));
alignmentData.push_back(offsetof(VkSamplerYcbcrConversionImageFormatProperties, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkSamplerYcbcrConversionImageFormatProperties, pNext));
alignmentData.push_back(offsetof(VkSamplerYcbcrConversionImageFormatProperties, combinedImageSamplerDescriptorCount));
alignmentData.push_back(FIELD_SIZEOF(VkSamplerYcbcrConversionImageFormatProperties, combinedImageSamplerDescriptorCount));

alignmentData.push_back(offsetof(VkProtectedSubmitInfo, sType));
alignmentData.push_back(FIELD_SIZEOF(VkProtectedSubmitInfo, sType));
alignmentData.push_back(offsetof(VkProtectedSubmitInfo, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkProtectedSubmitInfo, pNext));
alignmentData.push_back(offsetof(VkProtectedSubmitInfo, protectedSubmit));
alignmentData.push_back(FIELD_SIZEOF(VkProtectedSubmitInfo, protectedSubmit));
alignmentData.push_back(offsetof(VkPhysicalDeviceProtectedMemoryFeatures, sType));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceProtectedMemoryFeatures, sType));
alignmentData.push_back(offsetof(VkPhysicalDeviceProtectedMemoryFeatures, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceProtectedMemoryFeatures, pNext));
alignmentData.push_back(offsetof(VkPhysicalDeviceProtectedMemoryFeatures, protectedMemory));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceProtectedMemoryFeatures, protectedMemory));
alignmentData.push_back(offsetof(VkPhysicalDeviceProtectedMemoryProperties, sType));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceProtectedMemoryProperties, sType));
alignmentData.push_back(offsetof(VkPhysicalDeviceProtectedMemoryProperties, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceProtectedMemoryProperties, pNext));
alignmentData.push_back(offsetof(VkPhysicalDeviceProtectedMemoryProperties, protectedNoFault));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceProtectedMemoryProperties, protectedNoFault));
alignmentData.push_back(offsetof(VkDeviceQueueInfo2, sType));
alignmentData.push_back(FIELD_SIZEOF(VkDeviceQueueInfo2, sType));
alignmentData.push_back(offsetof(VkDeviceQueueInfo2, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkDeviceQueueInfo2, pNext));
alignmentData.push_back(offsetof(VkDeviceQueueInfo2, flags));
alignmentData.push_back(FIELD_SIZEOF(VkDeviceQueueInfo2, flags));
alignmentData.push_back(offsetof(VkDeviceQueueInfo2, queueFamilyIndex));
alignmentData.push_back(FIELD_SIZEOF(VkDeviceQueueInfo2, queueFamilyIndex));
alignmentData.push_back(offsetof(VkDeviceQueueInfo2, queueIndex));
alignmentData.push_back(FIELD_SIZEOF(VkDeviceQueueInfo2, queueIndex));
alignmentData.push_back(offsetof(VkPhysicalDeviceSamplerFilterMinmaxProperties, sType));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceSamplerFilterMinmaxProperties, sType));
alignmentData.push_back(offsetof(VkPhysicalDeviceSamplerFilterMinmaxProperties, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceSamplerFilterMinmaxProperties, pNext));
alignmentData.push_back(offsetof(VkPhysicalDeviceSamplerFilterMinmaxProperties, filterMinmaxSingleComponentFormats));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceSamplerFilterMinmaxProperties, filterMinmaxSingleComponentFormats));
alignmentData.push_back(offsetof(VkPhysicalDeviceSamplerFilterMinmaxProperties, filterMinmaxImageComponentMapping));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceSamplerFilterMinmaxProperties, filterMinmaxImageComponentMapping));

alignmentData.push_back(offsetof(VkSampleLocationEXT, x));
alignmentData.push_back(FIELD_SIZEOF(VkSampleLocationEXT, x));
alignmentData.push_back(offsetof(VkSampleLocationEXT, y));
alignmentData.push_back(FIELD_SIZEOF(VkSampleLocationEXT, y));
alignmentData.push_back(offsetof(VkSampleLocationsInfoEXT, sType));
alignmentData.push_back(FIELD_SIZEOF(VkSampleLocationsInfoEXT, sType));
alignmentData.push_back(offsetof(VkSampleLocationsInfoEXT, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkSampleLocationsInfoEXT, pNext));
alignmentData.push_back(offsetof(VkSampleLocationsInfoEXT, sampleLocationsPerPixel));
alignmentData.push_back(FIELD_SIZEOF(VkSampleLocationsInfoEXT, sampleLocationsPerPixel));
alignmentData.push_back(offsetof(VkSampleLocationsInfoEXT, sampleLocationGridSize));
alignmentData.push_back(FIELD_SIZEOF(VkSampleLocationsInfoEXT, sampleLocationGridSize));
alignmentData.push_back(offsetof(VkSampleLocationsInfoEXT, sampleLocationsCount));
alignmentData.push_back(FIELD_SIZEOF(VkSampleLocationsInfoEXT, sampleLocationsCount));
alignmentData.push_back(offsetof(VkSampleLocationsInfoEXT, pSampleLocations));
alignmentData.push_back(FIELD_SIZEOF(VkSampleLocationsInfoEXT, pSampleLocations));
alignmentData.push_back(offsetof(VkAttachmentSampleLocationsEXT, attachmentIndex));
alignmentData.push_back(FIELD_SIZEOF(VkAttachmentSampleLocationsEXT, attachmentIndex));
alignmentData.push_back(offsetof(VkAttachmentSampleLocationsEXT, sampleLocationsInfo));
alignmentData.push_back(FIELD_SIZEOF(VkAttachmentSampleLocationsEXT, sampleLocationsInfo));
alignmentData.push_back(offsetof(VkSubpassSampleLocationsEXT, subpassIndex));
alignmentData.push_back(FIELD_SIZEOF(VkSubpassSampleLocationsEXT, subpassIndex));
alignmentData.push_back(offsetof(VkSubpassSampleLocationsEXT, sampleLocationsInfo));
alignmentData.push_back(FIELD_SIZEOF(VkSubpassSampleLocationsEXT, sampleLocationsInfo));
alignmentData.push_back(offsetof(VkRenderPassSampleLocationsBeginInfoEXT, sType));
alignmentData.push_back(FIELD_SIZEOF(VkRenderPassSampleLocationsBeginInfoEXT, sType));
alignmentData.push_back(offsetof(VkRenderPassSampleLocationsBeginInfoEXT, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkRenderPassSampleLocationsBeginInfoEXT, pNext));
alignmentData.push_back(offsetof(VkRenderPassSampleLocationsBeginInfoEXT, attachmentInitialSampleLocationsCount));
alignmentData.push_back(FIELD_SIZEOF(VkRenderPassSampleLocationsBeginInfoEXT, attachmentInitialSampleLocationsCount));
alignmentData.push_back(offsetof(VkRenderPassSampleLocationsBeginInfoEXT, pAttachmentInitialSampleLocations));
alignmentData.push_back(FIELD_SIZEOF(VkRenderPassSampleLocationsBeginInfoEXT, pAttachmentInitialSampleLocations));
alignmentData.push_back(offsetof(VkRenderPassSampleLocationsBeginInfoEXT, postSubpassSampleLocationsCount));
alignmentData.push_back(FIELD_SIZEOF(VkRenderPassSampleLocationsBeginInfoEXT, postSubpassSampleLocationsCount));
alignmentData.push_back(offsetof(VkRenderPassSampleLocationsBeginInfoEXT, pPostSubpassSampleLocations));
alignmentData.push_back(FIELD_SIZEOF(VkRenderPassSampleLocationsBeginInfoEXT, pPostSubpassSampleLocations));
alignmentData.push_back(offsetof(VkPipelineSampleLocationsStateCreateInfoEXT, sType));
alignmentData.push_back(FIELD_SIZEOF(VkPipelineSampleLocationsStateCreateInfoEXT, sType));
alignmentData.push_back(offsetof(VkPipelineSampleLocationsStateCreateInfoEXT, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkPipelineSampleLocationsStateCreateInfoEXT, pNext));
alignmentData.push_back(offsetof(VkPipelineSampleLocationsStateCreateInfoEXT, sampleLocationsEnable));
alignmentData.push_back(FIELD_SIZEOF(VkPipelineSampleLocationsStateCreateInfoEXT, sampleLocationsEnable));
alignmentData.push_back(offsetof(VkPipelineSampleLocationsStateCreateInfoEXT, sampleLocationsInfo));
alignmentData.push_back(FIELD_SIZEOF(VkPipelineSampleLocationsStateCreateInfoEXT, sampleLocationsInfo));
alignmentData.push_back(offsetof(VkPhysicalDeviceSampleLocationsPropertiesEXT, sType));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceSampleLocationsPropertiesEXT, sType));
alignmentData.push_back(offsetof(VkPhysicalDeviceSampleLocationsPropertiesEXT, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceSampleLocationsPropertiesEXT, pNext));
alignmentData.push_back(offsetof(VkPhysicalDeviceSampleLocationsPropertiesEXT, sampleLocationSampleCounts));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceSampleLocationsPropertiesEXT, sampleLocationSampleCounts));
alignmentData.push_back(offsetof(VkPhysicalDeviceSampleLocationsPropertiesEXT, maxSampleLocationGridSize));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceSampleLocationsPropertiesEXT, maxSampleLocationGridSize));
alignmentData.push_back(offsetof(VkPhysicalDeviceSampleLocationsPropertiesEXT, sampleLocationCoordinateRange));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceSampleLocationsPropertiesEXT, sampleLocationCoordinateRange));
alignmentData.push_back(offsetof(VkPhysicalDeviceSampleLocationsPropertiesEXT, sampleLocationSubPixelBits));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceSampleLocationsPropertiesEXT, sampleLocationSubPixelBits));
alignmentData.push_back(offsetof(VkPhysicalDeviceSampleLocationsPropertiesEXT, variableSampleLocations));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceSampleLocationsPropertiesEXT, variableSampleLocations));
alignmentData.push_back(offsetof(VkMultisamplePropertiesEXT, sType));
alignmentData.push_back(FIELD_SIZEOF(VkMultisamplePropertiesEXT, sType));
alignmentData.push_back(offsetof(VkMultisamplePropertiesEXT, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkMultisamplePropertiesEXT, pNext));
alignmentData.push_back(offsetof(VkMultisamplePropertiesEXT, maxSampleLocationGridSize));
alignmentData.push_back(FIELD_SIZEOF(VkMultisamplePropertiesEXT, maxSampleLocationGridSize));
alignmentData.push_back(offsetof(VkSamplerReductionModeCreateInfo, sType));
alignmentData.push_back(FIELD_SIZEOF(VkSamplerReductionModeCreateInfo, sType));
alignmentData.push_back(offsetof(VkSamplerReductionModeCreateInfo, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkSamplerReductionModeCreateInfo, pNext));
alignmentData.push_back(offsetof(VkSamplerReductionModeCreateInfo, reductionMode));
alignmentData.push_back(FIELD_SIZEOF(VkSamplerReductionModeCreateInfo, reductionMode));

alignmentData.push_back(offsetof(VkPhysicalDeviceMultiDrawFeaturesEXT, sType));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceMultiDrawFeaturesEXT, sType));
alignmentData.push_back(offsetof(VkPhysicalDeviceMultiDrawFeaturesEXT, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceMultiDrawFeaturesEXT, pNext));
alignmentData.push_back(offsetof(VkPhysicalDeviceMultiDrawFeaturesEXT, multiDraw));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceMultiDrawFeaturesEXT, multiDraw));
alignmentData.push_back(offsetof(VkPhysicalDeviceInlineUniformBlockFeatures, sType));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceInlineUniformBlockFeatures, sType));
alignmentData.push_back(offsetof(VkPhysicalDeviceInlineUniformBlockFeatures, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceInlineUniformBlockFeatures, pNext));
alignmentData.push_back(offsetof(VkPhysicalDeviceInlineUniformBlockFeatures, inlineUniformBlock));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceInlineUniformBlockFeatures, inlineUniformBlock));
alignmentData.push_back(offsetof(VkPhysicalDeviceInlineUniformBlockFeatures, descriptorBindingInlineUniformBlockUpdateAfterBind));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceInlineUniformBlockFeatures, descriptorBindingInlineUniformBlockUpdateAfterBind));

alignmentData.push_back(offsetof(VkPhysicalDeviceInlineUniformBlockProperties, sType));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceInlineUniformBlockProperties, sType));
alignmentData.push_back(offsetof(VkPhysicalDeviceInlineUniformBlockProperties, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceInlineUniformBlockProperties, pNext));
alignmentData.push_back(offsetof(VkPhysicalDeviceInlineUniformBlockProperties, maxInlineUniformBlockSize));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceInlineUniformBlockProperties, maxInlineUniformBlockSize));
alignmentData.push_back(offsetof(VkPhysicalDeviceInlineUniformBlockProperties, maxPerStageDescriptorInlineUniformBlocks));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceInlineUniformBlockProperties, maxPerStageDescriptorInlineUniformBlocks));
alignmentData.push_back(offsetof(VkPhysicalDeviceInlineUniformBlockProperties, maxPerStageDescriptorUpdateAfterBindInlineUniformBlocks));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceInlineUniformBlockProperties, maxPerStageDescriptorUpdateAfterBindInlineUniformBlocks));
alignmentData.push_back(offsetof(VkPhysicalDeviceInlineUniformBlockProperties, maxDescriptorSetInlineUniformBlocks));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceInlineUniformBlockProperties, maxDescriptorSetInlineUniformBlocks));
alignmentData.push_back(offsetof(VkPhysicalDeviceInlineUniformBlockProperties, maxDescriptorSetUpdateAfterBindInlineUniformBlocks));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceInlineUniformBlockProperties, maxDescriptorSetUpdateAfterBindInlineUniformBlocks));

alignmentData.push_back(offsetof(VkWriteDescriptorSetInlineUniformBlock, sType));
alignmentData.push_back(FIELD_SIZEOF(VkWriteDescriptorSetInlineUniformBlock, sType));
alignmentData.push_back(offsetof(VkWriteDescriptorSetInlineUniformBlock, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkWriteDescriptorSetInlineUniformBlock, pNext));
alignmentData.push_back(offsetof(VkWriteDescriptorSetInlineUniformBlock, dataSize));
alignmentData.push_back(FIELD_SIZEOF(VkWriteDescriptorSetInlineUniformBlock, dataSize));
alignmentData.push_back(offsetof(VkWriteDescriptorSetInlineUniformBlock, pData));
alignmentData.push_back(FIELD_SIZEOF(VkWriteDescriptorSetInlineUniformBlock, pData));

alignmentData.push_back(offsetof(VkDescriptorPoolInlineUniformBlockCreateInfo, sType));
alignmentData.push_back(FIELD_SIZEOF(VkDescriptorPoolInlineUniformBlockCreateInfo, sType));
alignmentData.push_back(offsetof(VkDescriptorPoolInlineUniformBlockCreateInfo, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkDescriptorPoolInlineUniformBlockCreateInfo, pNext));
alignmentData.push_back(offsetof(VkDescriptorPoolInlineUniformBlockCreateInfo, maxInlineUniformBlockBindings));
alignmentData.push_back(FIELD_SIZEOF(VkDescriptorPoolInlineUniformBlockCreateInfo, maxInlineUniformBlockBindings));

alignmentData.push_back(offsetof(VkImageFormatListCreateInfo, sType));
alignmentData.push_back(FIELD_SIZEOF(VkImageFormatListCreateInfo, sType));
alignmentData.push_back(offsetof(VkImageFormatListCreateInfo, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkImageFormatListCreateInfo, pNext));
alignmentData.push_back(offsetof(VkImageFormatListCreateInfo, viewFormatCount));
alignmentData.push_back(FIELD_SIZEOF(VkImageFormatListCreateInfo, viewFormatCount));
alignmentData.push_back(offsetof(VkImageFormatListCreateInfo, pViewFormats));
alignmentData.push_back(FIELD_SIZEOF(VkImageFormatListCreateInfo, pViewFormats));

alignmentData.push_back(offsetof(VkValidationCacheCreateInfoEXT, sType));
alignmentData.push_back(FIELD_SIZEOF(VkValidationCacheCreateInfoEXT, sType));
alignmentData.push_back(offsetof(VkValidationCacheCreateInfoEXT, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkValidationCacheCreateInfoEXT, pNext));
alignmentData.push_back(offsetof(VkValidationCacheCreateInfoEXT, flags));
alignmentData.push_back(FIELD_SIZEOF(VkValidationCacheCreateInfoEXT, flags));
alignmentData.push_back(offsetof(VkValidationCacheCreateInfoEXT, initialDataSize));
alignmentData.push_back(FIELD_SIZEOF(VkValidationCacheCreateInfoEXT, initialDataSize));
alignmentData.push_back(offsetof(VkValidationCacheCreateInfoEXT, pInitialData));
alignmentData.push_back(FIELD_SIZEOF(VkValidationCacheCreateInfoEXT, pInitialData));
alignmentData.push_back(offsetof(VkShaderModuleValidationCacheCreateInfoEXT, sType));
alignmentData.push_back(FIELD_SIZEOF(VkShaderModuleValidationCacheCreateInfoEXT, sType));
alignmentData.push_back(offsetof(VkShaderModuleValidationCacheCreateInfoEXT, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkShaderModuleValidationCacheCreateInfoEXT, pNext));
alignmentData.push_back(offsetof(VkShaderModuleValidationCacheCreateInfoEXT, validationCache));
alignmentData.push_back(FIELD_SIZEOF(VkShaderModuleValidationCacheCreateInfoEXT, validationCache));
alignmentData.push_back(offsetof(VkPhysicalDeviceMaintenance3Properties, sType));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceMaintenance3Properties, sType));
alignmentData.push_back(offsetof(VkPhysicalDeviceMaintenance3Properties, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceMaintenance3Properties, pNext));
alignmentData.push_back(offsetof(VkPhysicalDeviceMaintenance3Properties, maxPerSetDescriptors));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceMaintenance3Properties, maxPerSetDescriptors));
alignmentData.push_back(offsetof(VkPhysicalDeviceMaintenance3Properties, maxMemoryAllocationSize));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceMaintenance3Properties, maxMemoryAllocationSize));
alignmentData.push_back(offsetof(VkPhysicalDeviceMaintenance4Features, sType));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceMaintenance4Features, sType));
alignmentData.push_back(offsetof(VkPhysicalDeviceMaintenance4Features, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceMaintenance4Features, pNext));
alignmentData.push_back(offsetof(VkPhysicalDeviceMaintenance4Features, maintenance4));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceMaintenance4Features, maintenance4));
alignmentData.push_back(offsetof(VkPhysicalDeviceMaintenance4Properties, sType));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceMaintenance4Properties, sType));
alignmentData.push_back(offsetof(VkPhysicalDeviceMaintenance4Properties, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceMaintenance4Properties, pNext));
alignmentData.push_back(offsetof(VkPhysicalDeviceMaintenance4Properties, maxBufferSize));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceMaintenance4Properties, maxBufferSize));
alignmentData.push_back(offsetof(VkDescriptorSetLayoutSupport, sType));
alignmentData.push_back(FIELD_SIZEOF(VkDescriptorSetLayoutSupport, sType));
alignmentData.push_back(offsetof(VkDescriptorSetLayoutSupport, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkDescriptorSetLayoutSupport, pNext));
alignmentData.push_back(offsetof(VkDescriptorSetLayoutSupport, supported));
alignmentData.push_back(FIELD_SIZEOF(VkDescriptorSetLayoutSupport, supported));
alignmentData.push_back(offsetof(VkPhysicalDeviceShaderDrawParametersFeatures, sType));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceShaderDrawParametersFeatures, sType));
alignmentData.push_back(offsetof(VkPhysicalDeviceShaderDrawParametersFeatures, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceShaderDrawParametersFeatures, pNext));
alignmentData.push_back(offsetof(VkPhysicalDeviceShaderDrawParametersFeatures, shaderDrawParameters));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceShaderDrawParametersFeatures, shaderDrawParameters));

alignmentData.push_back(offsetof(VkPhysicalDeviceShaderFloat16Int8Features, sType));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceShaderFloat16Int8Features, sType));
alignmentData.push_back(offsetof(VkPhysicalDeviceShaderFloat16Int8Features, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceShaderFloat16Int8Features, pNext));
alignmentData.push_back(offsetof(VkPhysicalDeviceShaderFloat16Int8Features, shaderFloat16));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceShaderFloat16Int8Features, shaderFloat16));
alignmentData.push_back(offsetof(VkPhysicalDeviceShaderFloat16Int8Features, shaderInt8));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceShaderFloat16Int8Features, shaderInt8));


alignmentData.push_back(offsetof(VkPhysicalDeviceFloatControlsProperties, sType));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceFloatControlsProperties, sType));
alignmentData.push_back(offsetof(VkPhysicalDeviceFloatControlsProperties, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceFloatControlsProperties, pNext));
alignmentData.push_back(offsetof(VkPhysicalDeviceFloatControlsProperties, denormBehaviorIndependence));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceFloatControlsProperties, denormBehaviorIndependence));
alignmentData.push_back(offsetof(VkPhysicalDeviceFloatControlsProperties, roundingModeIndependence));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceFloatControlsProperties, roundingModeIndependence));
alignmentData.push_back(offsetof(VkPhysicalDeviceFloatControlsProperties, shaderSignedZeroInfNanPreserveFloat16));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceFloatControlsProperties, shaderSignedZeroInfNanPreserveFloat16));
alignmentData.push_back(offsetof(VkPhysicalDeviceFloatControlsProperties, shaderSignedZeroInfNanPreserveFloat32));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceFloatControlsProperties, shaderSignedZeroInfNanPreserveFloat32));
alignmentData.push_back(offsetof(VkPhysicalDeviceFloatControlsProperties, shaderSignedZeroInfNanPreserveFloat64));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceFloatControlsProperties, shaderSignedZeroInfNanPreserveFloat64));
alignmentData.push_back(offsetof(VkPhysicalDeviceFloatControlsProperties, shaderDenormPreserveFloat16));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceFloatControlsProperties, shaderDenormPreserveFloat16));
alignmentData.push_back(offsetof(VkPhysicalDeviceFloatControlsProperties, shaderDenormPreserveFloat32));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceFloatControlsProperties, shaderDenormPreserveFloat32));
alignmentData.push_back(offsetof(VkPhysicalDeviceFloatControlsProperties, shaderDenormPreserveFloat64));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceFloatControlsProperties, shaderDenormPreserveFloat64));
alignmentData.push_back(offsetof(VkPhysicalDeviceFloatControlsProperties, shaderDenormFlushToZeroFloat16));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceFloatControlsProperties, shaderDenormFlushToZeroFloat16));
alignmentData.push_back(offsetof(VkPhysicalDeviceFloatControlsProperties, shaderDenormFlushToZeroFloat32));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceFloatControlsProperties, shaderDenormFlushToZeroFloat32));
alignmentData.push_back(offsetof(VkPhysicalDeviceFloatControlsProperties, shaderDenormFlushToZeroFloat64));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceFloatControlsProperties, shaderDenormFlushToZeroFloat64));
alignmentData.push_back(offsetof(VkPhysicalDeviceFloatControlsProperties, shaderRoundingModeRTEFloat16));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceFloatControlsProperties, shaderRoundingModeRTEFloat16));
alignmentData.push_back(offsetof(VkPhysicalDeviceFloatControlsProperties, shaderRoundingModeRTEFloat32));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceFloatControlsProperties, shaderRoundingModeRTEFloat32));
alignmentData.push_back(offsetof(VkPhysicalDeviceFloatControlsProperties, shaderRoundingModeRTEFloat64));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceFloatControlsProperties, shaderRoundingModeRTEFloat64));
alignmentData.push_back(offsetof(VkPhysicalDeviceFloatControlsProperties, shaderRoundingModeRTZFloat16));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceFloatControlsProperties, shaderRoundingModeRTZFloat16));
alignmentData.push_back(offsetof(VkPhysicalDeviceFloatControlsProperties, shaderRoundingModeRTZFloat32));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceFloatControlsProperties, shaderRoundingModeRTZFloat32));
alignmentData.push_back(offsetof(VkPhysicalDeviceFloatControlsProperties, shaderRoundingModeRTZFloat64));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceFloatControlsProperties, shaderRoundingModeRTZFloat64));

alignmentData.push_back(offsetof(VkPhysicalDeviceHostQueryResetFeatures, sType));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceHostQueryResetFeatures, sType));
alignmentData.push_back(offsetof(VkPhysicalDeviceHostQueryResetFeatures, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceHostQueryResetFeatures, pNext));
alignmentData.push_back(offsetof(VkPhysicalDeviceHostQueryResetFeatures, hostQueryReset));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceHostQueryResetFeatures, hostQueryReset));

alignmentData.push_back(offsetof(VkDeviceQueueGlobalPriorityCreateInfoKHR, sType));
alignmentData.push_back(FIELD_SIZEOF(VkDeviceQueueGlobalPriorityCreateInfoKHR, sType));
alignmentData.push_back(offsetof(VkDeviceQueueGlobalPriorityCreateInfoKHR, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkDeviceQueueGlobalPriorityCreateInfoKHR, pNext));
alignmentData.push_back(offsetof(VkDeviceQueueGlobalPriorityCreateInfoKHR, globalPriority));
alignmentData.push_back(FIELD_SIZEOF(VkDeviceQueueGlobalPriorityCreateInfoKHR, globalPriority));

alignmentData.push_back(offsetof(VkPhysicalDeviceGlobalPriorityQueryFeaturesKHR, sType));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceGlobalPriorityQueryFeaturesKHR, sType));
alignmentData.push_back(offsetof(VkPhysicalDeviceGlobalPriorityQueryFeaturesKHR, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceGlobalPriorityQueryFeaturesKHR, pNext));
alignmentData.push_back(offsetof(VkPhysicalDeviceGlobalPriorityQueryFeaturesKHR, globalPriorityQuery));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceGlobalPriorityQueryFeaturesKHR, globalPriorityQuery));

alignmentData.push_back(offsetof(VkQueueFamilyGlobalPriorityPropertiesKHR, sType));
alignmentData.push_back(FIELD_SIZEOF(VkQueueFamilyGlobalPriorityPropertiesKHR, sType));
alignmentData.push_back(offsetof(VkQueueFamilyGlobalPriorityPropertiesKHR, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkQueueFamilyGlobalPriorityPropertiesKHR, pNext));
alignmentData.push_back(offsetof(VkQueueFamilyGlobalPriorityPropertiesKHR, priorityCount));
alignmentData.push_back(FIELD_SIZEOF(VkQueueFamilyGlobalPriorityPropertiesKHR, priorityCount));
alignmentData.push_back(offsetof(VkQueueFamilyGlobalPriorityPropertiesKHR, priorities));
alignmentData.push_back(FIELD_SIZEOF(VkQueueFamilyGlobalPriorityPropertiesKHR, priorities));

alignmentData.push_back(offsetof(VkImportMemoryHostPointerInfoEXT, sType));
alignmentData.push_back(FIELD_SIZEOF(VkImportMemoryHostPointerInfoEXT, sType));
alignmentData.push_back(offsetof(VkImportMemoryHostPointerInfoEXT, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkImportMemoryHostPointerInfoEXT, pNext));
alignmentData.push_back(offsetof(VkImportMemoryHostPointerInfoEXT, handleType));
alignmentData.push_back(FIELD_SIZEOF(VkImportMemoryHostPointerInfoEXT, handleType));
alignmentData.push_back(offsetof(VkImportMemoryHostPointerInfoEXT, pHostPointer));
alignmentData.push_back(FIELD_SIZEOF(VkImportMemoryHostPointerInfoEXT, pHostPointer));
alignmentData.push_back(offsetof(VkMemoryHostPointerPropertiesEXT, sType));
alignmentData.push_back(FIELD_SIZEOF(VkMemoryHostPointerPropertiesEXT, sType));
alignmentData.push_back(offsetof(VkMemoryHostPointerPropertiesEXT, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkMemoryHostPointerPropertiesEXT, pNext));
alignmentData.push_back(offsetof(VkMemoryHostPointerPropertiesEXT, memoryTypeBits));
alignmentData.push_back(FIELD_SIZEOF(VkMemoryHostPointerPropertiesEXT, memoryTypeBits));
alignmentData.push_back(offsetof(VkPhysicalDeviceExternalMemoryHostPropertiesEXT, sType));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceExternalMemoryHostPropertiesEXT, sType));
alignmentData.push_back(offsetof(VkPhysicalDeviceExternalMemoryHostPropertiesEXT, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceExternalMemoryHostPropertiesEXT, pNext));
alignmentData.push_back(offsetof(VkPhysicalDeviceExternalMemoryHostPropertiesEXT, minImportedHostPointerAlignment));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceExternalMemoryHostPropertiesEXT, minImportedHostPointerAlignment));
alignmentData.push_back(offsetof(VkPhysicalDeviceDescriptorIndexingFeatures, sType));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceDescriptorIndexingFeatures, sType));
alignmentData.push_back(offsetof(VkPhysicalDeviceDescriptorIndexingFeatures, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceDescriptorIndexingFeatures, pNext));
alignmentData.push_back(offsetof(VkPhysicalDeviceDescriptorIndexingFeatures, shaderInputAttachmentArrayDynamicIndexing));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceDescriptorIndexingFeatures, shaderInputAttachmentArrayDynamicIndexing));
alignmentData.push_back(offsetof(VkPhysicalDeviceDescriptorIndexingFeatures, shaderUniformTexelBufferArrayDynamicIndexing));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceDescriptorIndexingFeatures, shaderUniformTexelBufferArrayDynamicIndexing));
alignmentData.push_back(offsetof(VkPhysicalDeviceDescriptorIndexingFeatures, shaderStorageTexelBufferArrayDynamicIndexing));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceDescriptorIndexingFeatures, shaderStorageTexelBufferArrayDynamicIndexing));
alignmentData.push_back(offsetof(VkPhysicalDeviceDescriptorIndexingFeatures, shaderUniformBufferArrayNonUniformIndexing));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceDescriptorIndexingFeatures, shaderUniformBufferArrayNonUniformIndexing));
alignmentData.push_back(offsetof(VkPhysicalDeviceDescriptorIndexingFeatures, shaderSampledImageArrayNonUniformIndexing));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceDescriptorIndexingFeatures, shaderSampledImageArrayNonUniformIndexing));
alignmentData.push_back(offsetof(VkPhysicalDeviceDescriptorIndexingFeatures, shaderStorageBufferArrayNonUniformIndexing));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceDescriptorIndexingFeatures, shaderStorageBufferArrayNonUniformIndexing));
alignmentData.push_back(offsetof(VkPhysicalDeviceDescriptorIndexingFeatures, shaderStorageImageArrayNonUniformIndexing));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceDescriptorIndexingFeatures, shaderStorageImageArrayNonUniformIndexing));
alignmentData.push_back(offsetof(VkPhysicalDeviceDescriptorIndexingFeatures, shaderInputAttachmentArrayNonUniformIndexing));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceDescriptorIndexingFeatures, shaderInputAttachmentArrayNonUniformIndexing));
alignmentData.push_back(offsetof(VkPhysicalDeviceDescriptorIndexingFeatures, shaderUniformTexelBufferArrayNonUniformIndexing));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceDescriptorIndexingFeatures, shaderUniformTexelBufferArrayNonUniformIndexing));
alignmentData.push_back(offsetof(VkPhysicalDeviceDescriptorIndexingFeatures, shaderStorageTexelBufferArrayNonUniformIndexing));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceDescriptorIndexingFeatures, shaderStorageTexelBufferArrayNonUniformIndexing));
alignmentData.push_back(offsetof(VkPhysicalDeviceDescriptorIndexingFeatures, descriptorBindingUniformBufferUpdateAfterBind));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceDescriptorIndexingFeatures, descriptorBindingUniformBufferUpdateAfterBind));
alignmentData.push_back(offsetof(VkPhysicalDeviceDescriptorIndexingFeatures, descriptorBindingSampledImageUpdateAfterBind));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceDescriptorIndexingFeatures, descriptorBindingSampledImageUpdateAfterBind));
alignmentData.push_back(offsetof(VkPhysicalDeviceDescriptorIndexingFeatures, descriptorBindingStorageImageUpdateAfterBind));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceDescriptorIndexingFeatures, descriptorBindingStorageImageUpdateAfterBind));
alignmentData.push_back(offsetof(VkPhysicalDeviceDescriptorIndexingFeatures, descriptorBindingStorageBufferUpdateAfterBind));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceDescriptorIndexingFeatures, descriptorBindingStorageBufferUpdateAfterBind));
alignmentData.push_back(offsetof(VkPhysicalDeviceDescriptorIndexingFeatures, descriptorBindingUniformTexelBufferUpdateAfterBind));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceDescriptorIndexingFeatures, descriptorBindingUniformTexelBufferUpdateAfterBind));
alignmentData.push_back(offsetof(VkPhysicalDeviceDescriptorIndexingFeatures, descriptorBindingStorageTexelBufferUpdateAfterBind));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceDescriptorIndexingFeatures, descriptorBindingStorageTexelBufferUpdateAfterBind));
alignmentData.push_back(offsetof(VkPhysicalDeviceDescriptorIndexingFeatures, descriptorBindingUpdateUnusedWhilePending));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceDescriptorIndexingFeatures, descriptorBindingUpdateUnusedWhilePending));
alignmentData.push_back(offsetof(VkPhysicalDeviceDescriptorIndexingFeatures, descriptorBindingPartiallyBound));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceDescriptorIndexingFeatures, descriptorBindingPartiallyBound));
alignmentData.push_back(offsetof(VkPhysicalDeviceDescriptorIndexingFeatures, descriptorBindingVariableDescriptorCount));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceDescriptorIndexingFeatures, descriptorBindingVariableDescriptorCount));
alignmentData.push_back(offsetof(VkPhysicalDeviceDescriptorIndexingFeatures, runtimeDescriptorArray));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceDescriptorIndexingFeatures, runtimeDescriptorArray));
alignmentData.push_back(offsetof(VkPhysicalDeviceDescriptorIndexingProperties, sType));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceDescriptorIndexingProperties, sType));
alignmentData.push_back(offsetof(VkPhysicalDeviceDescriptorIndexingProperties, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceDescriptorIndexingProperties, pNext));
alignmentData.push_back(offsetof(VkPhysicalDeviceDescriptorIndexingProperties, maxUpdateAfterBindDescriptorsInAllPools));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceDescriptorIndexingProperties, maxUpdateAfterBindDescriptorsInAllPools));
alignmentData.push_back(offsetof(VkPhysicalDeviceDescriptorIndexingProperties, shaderUniformBufferArrayNonUniformIndexingNative));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceDescriptorIndexingProperties, shaderUniformBufferArrayNonUniformIndexingNative));
alignmentData.push_back(offsetof(VkPhysicalDeviceDescriptorIndexingProperties, shaderSampledImageArrayNonUniformIndexingNative));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceDescriptorIndexingProperties, shaderSampledImageArrayNonUniformIndexingNative));
alignmentData.push_back(offsetof(VkPhysicalDeviceDescriptorIndexingProperties, shaderStorageBufferArrayNonUniformIndexingNative));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceDescriptorIndexingProperties, shaderStorageBufferArrayNonUniformIndexingNative));
alignmentData.push_back(offsetof(VkPhysicalDeviceDescriptorIndexingProperties, shaderStorageImageArrayNonUniformIndexingNative));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceDescriptorIndexingProperties, shaderStorageImageArrayNonUniformIndexingNative));
alignmentData.push_back(offsetof(VkPhysicalDeviceDescriptorIndexingProperties, shaderInputAttachmentArrayNonUniformIndexingNative));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceDescriptorIndexingProperties, shaderInputAttachmentArrayNonUniformIndexingNative));
alignmentData.push_back(offsetof(VkPhysicalDeviceDescriptorIndexingProperties, robustBufferAccessUpdateAfterBind));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceDescriptorIndexingProperties, robustBufferAccessUpdateAfterBind));
alignmentData.push_back(offsetof(VkPhysicalDeviceDescriptorIndexingProperties, quadDivergentImplicitLod));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceDescriptorIndexingProperties, quadDivergentImplicitLod));
alignmentData.push_back(offsetof(VkPhysicalDeviceDescriptorIndexingProperties, maxPerStageDescriptorUpdateAfterBindSamplers));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceDescriptorIndexingProperties, maxPerStageDescriptorUpdateAfterBindSamplers));
alignmentData.push_back(offsetof(VkPhysicalDeviceDescriptorIndexingProperties, maxPerStageDescriptorUpdateAfterBindUniformBuffers));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceDescriptorIndexingProperties, maxPerStageDescriptorUpdateAfterBindUniformBuffers));
alignmentData.push_back(offsetof(VkPhysicalDeviceDescriptorIndexingProperties, maxPerStageDescriptorUpdateAfterBindStorageBuffers));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceDescriptorIndexingProperties, maxPerStageDescriptorUpdateAfterBindStorageBuffers));
alignmentData.push_back(offsetof(VkPhysicalDeviceDescriptorIndexingProperties, maxPerStageDescriptorUpdateAfterBindSampledImages));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceDescriptorIndexingProperties, maxPerStageDescriptorUpdateAfterBindSampledImages));
alignmentData.push_back(offsetof(VkPhysicalDeviceDescriptorIndexingProperties, maxPerStageDescriptorUpdateAfterBindStorageImages));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceDescriptorIndexingProperties, maxPerStageDescriptorUpdateAfterBindStorageImages));
alignmentData.push_back(offsetof(VkPhysicalDeviceDescriptorIndexingProperties, maxPerStageDescriptorUpdateAfterBindInputAttachments));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceDescriptorIndexingProperties, maxPerStageDescriptorUpdateAfterBindInputAttachments));
alignmentData.push_back(offsetof(VkPhysicalDeviceDescriptorIndexingProperties, maxPerStageUpdateAfterBindResources));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceDescriptorIndexingProperties, maxPerStageUpdateAfterBindResources));
alignmentData.push_back(offsetof(VkPhysicalDeviceDescriptorIndexingProperties, maxDescriptorSetUpdateAfterBindSamplers));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceDescriptorIndexingProperties, maxDescriptorSetUpdateAfterBindSamplers));
alignmentData.push_back(offsetof(VkPhysicalDeviceDescriptorIndexingProperties, maxDescriptorSetUpdateAfterBindUniformBuffers));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceDescriptorIndexingProperties, maxDescriptorSetUpdateAfterBindUniformBuffers));
alignmentData.push_back(offsetof(VkPhysicalDeviceDescriptorIndexingProperties, maxDescriptorSetUpdateAfterBindUniformBuffersDynamic));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceDescriptorIndexingProperties, maxDescriptorSetUpdateAfterBindUniformBuffersDynamic));
alignmentData.push_back(offsetof(VkPhysicalDeviceDescriptorIndexingProperties, maxDescriptorSetUpdateAfterBindStorageBuffers));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceDescriptorIndexingProperties, maxDescriptorSetUpdateAfterBindStorageBuffers));
alignmentData.push_back(offsetof(VkPhysicalDeviceDescriptorIndexingProperties, maxDescriptorSetUpdateAfterBindStorageBuffersDynamic));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceDescriptorIndexingProperties, maxDescriptorSetUpdateAfterBindStorageBuffersDynamic));
alignmentData.push_back(offsetof(VkPhysicalDeviceDescriptorIndexingProperties, maxDescriptorSetUpdateAfterBindSampledImages));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceDescriptorIndexingProperties, maxDescriptorSetUpdateAfterBindSampledImages));
alignmentData.push_back(offsetof(VkPhysicalDeviceDescriptorIndexingProperties, maxDescriptorSetUpdateAfterBindStorageImages));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceDescriptorIndexingProperties, maxDescriptorSetUpdateAfterBindStorageImages));
alignmentData.push_back(offsetof(VkPhysicalDeviceDescriptorIndexingProperties, maxDescriptorSetUpdateAfterBindInputAttachments));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceDescriptorIndexingProperties, maxDescriptorSetUpdateAfterBindInputAttachments));
alignmentData.push_back(offsetof(VkDescriptorSetLayoutBindingFlagsCreateInfo, sType));
alignmentData.push_back(FIELD_SIZEOF(VkDescriptorSetLayoutBindingFlagsCreateInfo, sType));
alignmentData.push_back(offsetof(VkDescriptorSetLayoutBindingFlagsCreateInfo, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkDescriptorSetLayoutBindingFlagsCreateInfo, pNext));
alignmentData.push_back(offsetof(VkDescriptorSetLayoutBindingFlagsCreateInfo, bindingCount));
alignmentData.push_back(FIELD_SIZEOF(VkDescriptorSetLayoutBindingFlagsCreateInfo, bindingCount));
alignmentData.push_back(offsetof(VkDescriptorSetLayoutBindingFlagsCreateInfo, pBindingFlags));
alignmentData.push_back(FIELD_SIZEOF(VkDescriptorSetLayoutBindingFlagsCreateInfo, pBindingFlags));
alignmentData.push_back(offsetof(VkDescriptorSetVariableDescriptorCountAllocateInfo, sType));
alignmentData.push_back(FIELD_SIZEOF(VkDescriptorSetVariableDescriptorCountAllocateInfo, sType));
alignmentData.push_back(offsetof(VkDescriptorSetVariableDescriptorCountAllocateInfo, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkDescriptorSetVariableDescriptorCountAllocateInfo, pNext));
alignmentData.push_back(offsetof(VkDescriptorSetVariableDescriptorCountAllocateInfo, descriptorSetCount));
alignmentData.push_back(FIELD_SIZEOF(VkDescriptorSetVariableDescriptorCountAllocateInfo, descriptorSetCount));
alignmentData.push_back(offsetof(VkDescriptorSetVariableDescriptorCountAllocateInfo, pDescriptorCounts));
alignmentData.push_back(FIELD_SIZEOF(VkDescriptorSetVariableDescriptorCountAllocateInfo, pDescriptorCounts));
alignmentData.push_back(offsetof(VkDescriptorSetVariableDescriptorCountLayoutSupport, sType));
alignmentData.push_back(FIELD_SIZEOF(VkDescriptorSetVariableDescriptorCountLayoutSupport, sType));
alignmentData.push_back(offsetof(VkDescriptorSetVariableDescriptorCountLayoutSupport, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkDescriptorSetVariableDescriptorCountLayoutSupport, pNext));
alignmentData.push_back(offsetof(VkDescriptorSetVariableDescriptorCountLayoutSupport, maxVariableDescriptorCount));
alignmentData.push_back(FIELD_SIZEOF(VkDescriptorSetVariableDescriptorCountLayoutSupport, maxVariableDescriptorCount));
alignmentData.push_back(offsetof(VkAttachmentDescription2, sType));
alignmentData.push_back(FIELD_SIZEOF(VkAttachmentDescription2, sType));
alignmentData.push_back(offsetof(VkAttachmentDescription2, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkAttachmentDescription2, pNext));
alignmentData.push_back(offsetof(VkAttachmentDescription2, flags));
alignmentData.push_back(FIELD_SIZEOF(VkAttachmentDescription2, flags));
alignmentData.push_back(offsetof(VkAttachmentDescription2, format));
alignmentData.push_back(FIELD_SIZEOF(VkAttachmentDescription2, format));
alignmentData.push_back(offsetof(VkAttachmentDescription2, samples));
alignmentData.push_back(FIELD_SIZEOF(VkAttachmentDescription2, samples));
alignmentData.push_back(offsetof(VkAttachmentDescription2, loadOp));
alignmentData.push_back(FIELD_SIZEOF(VkAttachmentDescription2, loadOp));
alignmentData.push_back(offsetof(VkAttachmentDescription2, storeOp));
alignmentData.push_back(FIELD_SIZEOF(VkAttachmentDescription2, storeOp));
alignmentData.push_back(offsetof(VkAttachmentDescription2, stencilLoadOp));
alignmentData.push_back(FIELD_SIZEOF(VkAttachmentDescription2, stencilLoadOp));
alignmentData.push_back(offsetof(VkAttachmentDescription2, stencilStoreOp));
alignmentData.push_back(FIELD_SIZEOF(VkAttachmentDescription2, stencilStoreOp));
alignmentData.push_back(offsetof(VkAttachmentDescription2, initialLayout));
alignmentData.push_back(FIELD_SIZEOF(VkAttachmentDescription2, initialLayout));
alignmentData.push_back(offsetof(VkAttachmentDescription2, finalLayout));
alignmentData.push_back(FIELD_SIZEOF(VkAttachmentDescription2, finalLayout));

alignmentData.push_back(offsetof(VkAttachmentReference2, sType));
alignmentData.push_back(FIELD_SIZEOF(VkAttachmentReference2, sType));
alignmentData.push_back(offsetof(VkAttachmentReference2, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkAttachmentReference2, pNext));
alignmentData.push_back(offsetof(VkAttachmentReference2, attachment));
alignmentData.push_back(FIELD_SIZEOF(VkAttachmentReference2, attachment));
alignmentData.push_back(offsetof(VkAttachmentReference2, layout));
alignmentData.push_back(FIELD_SIZEOF(VkAttachmentReference2, layout));
alignmentData.push_back(offsetof(VkAttachmentReference2, aspectMask));
alignmentData.push_back(FIELD_SIZEOF(VkAttachmentReference2, aspectMask));

alignmentData.push_back(offsetof(VkSubpassDescription2, sType));
alignmentData.push_back(FIELD_SIZEOF(VkSubpassDescription2, sType));
alignmentData.push_back(offsetof(VkSubpassDescription2, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkSubpassDescription2, pNext));
alignmentData.push_back(offsetof(VkSubpassDescription2, flags));
alignmentData.push_back(FIELD_SIZEOF(VkSubpassDescription2, flags));
alignmentData.push_back(offsetof(VkSubpassDescription2, pipelineBindPoint));
alignmentData.push_back(FIELD_SIZEOF(VkSubpassDescription2, pipelineBindPoint));
alignmentData.push_back(offsetof(VkSubpassDescription2, viewMask));
alignmentData.push_back(FIELD_SIZEOF(VkSubpassDescription2, viewMask));
alignmentData.push_back(offsetof(VkSubpassDescription2, inputAttachmentCount));
alignmentData.push_back(FIELD_SIZEOF(VkSubpassDescription2, inputAttachmentCount));
alignmentData.push_back(offsetof(VkSubpassDescription2, pInputAttachments));
alignmentData.push_back(FIELD_SIZEOF(VkSubpassDescription2, pInputAttachments));
alignmentData.push_back(offsetof(VkSubpassDescription2, colorAttachmentCount));
alignmentData.push_back(FIELD_SIZEOF(VkSubpassDescription2, colorAttachmentCount));
alignmentData.push_back(offsetof(VkSubpassDescription2, pColorAttachments));
alignmentData.push_back(FIELD_SIZEOF(VkSubpassDescription2, pColorAttachments));
alignmentData.push_back(offsetof(VkSubpassDescription2, pResolveAttachments));
alignmentData.push_back(FIELD_SIZEOF(VkSubpassDescription2, pResolveAttachments));
alignmentData.push_back(offsetof(VkSubpassDescription2, pDepthStencilAttachment));
alignmentData.push_back(FIELD_SIZEOF(VkSubpassDescription2, pDepthStencilAttachment));
alignmentData.push_back(offsetof(VkSubpassDescription2, preserveAttachmentCount));
alignmentData.push_back(FIELD_SIZEOF(VkSubpassDescription2, preserveAttachmentCount));
alignmentData.push_back(offsetof(VkSubpassDescription2, pPreserveAttachments));
alignmentData.push_back(FIELD_SIZEOF(VkSubpassDescription2, pPreserveAttachments));

alignmentData.push_back(offsetof(VkSubpassDependency2, sType));
alignmentData.push_back(FIELD_SIZEOF(VkSubpassDependency2, sType));
alignmentData.push_back(offsetof(VkSubpassDependency2, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkSubpassDependency2, pNext));
alignmentData.push_back(offsetof(VkSubpassDependency2, srcSubpass));
alignmentData.push_back(FIELD_SIZEOF(VkSubpassDependency2, srcSubpass));
alignmentData.push_back(offsetof(VkSubpassDependency2, dstSubpass));
alignmentData.push_back(FIELD_SIZEOF(VkSubpassDependency2, dstSubpass));
alignmentData.push_back(offsetof(VkSubpassDependency2, srcStageMask));
alignmentData.push_back(FIELD_SIZEOF(VkSubpassDependency2, srcStageMask));
alignmentData.push_back(offsetof(VkSubpassDependency2, dstStageMask));
alignmentData.push_back(FIELD_SIZEOF(VkSubpassDependency2, dstStageMask));
alignmentData.push_back(offsetof(VkSubpassDependency2, srcAccessMask));
alignmentData.push_back(FIELD_SIZEOF(VkSubpassDependency2, srcAccessMask));
alignmentData.push_back(offsetof(VkSubpassDependency2, dstAccessMask));
alignmentData.push_back(FIELD_SIZEOF(VkSubpassDependency2, dstAccessMask));
alignmentData.push_back(offsetof(VkSubpassDependency2, dependencyFlags));
alignmentData.push_back(FIELD_SIZEOF(VkSubpassDependency2, dependencyFlags));
alignmentData.push_back(offsetof(VkSubpassDependency2, viewOffset));
alignmentData.push_back(FIELD_SIZEOF(VkSubpassDependency2, viewOffset));

alignmentData.push_back(offsetof(VkRenderPassCreateInfo2, sType));
alignmentData.push_back(FIELD_SIZEOF(VkRenderPassCreateInfo2, sType));
alignmentData.push_back(offsetof(VkRenderPassCreateInfo2, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkRenderPassCreateInfo2, pNext));
alignmentData.push_back(offsetof(VkRenderPassCreateInfo2, flags));
alignmentData.push_back(FIELD_SIZEOF(VkRenderPassCreateInfo2, flags));
alignmentData.push_back(offsetof(VkRenderPassCreateInfo2, attachmentCount));
alignmentData.push_back(FIELD_SIZEOF(VkRenderPassCreateInfo2, attachmentCount));
alignmentData.push_back(offsetof(VkRenderPassCreateInfo2, pAttachments));
alignmentData.push_back(FIELD_SIZEOF(VkRenderPassCreateInfo2, pAttachments));
alignmentData.push_back(offsetof(VkRenderPassCreateInfo2, subpassCount));
alignmentData.push_back(FIELD_SIZEOF(VkRenderPassCreateInfo2, subpassCount));
alignmentData.push_back(offsetof(VkRenderPassCreateInfo2, pSubpasses));
alignmentData.push_back(FIELD_SIZEOF(VkRenderPassCreateInfo2, pSubpasses));
alignmentData.push_back(offsetof(VkRenderPassCreateInfo2, dependencyCount));
alignmentData.push_back(FIELD_SIZEOF(VkRenderPassCreateInfo2, dependencyCount));
alignmentData.push_back(offsetof(VkRenderPassCreateInfo2, pDependencies));
alignmentData.push_back(FIELD_SIZEOF(VkRenderPassCreateInfo2, pDependencies));
alignmentData.push_back(offsetof(VkRenderPassCreateInfo2, correlatedViewMaskCount));
alignmentData.push_back(FIELD_SIZEOF(VkRenderPassCreateInfo2, correlatedViewMaskCount));
alignmentData.push_back(offsetof(VkRenderPassCreateInfo2, pCorrelatedViewMasks));
alignmentData.push_back(FIELD_SIZEOF(VkRenderPassCreateInfo2, pCorrelatedViewMasks));

alignmentData.push_back(offsetof(VkSubpassBeginInfo, sType));
alignmentData.push_back(FIELD_SIZEOF(VkSubpassBeginInfo, sType));
alignmentData.push_back(offsetof(VkSubpassBeginInfo, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkSubpassBeginInfo, pNext));
alignmentData.push_back(offsetof(VkSubpassBeginInfo, contents));
alignmentData.push_back(FIELD_SIZEOF(VkSubpassBeginInfo, contents));

alignmentData.push_back(offsetof(VkSubpassEndInfo, sType));
alignmentData.push_back(FIELD_SIZEOF(VkSubpassEndInfo, sType));
alignmentData.push_back(offsetof(VkSubpassEndInfo, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkSubpassEndInfo, pNext));

alignmentData.push_back(offsetof(VkPhysicalDeviceTimelineSemaphoreFeatures, sType));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceTimelineSemaphoreFeatures, sType));
alignmentData.push_back(offsetof(VkPhysicalDeviceTimelineSemaphoreFeatures, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceTimelineSemaphoreFeatures, pNext));
alignmentData.push_back(offsetof(VkPhysicalDeviceTimelineSemaphoreFeatures, timelineSemaphore));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceTimelineSemaphoreFeatures, timelineSemaphore));

alignmentData.push_back(offsetof(VkPhysicalDeviceTimelineSemaphoreProperties, sType));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceTimelineSemaphoreProperties, sType));
alignmentData.push_back(offsetof(VkPhysicalDeviceTimelineSemaphoreProperties, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceTimelineSemaphoreProperties, pNext));
alignmentData.push_back(offsetof(VkPhysicalDeviceTimelineSemaphoreProperties, maxTimelineSemaphoreValueDifference));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceTimelineSemaphoreProperties, maxTimelineSemaphoreValueDifference));

alignmentData.push_back(offsetof(VkSemaphoreTypeCreateInfo, sType));
alignmentData.push_back(FIELD_SIZEOF(VkSemaphoreTypeCreateInfo, sType));
alignmentData.push_back(offsetof(VkSemaphoreTypeCreateInfo, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkSemaphoreTypeCreateInfo, pNext));
alignmentData.push_back(offsetof(VkSemaphoreTypeCreateInfo, semaphoreType));
alignmentData.push_back(FIELD_SIZEOF(VkSemaphoreTypeCreateInfo, semaphoreType));
alignmentData.push_back(offsetof(VkSemaphoreTypeCreateInfo, initialValue));
alignmentData.push_back(FIELD_SIZEOF(VkSemaphoreTypeCreateInfo, initialValue));

alignmentData.push_back(offsetof(VkTimelineSemaphoreSubmitInfo, sType));
alignmentData.push_back(FIELD_SIZEOF(VkTimelineSemaphoreSubmitInfo, sType));
alignmentData.push_back(offsetof(VkTimelineSemaphoreSubmitInfo, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkTimelineSemaphoreSubmitInfo, pNext));
alignmentData.push_back(offsetof(VkTimelineSemaphoreSubmitInfo, waitSemaphoreValueCount));
alignmentData.push_back(FIELD_SIZEOF(VkTimelineSemaphoreSubmitInfo, waitSemaphoreValueCount));
alignmentData.push_back(offsetof(VkTimelineSemaphoreSubmitInfo, pWaitSemaphoreValues));
alignmentData.push_back(FIELD_SIZEOF(VkTimelineSemaphoreSubmitInfo, pWaitSemaphoreValues));
alignmentData.push_back(offsetof(VkTimelineSemaphoreSubmitInfo, signalSemaphoreValueCount));
alignmentData.push_back(FIELD_SIZEOF(VkTimelineSemaphoreSubmitInfo, signalSemaphoreValueCount));
alignmentData.push_back(offsetof(VkTimelineSemaphoreSubmitInfo, pSignalSemaphoreValues));
alignmentData.push_back(FIELD_SIZEOF(VkTimelineSemaphoreSubmitInfo, pSignalSemaphoreValues));

alignmentData.push_back(offsetof(VkSemaphoreWaitInfo, sType));
alignmentData.push_back(FIELD_SIZEOF(VkSemaphoreWaitInfo, sType));
alignmentData.push_back(offsetof(VkSemaphoreWaitInfo, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkSemaphoreWaitInfo, pNext));
alignmentData.push_back(offsetof(VkSemaphoreWaitInfo, flags));
alignmentData.push_back(FIELD_SIZEOF(VkSemaphoreWaitInfo, flags));
alignmentData.push_back(offsetof(VkSemaphoreWaitInfo, semaphoreCount));
alignmentData.push_back(FIELD_SIZEOF(VkSemaphoreWaitInfo, semaphoreCount));
alignmentData.push_back(offsetof(VkSemaphoreWaitInfo, pSemaphores));
alignmentData.push_back(FIELD_SIZEOF(VkSemaphoreWaitInfo, pSemaphores));
alignmentData.push_back(offsetof(VkSemaphoreWaitInfo, pValues));
alignmentData.push_back(FIELD_SIZEOF(VkSemaphoreWaitInfo, pValues));

alignmentData.push_back(offsetof(VkSemaphoreSignalInfo, sType));
alignmentData.push_back(FIELD_SIZEOF(VkSemaphoreSignalInfo, sType));
alignmentData.push_back(offsetof(VkSemaphoreSignalInfo, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkSemaphoreSignalInfo, pNext));
alignmentData.push_back(offsetof(VkSemaphoreSignalInfo, semaphore));
alignmentData.push_back(FIELD_SIZEOF(VkSemaphoreSignalInfo, semaphore));
alignmentData.push_back(offsetof(VkSemaphoreSignalInfo, value));
alignmentData.push_back(FIELD_SIZEOF(VkSemaphoreSignalInfo, value));

alignmentData.push_back(offsetof(VkVertexInputBindingDivisorDescriptionEXT, binding));
alignmentData.push_back(FIELD_SIZEOF(VkVertexInputBindingDivisorDescriptionEXT, binding));
alignmentData.push_back(offsetof(VkVertexInputBindingDivisorDescriptionEXT, divisor));
alignmentData.push_back(FIELD_SIZEOF(VkVertexInputBindingDivisorDescriptionEXT, divisor));
alignmentData.push_back(offsetof(VkPipelineVertexInputDivisorStateCreateInfoEXT, sType));
alignmentData.push_back(FIELD_SIZEOF(VkPipelineVertexInputDivisorStateCreateInfoEXT, sType));
alignmentData.push_back(offsetof(VkPipelineVertexInputDivisorStateCreateInfoEXT, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkPipelineVertexInputDivisorStateCreateInfoEXT, pNext));
alignmentData.push_back(offsetof(VkPipelineVertexInputDivisorStateCreateInfoEXT, vertexBindingDivisorCount));
alignmentData.push_back(FIELD_SIZEOF(VkPipelineVertexInputDivisorStateCreateInfoEXT, vertexBindingDivisorCount));
alignmentData.push_back(offsetof(VkPipelineVertexInputDivisorStateCreateInfoEXT, pVertexBindingDivisors));
alignmentData.push_back(FIELD_SIZEOF(VkPipelineVertexInputDivisorStateCreateInfoEXT, pVertexBindingDivisors));
alignmentData.push_back(offsetof(VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT, sType));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT, sType));
alignmentData.push_back(offsetof(VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT, pNext));
alignmentData.push_back(offsetof(VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT, maxVertexAttribDivisor));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT, maxVertexAttribDivisor));
alignmentData.push_back(offsetof(VkPhysicalDevicePCIBusInfoPropertiesEXT, sType));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDevicePCIBusInfoPropertiesEXT, sType));
alignmentData.push_back(offsetof(VkPhysicalDevicePCIBusInfoPropertiesEXT, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDevicePCIBusInfoPropertiesEXT, pNext));
alignmentData.push_back(offsetof(VkPhysicalDevicePCIBusInfoPropertiesEXT, pciDomain));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDevicePCIBusInfoPropertiesEXT, pciDomain));
alignmentData.push_back(offsetof(VkPhysicalDevicePCIBusInfoPropertiesEXT, pciBus));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDevicePCIBusInfoPropertiesEXT, pciBus));
alignmentData.push_back(offsetof(VkPhysicalDevicePCIBusInfoPropertiesEXT, pciDevice));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDevicePCIBusInfoPropertiesEXT, pciDevice));
alignmentData.push_back(offsetof(VkPhysicalDevicePCIBusInfoPropertiesEXT, pciFunction));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDevicePCIBusInfoPropertiesEXT, pciFunction));
alignmentData.push_back(offsetof(VkPhysicalDevice8BitStorageFeatures, sType));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDevice8BitStorageFeatures, sType));
alignmentData.push_back(offsetof(VkPhysicalDevice8BitStorageFeatures, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDevice8BitStorageFeatures, pNext));
alignmentData.push_back(offsetof(VkPhysicalDevice8BitStorageFeatures, storageBuffer8BitAccess));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDevice8BitStorageFeatures, storageBuffer8BitAccess));
alignmentData.push_back(offsetof(VkPhysicalDevice8BitStorageFeatures, uniformAndStorageBuffer8BitAccess));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDevice8BitStorageFeatures, uniformAndStorageBuffer8BitAccess));
alignmentData.push_back(offsetof(VkPhysicalDevice8BitStorageFeatures, storagePushConstant8));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDevice8BitStorageFeatures, storagePushConstant8));

alignmentData.push_back(offsetof(VkPhysicalDeviceVulkanMemoryModelFeatures, sType));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceVulkanMemoryModelFeatures, sType));
alignmentData.push_back(offsetof(VkPhysicalDeviceVulkanMemoryModelFeatures, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceVulkanMemoryModelFeatures, pNext));
alignmentData.push_back(offsetof(VkPhysicalDeviceVulkanMemoryModelFeatures, vulkanMemoryModel));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceVulkanMemoryModelFeatures, vulkanMemoryModel));
alignmentData.push_back(offsetof(VkPhysicalDeviceVulkanMemoryModelFeatures, vulkanMemoryModelDeviceScope));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceVulkanMemoryModelFeatures, vulkanMemoryModelDeviceScope));
alignmentData.push_back(offsetof(VkPhysicalDeviceVulkanMemoryModelFeatures, vulkanMemoryModelAvailabilityVisibilityChains));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceVulkanMemoryModelFeatures, vulkanMemoryModelAvailabilityVisibilityChains));

alignmentData.push_back(offsetof(VkPhysicalDeviceShaderAtomicInt64Features, sType));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceShaderAtomicInt64Features, sType));
alignmentData.push_back(offsetof(VkPhysicalDeviceShaderAtomicInt64Features, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceShaderAtomicInt64Features, pNext));
alignmentData.push_back(offsetof(VkPhysicalDeviceShaderAtomicInt64Features, shaderBufferInt64Atomics));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceShaderAtomicInt64Features, shaderBufferInt64Atomics));
alignmentData.push_back(offsetof(VkPhysicalDeviceShaderAtomicInt64Features, shaderSharedInt64Atomics));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceShaderAtomicInt64Features, shaderSharedInt64Atomics));

alignmentData.push_back(offsetof(VkPhysicalDeviceShaderAtomicFloatFeaturesEXT, sType));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceShaderAtomicFloatFeaturesEXT, sType));
alignmentData.push_back(offsetof(VkPhysicalDeviceShaderAtomicFloatFeaturesEXT, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceShaderAtomicFloatFeaturesEXT, pNext));
alignmentData.push_back(offsetof(VkPhysicalDeviceShaderAtomicFloatFeaturesEXT, shaderBufferFloat32Atomics));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceShaderAtomicFloatFeaturesEXT, shaderBufferFloat32Atomics));
alignmentData.push_back(offsetof(VkPhysicalDeviceShaderAtomicFloatFeaturesEXT, shaderBufferFloat32AtomicAdd));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceShaderAtomicFloatFeaturesEXT, shaderBufferFloat32AtomicAdd));
alignmentData.push_back(offsetof(VkPhysicalDeviceShaderAtomicFloatFeaturesEXT, shaderBufferFloat64Atomics));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceShaderAtomicFloatFeaturesEXT, shaderBufferFloat64Atomics));
alignmentData.push_back(offsetof(VkPhysicalDeviceShaderAtomicFloatFeaturesEXT, shaderBufferFloat64AtomicAdd));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceShaderAtomicFloatFeaturesEXT, shaderBufferFloat64AtomicAdd));
alignmentData.push_back(offsetof(VkPhysicalDeviceShaderAtomicFloatFeaturesEXT, shaderSharedFloat32Atomics));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceShaderAtomicFloatFeaturesEXT, shaderSharedFloat32Atomics));
alignmentData.push_back(offsetof(VkPhysicalDeviceShaderAtomicFloatFeaturesEXT, shaderSharedFloat32AtomicAdd));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceShaderAtomicFloatFeaturesEXT, shaderSharedFloat32AtomicAdd));
alignmentData.push_back(offsetof(VkPhysicalDeviceShaderAtomicFloatFeaturesEXT, shaderSharedFloat64Atomics));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceShaderAtomicFloatFeaturesEXT, shaderSharedFloat64Atomics));
alignmentData.push_back(offsetof(VkPhysicalDeviceShaderAtomicFloatFeaturesEXT, shaderSharedFloat64AtomicAdd));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceShaderAtomicFloatFeaturesEXT, shaderSharedFloat64AtomicAdd));
alignmentData.push_back(offsetof(VkPhysicalDeviceShaderAtomicFloatFeaturesEXT, shaderImageFloat32Atomics));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceShaderAtomicFloatFeaturesEXT, shaderImageFloat32Atomics));
alignmentData.push_back(offsetof(VkPhysicalDeviceShaderAtomicFloatFeaturesEXT, shaderImageFloat32AtomicAdd));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceShaderAtomicFloatFeaturesEXT, shaderImageFloat32AtomicAdd));
alignmentData.push_back(offsetof(VkPhysicalDeviceShaderAtomicFloatFeaturesEXT, sparseImageFloat32Atomics));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceShaderAtomicFloatFeaturesEXT, sparseImageFloat32Atomics));
alignmentData.push_back(offsetof(VkPhysicalDeviceShaderAtomicFloatFeaturesEXT, sparseImageFloat32AtomicAdd));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceShaderAtomicFloatFeaturesEXT, sparseImageFloat32AtomicAdd));
alignmentData.push_back(offsetof(VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT, sType));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT, sType));
alignmentData.push_back(offsetof(VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT, pNext));
alignmentData.push_back(offsetof(VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT, shaderBufferFloat16Atomics));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT, shaderBufferFloat16Atomics));
alignmentData.push_back(offsetof(VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT, shaderBufferFloat16AtomicAdd));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT, shaderBufferFloat16AtomicAdd));
alignmentData.push_back(offsetof(VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT, shaderBufferFloat16AtomicMinMax));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT, shaderBufferFloat16AtomicMinMax));
alignmentData.push_back(offsetof(VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT, shaderBufferFloat32AtomicMinMax));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT, shaderBufferFloat32AtomicMinMax));
alignmentData.push_back(offsetof(VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT, shaderBufferFloat64AtomicMinMax));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT, shaderBufferFloat64AtomicMinMax));
alignmentData.push_back(offsetof(VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT, shaderSharedFloat16Atomics));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT, shaderSharedFloat16Atomics));
alignmentData.push_back(offsetof(VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT, shaderSharedFloat16AtomicAdd));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT, shaderSharedFloat16AtomicAdd));
alignmentData.push_back(offsetof(VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT, shaderSharedFloat16AtomicMinMax));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT, shaderSharedFloat16AtomicMinMax));
alignmentData.push_back(offsetof(VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT, shaderSharedFloat32AtomicMinMax));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT, shaderSharedFloat32AtomicMinMax));
alignmentData.push_back(offsetof(VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT, shaderSharedFloat64AtomicMinMax));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT, shaderSharedFloat64AtomicMinMax));
alignmentData.push_back(offsetof(VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT, shaderImageFloat32AtomicMinMax));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT, shaderImageFloat32AtomicMinMax));
alignmentData.push_back(offsetof(VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT, sparseImageFloat32AtomicMinMax));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT, sparseImageFloat32AtomicMinMax));
alignmentData.push_back(offsetof(VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT, sType));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT, sType));
alignmentData.push_back(offsetof(VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT, pNext));
alignmentData.push_back(offsetof(VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT, vertexAttributeInstanceRateDivisor));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT, vertexAttributeInstanceRateDivisor));
alignmentData.push_back(offsetof(VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT, vertexAttributeInstanceRateZeroDivisor));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT, vertexAttributeInstanceRateZeroDivisor));
alignmentData.push_back(offsetof(VkPhysicalDeviceDepthStencilResolveProperties, sType));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceDepthStencilResolveProperties, sType));
alignmentData.push_back(offsetof(VkPhysicalDeviceDepthStencilResolveProperties, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceDepthStencilResolveProperties, pNext));
alignmentData.push_back(offsetof(VkPhysicalDeviceDepthStencilResolveProperties, supportedDepthResolveModes));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceDepthStencilResolveProperties, supportedDepthResolveModes));
alignmentData.push_back(offsetof(VkPhysicalDeviceDepthStencilResolveProperties, supportedStencilResolveModes));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceDepthStencilResolveProperties, supportedStencilResolveModes));
alignmentData.push_back(offsetof(VkPhysicalDeviceDepthStencilResolveProperties, independentResolveNone));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceDepthStencilResolveProperties, independentResolveNone));
alignmentData.push_back(offsetof(VkPhysicalDeviceDepthStencilResolveProperties, independentResolve));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceDepthStencilResolveProperties, independentResolve));

alignmentData.push_back(offsetof(VkSubpassDescriptionDepthStencilResolve, sType));
alignmentData.push_back(FIELD_SIZEOF(VkSubpassDescriptionDepthStencilResolve, sType));
alignmentData.push_back(offsetof(VkSubpassDescriptionDepthStencilResolve, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkSubpassDescriptionDepthStencilResolve, pNext));
alignmentData.push_back(offsetof(VkSubpassDescriptionDepthStencilResolve, depthResolveMode));
alignmentData.push_back(FIELD_SIZEOF(VkSubpassDescriptionDepthStencilResolve, depthResolveMode));
alignmentData.push_back(offsetof(VkSubpassDescriptionDepthStencilResolve, stencilResolveMode));
alignmentData.push_back(FIELD_SIZEOF(VkSubpassDescriptionDepthStencilResolve, stencilResolveMode));
alignmentData.push_back(offsetof(VkSubpassDescriptionDepthStencilResolve, pDepthStencilResolveAttachment));
alignmentData.push_back(FIELD_SIZEOF(VkSubpassDescriptionDepthStencilResolve, pDepthStencilResolveAttachment));

alignmentData.push_back(offsetof(VkPhysicalDeviceTransformFeedbackFeaturesEXT, sType));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceTransformFeedbackFeaturesEXT, sType));
alignmentData.push_back(offsetof(VkPhysicalDeviceTransformFeedbackFeaturesEXT, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceTransformFeedbackFeaturesEXT, pNext));
alignmentData.push_back(offsetof(VkPhysicalDeviceTransformFeedbackFeaturesEXT, transformFeedback));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceTransformFeedbackFeaturesEXT, transformFeedback));
alignmentData.push_back(offsetof(VkPhysicalDeviceTransformFeedbackFeaturesEXT, geometryStreams));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceTransformFeedbackFeaturesEXT, geometryStreams));
alignmentData.push_back(offsetof(VkPhysicalDeviceTransformFeedbackPropertiesEXT, sType));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceTransformFeedbackPropertiesEXT, sType));
alignmentData.push_back(offsetof(VkPhysicalDeviceTransformFeedbackPropertiesEXT, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceTransformFeedbackPropertiesEXT, pNext));
alignmentData.push_back(offsetof(VkPhysicalDeviceTransformFeedbackPropertiesEXT, maxTransformFeedbackStreams));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceTransformFeedbackPropertiesEXT, maxTransformFeedbackStreams));
alignmentData.push_back(offsetof(VkPhysicalDeviceTransformFeedbackPropertiesEXT, maxTransformFeedbackBuffers));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceTransformFeedbackPropertiesEXT, maxTransformFeedbackBuffers));
alignmentData.push_back(offsetof(VkPhysicalDeviceTransformFeedbackPropertiesEXT, maxTransformFeedbackBufferSize));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceTransformFeedbackPropertiesEXT, maxTransformFeedbackBufferSize));
alignmentData.push_back(offsetof(VkPhysicalDeviceTransformFeedbackPropertiesEXT, maxTransformFeedbackStreamDataSize));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceTransformFeedbackPropertiesEXT, maxTransformFeedbackStreamDataSize));
alignmentData.push_back(offsetof(VkPhysicalDeviceTransformFeedbackPropertiesEXT, maxTransformFeedbackBufferDataSize));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceTransformFeedbackPropertiesEXT, maxTransformFeedbackBufferDataSize));
alignmentData.push_back(offsetof(VkPhysicalDeviceTransformFeedbackPropertiesEXT, maxTransformFeedbackBufferDataStride));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceTransformFeedbackPropertiesEXT, maxTransformFeedbackBufferDataStride));
alignmentData.push_back(offsetof(VkPhysicalDeviceTransformFeedbackPropertiesEXT, transformFeedbackQueries));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceTransformFeedbackPropertiesEXT, transformFeedbackQueries));
alignmentData.push_back(offsetof(VkPhysicalDeviceTransformFeedbackPropertiesEXT, transformFeedbackStreamsLinesTriangles));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceTransformFeedbackPropertiesEXT, transformFeedbackStreamsLinesTriangles));
alignmentData.push_back(offsetof(VkPhysicalDeviceTransformFeedbackPropertiesEXT, transformFeedbackRasterizationStreamSelect));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceTransformFeedbackPropertiesEXT, transformFeedbackRasterizationStreamSelect));
alignmentData.push_back(offsetof(VkPhysicalDeviceTransformFeedbackPropertiesEXT, transformFeedbackDraw));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceTransformFeedbackPropertiesEXT, transformFeedbackDraw));
alignmentData.push_back(offsetof(VkPipelineRasterizationStateStreamCreateInfoEXT, sType));
alignmentData.push_back(FIELD_SIZEOF(VkPipelineRasterizationStateStreamCreateInfoEXT, sType));
alignmentData.push_back(offsetof(VkPipelineRasterizationStateStreamCreateInfoEXT, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkPipelineRasterizationStateStreamCreateInfoEXT, pNext));
alignmentData.push_back(offsetof(VkPipelineRasterizationStateStreamCreateInfoEXT, flags));
alignmentData.push_back(FIELD_SIZEOF(VkPipelineRasterizationStateStreamCreateInfoEXT, flags));
alignmentData.push_back(offsetof(VkPipelineRasterizationStateStreamCreateInfoEXT, rasterizationStream));
alignmentData.push_back(FIELD_SIZEOF(VkPipelineRasterizationStateStreamCreateInfoEXT, rasterizationStream));
alignmentData.push_back(offsetof(VkPhysicalDeviceMeshShaderFeaturesEXT, sType));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceMeshShaderFeaturesEXT, sType));
alignmentData.push_back(offsetof(VkPhysicalDeviceMeshShaderFeaturesEXT, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceMeshShaderFeaturesEXT, pNext));
alignmentData.push_back(offsetof(VkPhysicalDeviceMeshShaderFeaturesEXT, taskShader));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceMeshShaderFeaturesEXT, taskShader));
alignmentData.push_back(offsetof(VkPhysicalDeviceMeshShaderFeaturesEXT, meshShader));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceMeshShaderFeaturesEXT, meshShader));
alignmentData.push_back(offsetof(VkPhysicalDeviceMeshShaderFeaturesEXT, multiviewMeshShader));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceMeshShaderFeaturesEXT, multiviewMeshShader));
alignmentData.push_back(offsetof(VkPhysicalDeviceMeshShaderFeaturesEXT, primitiveFragmentShadingRateMeshShader));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceMeshShaderFeaturesEXT, primitiveFragmentShadingRateMeshShader));
alignmentData.push_back(offsetof(VkPhysicalDeviceMeshShaderFeaturesEXT, meshShaderQueries));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceMeshShaderFeaturesEXT, meshShaderQueries));
alignmentData.push_back(offsetof(VkPhysicalDeviceMeshShaderPropertiesEXT, sType));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceMeshShaderPropertiesEXT, sType));
alignmentData.push_back(offsetof(VkPhysicalDeviceMeshShaderPropertiesEXT, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceMeshShaderPropertiesEXT, pNext));
alignmentData.push_back(offsetof(VkPhysicalDeviceMeshShaderPropertiesEXT, maxTaskWorkGroupTotalCount));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceMeshShaderPropertiesEXT, maxTaskWorkGroupTotalCount));
alignmentData.push_back(offsetof(VkPhysicalDeviceMeshShaderPropertiesEXT, maxTaskWorkGroupCount));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceMeshShaderPropertiesEXT, maxTaskWorkGroupCount));
alignmentData.push_back(offsetof(VkPhysicalDeviceMeshShaderPropertiesEXT, maxTaskWorkGroupInvocations));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceMeshShaderPropertiesEXT, maxTaskWorkGroupInvocations));
alignmentData.push_back(offsetof(VkPhysicalDeviceMeshShaderPropertiesEXT, maxTaskWorkGroupSize));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceMeshShaderPropertiesEXT, maxTaskWorkGroupSize));
alignmentData.push_back(offsetof(VkPhysicalDeviceMeshShaderPropertiesEXT, maxTaskPayloadSize));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceMeshShaderPropertiesEXT, maxTaskPayloadSize));
alignmentData.push_back(offsetof(VkPhysicalDeviceMeshShaderPropertiesEXT, maxTaskSharedMemorySize));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceMeshShaderPropertiesEXT, maxTaskSharedMemorySize));
alignmentData.push_back(offsetof(VkPhysicalDeviceMeshShaderPropertiesEXT, maxTaskPayloadAndSharedMemorySize));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceMeshShaderPropertiesEXT, maxTaskPayloadAndSharedMemorySize));
alignmentData.push_back(offsetof(VkPhysicalDeviceMeshShaderPropertiesEXT, maxMeshWorkGroupTotalCount));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceMeshShaderPropertiesEXT, maxMeshWorkGroupTotalCount));
alignmentData.push_back(offsetof(VkPhysicalDeviceMeshShaderPropertiesEXT, maxMeshWorkGroupCount));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceMeshShaderPropertiesEXT, maxMeshWorkGroupCount));
alignmentData.push_back(offsetof(VkPhysicalDeviceMeshShaderPropertiesEXT, maxMeshWorkGroupInvocations));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceMeshShaderPropertiesEXT, maxMeshWorkGroupInvocations));
alignmentData.push_back(offsetof(VkPhysicalDeviceMeshShaderPropertiesEXT, maxMeshWorkGroupSize));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceMeshShaderPropertiesEXT, maxMeshWorkGroupSize));
alignmentData.push_back(offsetof(VkPhysicalDeviceMeshShaderPropertiesEXT, maxMeshSharedMemorySize));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceMeshShaderPropertiesEXT, maxMeshSharedMemorySize));
alignmentData.push_back(offsetof(VkPhysicalDeviceMeshShaderPropertiesEXT, maxMeshPayloadAndSharedMemorySize));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceMeshShaderPropertiesEXT, maxMeshPayloadAndSharedMemorySize));
alignmentData.push_back(offsetof(VkPhysicalDeviceMeshShaderPropertiesEXT, maxMeshOutputMemorySize));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceMeshShaderPropertiesEXT, maxMeshOutputMemorySize));
alignmentData.push_back(offsetof(VkPhysicalDeviceMeshShaderPropertiesEXT, maxMeshPayloadAndOutputMemorySize));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceMeshShaderPropertiesEXT, maxMeshPayloadAndOutputMemorySize));
alignmentData.push_back(offsetof(VkPhysicalDeviceMeshShaderPropertiesEXT, maxMeshOutputComponents));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceMeshShaderPropertiesEXT, maxMeshOutputComponents));
alignmentData.push_back(offsetof(VkPhysicalDeviceMeshShaderPropertiesEXT, maxMeshOutputVertices));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceMeshShaderPropertiesEXT, maxMeshOutputVertices));
alignmentData.push_back(offsetof(VkPhysicalDeviceMeshShaderPropertiesEXT, maxMeshOutputPrimitives));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceMeshShaderPropertiesEXT, maxMeshOutputPrimitives));
alignmentData.push_back(offsetof(VkPhysicalDeviceMeshShaderPropertiesEXT, maxMeshOutputLayers));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceMeshShaderPropertiesEXT, maxMeshOutputLayers));
alignmentData.push_back(offsetof(VkPhysicalDeviceMeshShaderPropertiesEXT, maxMeshMultiviewViewCount));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceMeshShaderPropertiesEXT, maxMeshMultiviewViewCount));
alignmentData.push_back(offsetof(VkPhysicalDeviceMeshShaderPropertiesEXT, meshOutputPerVertexGranularity));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceMeshShaderPropertiesEXT, meshOutputPerVertexGranularity));
alignmentData.push_back(offsetof(VkPhysicalDeviceMeshShaderPropertiesEXT, meshOutputPerPrimitiveGranularity));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceMeshShaderPropertiesEXT, meshOutputPerPrimitiveGranularity));
alignmentData.push_back(offsetof(VkPhysicalDeviceMeshShaderPropertiesEXT, maxPreferredTaskWorkGroupInvocations));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceMeshShaderPropertiesEXT, maxPreferredTaskWorkGroupInvocations));
alignmentData.push_back(offsetof(VkPhysicalDeviceMeshShaderPropertiesEXT, maxPreferredMeshWorkGroupInvocations));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceMeshShaderPropertiesEXT, maxPreferredMeshWorkGroupInvocations));
alignmentData.push_back(offsetof(VkPhysicalDeviceMeshShaderPropertiesEXT, prefersLocalInvocationVertexOutput));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceMeshShaderPropertiesEXT, prefersLocalInvocationVertexOutput));
alignmentData.push_back(offsetof(VkPhysicalDeviceMeshShaderPropertiesEXT, prefersLocalInvocationPrimitiveOutput));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceMeshShaderPropertiesEXT, prefersLocalInvocationPrimitiveOutput));
alignmentData.push_back(offsetof(VkPhysicalDeviceMeshShaderPropertiesEXT, prefersCompactVertexOutput));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceMeshShaderPropertiesEXT, prefersCompactVertexOutput));
alignmentData.push_back(offsetof(VkPhysicalDeviceMeshShaderPropertiesEXT, prefersCompactPrimitiveOutput));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceMeshShaderPropertiesEXT, prefersCompactPrimitiveOutput));
alignmentData.push_back(offsetof(VkDrawMeshTasksIndirectCommandEXT, groupCountX));
alignmentData.push_back(FIELD_SIZEOF(VkDrawMeshTasksIndirectCommandEXT, groupCountX));
alignmentData.push_back(offsetof(VkDrawMeshTasksIndirectCommandEXT, groupCountY));
alignmentData.push_back(FIELD_SIZEOF(VkDrawMeshTasksIndirectCommandEXT, groupCountY));
alignmentData.push_back(offsetof(VkDrawMeshTasksIndirectCommandEXT, groupCountZ));
alignmentData.push_back(FIELD_SIZEOF(VkDrawMeshTasksIndirectCommandEXT, groupCountZ));
alignmentData.push_back(offsetof(VkRayTracingShaderGroupCreateInfoKHR, sType));
alignmentData.push_back(FIELD_SIZEOF(VkRayTracingShaderGroupCreateInfoKHR, sType));
alignmentData.push_back(offsetof(VkRayTracingShaderGroupCreateInfoKHR, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkRayTracingShaderGroupCreateInfoKHR, pNext));
alignmentData.push_back(offsetof(VkRayTracingShaderGroupCreateInfoKHR, type));
alignmentData.push_back(FIELD_SIZEOF(VkRayTracingShaderGroupCreateInfoKHR, type));
alignmentData.push_back(offsetof(VkRayTracingShaderGroupCreateInfoKHR, generalShader));
alignmentData.push_back(FIELD_SIZEOF(VkRayTracingShaderGroupCreateInfoKHR, generalShader));
alignmentData.push_back(offsetof(VkRayTracingShaderGroupCreateInfoKHR, closestHitShader));
alignmentData.push_back(FIELD_SIZEOF(VkRayTracingShaderGroupCreateInfoKHR, closestHitShader));
alignmentData.push_back(offsetof(VkRayTracingShaderGroupCreateInfoKHR, anyHitShader));
alignmentData.push_back(FIELD_SIZEOF(VkRayTracingShaderGroupCreateInfoKHR, anyHitShader));
alignmentData.push_back(offsetof(VkRayTracingShaderGroupCreateInfoKHR, intersectionShader));
alignmentData.push_back(FIELD_SIZEOF(VkRayTracingShaderGroupCreateInfoKHR, intersectionShader));
alignmentData.push_back(offsetof(VkRayTracingShaderGroupCreateInfoKHR, pShaderGroupCaptureReplayHandle));
alignmentData.push_back(FIELD_SIZEOF(VkRayTracingShaderGroupCreateInfoKHR, pShaderGroupCaptureReplayHandle));
alignmentData.push_back(offsetof(VkRayTracingPipelineCreateInfoKHR, sType));
alignmentData.push_back(FIELD_SIZEOF(VkRayTracingPipelineCreateInfoKHR, sType));
alignmentData.push_back(offsetof(VkRayTracingPipelineCreateInfoKHR, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkRayTracingPipelineCreateInfoKHR, pNext));
alignmentData.push_back(offsetof(VkRayTracingPipelineCreateInfoKHR, flags));
alignmentData.push_back(FIELD_SIZEOF(VkRayTracingPipelineCreateInfoKHR, flags));
alignmentData.push_back(offsetof(VkRayTracingPipelineCreateInfoKHR, stageCount));
alignmentData.push_back(FIELD_SIZEOF(VkRayTracingPipelineCreateInfoKHR, stageCount));
alignmentData.push_back(offsetof(VkRayTracingPipelineCreateInfoKHR, pStages));
alignmentData.push_back(FIELD_SIZEOF(VkRayTracingPipelineCreateInfoKHR, pStages));
alignmentData.push_back(offsetof(VkRayTracingPipelineCreateInfoKHR, groupCount));
alignmentData.push_back(FIELD_SIZEOF(VkRayTracingPipelineCreateInfoKHR, groupCount));
alignmentData.push_back(offsetof(VkRayTracingPipelineCreateInfoKHR, pGroups));
alignmentData.push_back(FIELD_SIZEOF(VkRayTracingPipelineCreateInfoKHR, pGroups));
alignmentData.push_back(offsetof(VkRayTracingPipelineCreateInfoKHR, maxPipelineRayRecursionDepth));
alignmentData.push_back(FIELD_SIZEOF(VkRayTracingPipelineCreateInfoKHR, maxPipelineRayRecursionDepth));
alignmentData.push_back(offsetof(VkRayTracingPipelineCreateInfoKHR, pLibraryInfo));
alignmentData.push_back(FIELD_SIZEOF(VkRayTracingPipelineCreateInfoKHR, pLibraryInfo));
alignmentData.push_back(offsetof(VkRayTracingPipelineCreateInfoKHR, pLibraryInterface));
alignmentData.push_back(FIELD_SIZEOF(VkRayTracingPipelineCreateInfoKHR, pLibraryInterface));
alignmentData.push_back(offsetof(VkRayTracingPipelineCreateInfoKHR, pDynamicState));
alignmentData.push_back(FIELD_SIZEOF(VkRayTracingPipelineCreateInfoKHR, pDynamicState));
alignmentData.push_back(offsetof(VkRayTracingPipelineCreateInfoKHR, layout));
alignmentData.push_back(FIELD_SIZEOF(VkRayTracingPipelineCreateInfoKHR, layout));
alignmentData.push_back(offsetof(VkRayTracingPipelineCreateInfoKHR, basePipelineHandle));
alignmentData.push_back(FIELD_SIZEOF(VkRayTracingPipelineCreateInfoKHR, basePipelineHandle));
alignmentData.push_back(offsetof(VkRayTracingPipelineCreateInfoKHR, basePipelineIndex));
alignmentData.push_back(FIELD_SIZEOF(VkRayTracingPipelineCreateInfoKHR, basePipelineIndex));
alignmentData.push_back(offsetof(VkPhysicalDeviceRayTracingPipelineFeaturesKHR, sType));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceRayTracingPipelineFeaturesKHR, sType));
alignmentData.push_back(offsetof(VkPhysicalDeviceRayTracingPipelineFeaturesKHR, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceRayTracingPipelineFeaturesKHR, pNext));
alignmentData.push_back(offsetof(VkPhysicalDeviceRayTracingPipelineFeaturesKHR, rayTracingPipeline));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceRayTracingPipelineFeaturesKHR, rayTracingPipeline));
alignmentData.push_back(offsetof(VkPhysicalDeviceRayTracingPipelineFeaturesKHR, rayTracingPipelineShaderGroupHandleCaptureReplay));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceRayTracingPipelineFeaturesKHR, rayTracingPipelineShaderGroupHandleCaptureReplay));
alignmentData.push_back(offsetof(VkPhysicalDeviceRayTracingPipelineFeaturesKHR, rayTracingPipelineShaderGroupHandleCaptureReplayMixed));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceRayTracingPipelineFeaturesKHR, rayTracingPipelineShaderGroupHandleCaptureReplayMixed));
alignmentData.push_back(offsetof(VkPhysicalDeviceRayTracingPipelineFeaturesKHR, rayTracingPipelineTraceRaysIndirect));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceRayTracingPipelineFeaturesKHR, rayTracingPipelineTraceRaysIndirect));
alignmentData.push_back(offsetof(VkPhysicalDeviceRayTracingPipelineFeaturesKHR, rayTraversalPrimitiveCulling));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceRayTracingPipelineFeaturesKHR, rayTraversalPrimitiveCulling));
alignmentData.push_back(offsetof(VkPhysicalDeviceRayQueryFeaturesKHR, sType));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceRayQueryFeaturesKHR, sType));
alignmentData.push_back(offsetof(VkPhysicalDeviceRayQueryFeaturesKHR, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceRayQueryFeaturesKHR, pNext));
alignmentData.push_back(offsetof(VkPhysicalDeviceRayQueryFeaturesKHR, rayQuery));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceRayQueryFeaturesKHR, rayQuery));
alignmentData.push_back(offsetof(VkPhysicalDeviceRayTracingPipelinePropertiesKHR, sType));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceRayTracingPipelinePropertiesKHR, sType));
alignmentData.push_back(offsetof(VkPhysicalDeviceRayTracingPipelinePropertiesKHR, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceRayTracingPipelinePropertiesKHR, pNext));
alignmentData.push_back(offsetof(VkPhysicalDeviceRayTracingPipelinePropertiesKHR, shaderGroupHandleSize));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceRayTracingPipelinePropertiesKHR, shaderGroupHandleSize));
alignmentData.push_back(offsetof(VkPhysicalDeviceRayTracingPipelinePropertiesKHR, maxRayRecursionDepth));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceRayTracingPipelinePropertiesKHR, maxRayRecursionDepth));
alignmentData.push_back(offsetof(VkPhysicalDeviceRayTracingPipelinePropertiesKHR, maxShaderGroupStride));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceRayTracingPipelinePropertiesKHR, maxShaderGroupStride));
alignmentData.push_back(offsetof(VkPhysicalDeviceRayTracingPipelinePropertiesKHR, shaderGroupBaseAlignment));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceRayTracingPipelinePropertiesKHR, shaderGroupBaseAlignment));
alignmentData.push_back(offsetof(VkPhysicalDeviceRayTracingPipelinePropertiesKHR, shaderGroupHandleCaptureReplaySize));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceRayTracingPipelinePropertiesKHR, shaderGroupHandleCaptureReplaySize));
alignmentData.push_back(offsetof(VkPhysicalDeviceRayTracingPipelinePropertiesKHR, maxRayDispatchInvocationCount));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceRayTracingPipelinePropertiesKHR, maxRayDispatchInvocationCount));
alignmentData.push_back(offsetof(VkPhysicalDeviceRayTracingPipelinePropertiesKHR, shaderGroupHandleAlignment));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceRayTracingPipelinePropertiesKHR, shaderGroupHandleAlignment));
alignmentData.push_back(offsetof(VkPhysicalDeviceRayTracingPipelinePropertiesKHR, maxRayHitAttributeSize));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceRayTracingPipelinePropertiesKHR, maxRayHitAttributeSize));
alignmentData.push_back(offsetof(VkStridedDeviceAddressRegionKHR, deviceAddress));
alignmentData.push_back(FIELD_SIZEOF(VkStridedDeviceAddressRegionKHR, deviceAddress));
alignmentData.push_back(offsetof(VkStridedDeviceAddressRegionKHR, stride));
alignmentData.push_back(FIELD_SIZEOF(VkStridedDeviceAddressRegionKHR, stride));
alignmentData.push_back(offsetof(VkStridedDeviceAddressRegionKHR, size));
alignmentData.push_back(FIELD_SIZEOF(VkStridedDeviceAddressRegionKHR, size));
alignmentData.push_back(offsetof(VkTraceRaysIndirectCommandKHR, width));
alignmentData.push_back(FIELD_SIZEOF(VkTraceRaysIndirectCommandKHR, width));
alignmentData.push_back(offsetof(VkTraceRaysIndirectCommandKHR, height));
alignmentData.push_back(FIELD_SIZEOF(VkTraceRaysIndirectCommandKHR, height));
alignmentData.push_back(offsetof(VkTraceRaysIndirectCommandKHR, depth));
alignmentData.push_back(FIELD_SIZEOF(VkTraceRaysIndirectCommandKHR, depth));
alignmentData.push_back(offsetof(VkTraceRaysIndirectCommand2KHR, raygenShaderRecordAddress));
alignmentData.push_back(FIELD_SIZEOF(VkTraceRaysIndirectCommand2KHR, raygenShaderRecordAddress));
alignmentData.push_back(offsetof(VkTraceRaysIndirectCommand2KHR, raygenShaderRecordSize));
alignmentData.push_back(FIELD_SIZEOF(VkTraceRaysIndirectCommand2KHR, raygenShaderRecordSize));
alignmentData.push_back(offsetof(VkTraceRaysIndirectCommand2KHR, missShaderBindingTableAddress));
alignmentData.push_back(FIELD_SIZEOF(VkTraceRaysIndirectCommand2KHR, missShaderBindingTableAddress));
alignmentData.push_back(offsetof(VkTraceRaysIndirectCommand2KHR, missShaderBindingTableSize));
alignmentData.push_back(FIELD_SIZEOF(VkTraceRaysIndirectCommand2KHR, missShaderBindingTableSize));
alignmentData.push_back(offsetof(VkTraceRaysIndirectCommand2KHR, missShaderBindingTableStride));
alignmentData.push_back(FIELD_SIZEOF(VkTraceRaysIndirectCommand2KHR, missShaderBindingTableStride));
alignmentData.push_back(offsetof(VkTraceRaysIndirectCommand2KHR, hitShaderBindingTableAddress));
alignmentData.push_back(FIELD_SIZEOF(VkTraceRaysIndirectCommand2KHR, hitShaderBindingTableAddress));
alignmentData.push_back(offsetof(VkTraceRaysIndirectCommand2KHR, hitShaderBindingTableSize));
alignmentData.push_back(FIELD_SIZEOF(VkTraceRaysIndirectCommand2KHR, hitShaderBindingTableSize));
alignmentData.push_back(offsetof(VkTraceRaysIndirectCommand2KHR, hitShaderBindingTableStride));
alignmentData.push_back(FIELD_SIZEOF(VkTraceRaysIndirectCommand2KHR, hitShaderBindingTableStride));
alignmentData.push_back(offsetof(VkTraceRaysIndirectCommand2KHR, callableShaderBindingTableAddress));
alignmentData.push_back(FIELD_SIZEOF(VkTraceRaysIndirectCommand2KHR, callableShaderBindingTableAddress));
alignmentData.push_back(offsetof(VkTraceRaysIndirectCommand2KHR, callableShaderBindingTableSize));
alignmentData.push_back(FIELD_SIZEOF(VkTraceRaysIndirectCommand2KHR, callableShaderBindingTableSize));
alignmentData.push_back(offsetof(VkTraceRaysIndirectCommand2KHR, callableShaderBindingTableStride));
alignmentData.push_back(FIELD_SIZEOF(VkTraceRaysIndirectCommand2KHR, callableShaderBindingTableStride));
alignmentData.push_back(offsetof(VkTraceRaysIndirectCommand2KHR, width));
alignmentData.push_back(FIELD_SIZEOF(VkTraceRaysIndirectCommand2KHR, width));
alignmentData.push_back(offsetof(VkTraceRaysIndirectCommand2KHR, height));
alignmentData.push_back(FIELD_SIZEOF(VkTraceRaysIndirectCommand2KHR, height));
alignmentData.push_back(offsetof(VkTraceRaysIndirectCommand2KHR, depth));
alignmentData.push_back(FIELD_SIZEOF(VkTraceRaysIndirectCommand2KHR, depth));
alignmentData.push_back(offsetof(VkPhysicalDeviceRayTracingMaintenance1FeaturesKHR, sType));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceRayTracingMaintenance1FeaturesKHR, sType));
alignmentData.push_back(offsetof(VkPhysicalDeviceRayTracingMaintenance1FeaturesKHR, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceRayTracingMaintenance1FeaturesKHR, pNext));
alignmentData.push_back(offsetof(VkPhysicalDeviceRayTracingMaintenance1FeaturesKHR, rayTracingMaintenance1));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceRayTracingMaintenance1FeaturesKHR, rayTracingMaintenance1));
alignmentData.push_back(offsetof(VkPhysicalDeviceRayTracingMaintenance1FeaturesKHR, rayTracingPipelineTraceRaysIndirect2));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceRayTracingMaintenance1FeaturesKHR, rayTracingPipelineTraceRaysIndirect2));
alignmentData.push_back(offsetof(VkDrmFormatModifierPropertiesListEXT, sType));
alignmentData.push_back(FIELD_SIZEOF(VkDrmFormatModifierPropertiesListEXT, sType));
alignmentData.push_back(offsetof(VkDrmFormatModifierPropertiesListEXT, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkDrmFormatModifierPropertiesListEXT, pNext));
alignmentData.push_back(offsetof(VkDrmFormatModifierPropertiesListEXT, drmFormatModifierCount));
alignmentData.push_back(FIELD_SIZEOF(VkDrmFormatModifierPropertiesListEXT, drmFormatModifierCount));
alignmentData.push_back(offsetof(VkDrmFormatModifierPropertiesListEXT, pDrmFormatModifierProperties));
alignmentData.push_back(FIELD_SIZEOF(VkDrmFormatModifierPropertiesListEXT, pDrmFormatModifierProperties));
alignmentData.push_back(offsetof(VkDrmFormatModifierPropertiesEXT, drmFormatModifier));
alignmentData.push_back(FIELD_SIZEOF(VkDrmFormatModifierPropertiesEXT, drmFormatModifier));
alignmentData.push_back(offsetof(VkDrmFormatModifierPropertiesEXT, drmFormatModifierPlaneCount));
alignmentData.push_back(FIELD_SIZEOF(VkDrmFormatModifierPropertiesEXT, drmFormatModifierPlaneCount));
alignmentData.push_back(offsetof(VkDrmFormatModifierPropertiesEXT, drmFormatModifierTilingFeatures));
alignmentData.push_back(FIELD_SIZEOF(VkDrmFormatModifierPropertiesEXT, drmFormatModifierTilingFeatures));
alignmentData.push_back(offsetof(VkPhysicalDeviceImageDrmFormatModifierInfoEXT, sType));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceImageDrmFormatModifierInfoEXT, sType));
alignmentData.push_back(offsetof(VkPhysicalDeviceImageDrmFormatModifierInfoEXT, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceImageDrmFormatModifierInfoEXT, pNext));
alignmentData.push_back(offsetof(VkPhysicalDeviceImageDrmFormatModifierInfoEXT, drmFormatModifier));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceImageDrmFormatModifierInfoEXT, drmFormatModifier));
alignmentData.push_back(offsetof(VkPhysicalDeviceImageDrmFormatModifierInfoEXT, sharingMode));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceImageDrmFormatModifierInfoEXT, sharingMode));
alignmentData.push_back(offsetof(VkPhysicalDeviceImageDrmFormatModifierInfoEXT, queueFamilyIndexCount));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceImageDrmFormatModifierInfoEXT, queueFamilyIndexCount));
alignmentData.push_back(offsetof(VkPhysicalDeviceImageDrmFormatModifierInfoEXT, pQueueFamilyIndices));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceImageDrmFormatModifierInfoEXT, pQueueFamilyIndices));
alignmentData.push_back(offsetof(VkImageDrmFormatModifierListCreateInfoEXT, sType));
alignmentData.push_back(FIELD_SIZEOF(VkImageDrmFormatModifierListCreateInfoEXT, sType));
alignmentData.push_back(offsetof(VkImageDrmFormatModifierListCreateInfoEXT, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkImageDrmFormatModifierListCreateInfoEXT, pNext));
alignmentData.push_back(offsetof(VkImageDrmFormatModifierListCreateInfoEXT, drmFormatModifierCount));
alignmentData.push_back(FIELD_SIZEOF(VkImageDrmFormatModifierListCreateInfoEXT, drmFormatModifierCount));
alignmentData.push_back(offsetof(VkImageDrmFormatModifierListCreateInfoEXT, pDrmFormatModifiers));
alignmentData.push_back(FIELD_SIZEOF(VkImageDrmFormatModifierListCreateInfoEXT, pDrmFormatModifiers));
alignmentData.push_back(offsetof(VkImageDrmFormatModifierExplicitCreateInfoEXT, sType));
alignmentData.push_back(FIELD_SIZEOF(VkImageDrmFormatModifierExplicitCreateInfoEXT, sType));
alignmentData.push_back(offsetof(VkImageDrmFormatModifierExplicitCreateInfoEXT, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkImageDrmFormatModifierExplicitCreateInfoEXT, pNext));
alignmentData.push_back(offsetof(VkImageDrmFormatModifierExplicitCreateInfoEXT, drmFormatModifier));
alignmentData.push_back(FIELD_SIZEOF(VkImageDrmFormatModifierExplicitCreateInfoEXT, drmFormatModifier));
alignmentData.push_back(offsetof(VkImageDrmFormatModifierExplicitCreateInfoEXT, drmFormatModifierPlaneCount));
alignmentData.push_back(FIELD_SIZEOF(VkImageDrmFormatModifierExplicitCreateInfoEXT, drmFormatModifierPlaneCount));
alignmentData.push_back(offsetof(VkImageDrmFormatModifierExplicitCreateInfoEXT, pPlaneLayouts));
alignmentData.push_back(FIELD_SIZEOF(VkImageDrmFormatModifierExplicitCreateInfoEXT, pPlaneLayouts));
alignmentData.push_back(offsetof(VkImageDrmFormatModifierPropertiesEXT, sType));
alignmentData.push_back(FIELD_SIZEOF(VkImageDrmFormatModifierPropertiesEXT, sType));
alignmentData.push_back(offsetof(VkImageDrmFormatModifierPropertiesEXT, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkImageDrmFormatModifierPropertiesEXT, pNext));
alignmentData.push_back(offsetof(VkImageDrmFormatModifierPropertiesEXT, drmFormatModifier));
alignmentData.push_back(FIELD_SIZEOF(VkImageDrmFormatModifierPropertiesEXT, drmFormatModifier));
alignmentData.push_back(offsetof(VkImageStencilUsageCreateInfo, sType));
alignmentData.push_back(FIELD_SIZEOF(VkImageStencilUsageCreateInfo, sType));
alignmentData.push_back(offsetof(VkImageStencilUsageCreateInfo, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkImageStencilUsageCreateInfo, pNext));
alignmentData.push_back(offsetof(VkImageStencilUsageCreateInfo, stencilUsage));
alignmentData.push_back(FIELD_SIZEOF(VkImageStencilUsageCreateInfo, stencilUsage));

alignmentData.push_back(offsetof(VkPhysicalDeviceFragmentDensityMapFeaturesEXT, sType));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceFragmentDensityMapFeaturesEXT, sType));
alignmentData.push_back(offsetof(VkPhysicalDeviceFragmentDensityMapFeaturesEXT, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceFragmentDensityMapFeaturesEXT, pNext));
alignmentData.push_back(offsetof(VkPhysicalDeviceFragmentDensityMapFeaturesEXT, fragmentDensityMap));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceFragmentDensityMapFeaturesEXT, fragmentDensityMap));
alignmentData.push_back(offsetof(VkPhysicalDeviceFragmentDensityMapFeaturesEXT, fragmentDensityMapDynamic));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceFragmentDensityMapFeaturesEXT, fragmentDensityMapDynamic));
alignmentData.push_back(offsetof(VkPhysicalDeviceFragmentDensityMapFeaturesEXT, fragmentDensityMapNonSubsampledImages));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceFragmentDensityMapFeaturesEXT, fragmentDensityMapNonSubsampledImages));
alignmentData.push_back(offsetof(VkPhysicalDeviceFragmentDensityMap2FeaturesEXT, sType));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceFragmentDensityMap2FeaturesEXT, sType));
alignmentData.push_back(offsetof(VkPhysicalDeviceFragmentDensityMap2FeaturesEXT, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceFragmentDensityMap2FeaturesEXT, pNext));
alignmentData.push_back(offsetof(VkPhysicalDeviceFragmentDensityMap2FeaturesEXT, fragmentDensityMapDeferred));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceFragmentDensityMap2FeaturesEXT, fragmentDensityMapDeferred));
alignmentData.push_back(offsetof(VkPhysicalDeviceFragmentDensityMapPropertiesEXT, sType));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceFragmentDensityMapPropertiesEXT, sType));
alignmentData.push_back(offsetof(VkPhysicalDeviceFragmentDensityMapPropertiesEXT, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceFragmentDensityMapPropertiesEXT, pNext));
alignmentData.push_back(offsetof(VkPhysicalDeviceFragmentDensityMapPropertiesEXT, minFragmentDensityTexelSize));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceFragmentDensityMapPropertiesEXT, minFragmentDensityTexelSize));
alignmentData.push_back(offsetof(VkPhysicalDeviceFragmentDensityMapPropertiesEXT, maxFragmentDensityTexelSize));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceFragmentDensityMapPropertiesEXT, maxFragmentDensityTexelSize));
alignmentData.push_back(offsetof(VkPhysicalDeviceFragmentDensityMapPropertiesEXT, fragmentDensityInvocations));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceFragmentDensityMapPropertiesEXT, fragmentDensityInvocations));
alignmentData.push_back(offsetof(VkPhysicalDeviceFragmentDensityMap2PropertiesEXT, sType));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceFragmentDensityMap2PropertiesEXT, sType));
alignmentData.push_back(offsetof(VkPhysicalDeviceFragmentDensityMap2PropertiesEXT, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceFragmentDensityMap2PropertiesEXT, pNext));
alignmentData.push_back(offsetof(VkPhysicalDeviceFragmentDensityMap2PropertiesEXT, subsampledLoads));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceFragmentDensityMap2PropertiesEXT, subsampledLoads));
alignmentData.push_back(offsetof(VkPhysicalDeviceFragmentDensityMap2PropertiesEXT, subsampledCoarseReconstructionEarlyAccess));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceFragmentDensityMap2PropertiesEXT, subsampledCoarseReconstructionEarlyAccess));
alignmentData.push_back(offsetof(VkPhysicalDeviceFragmentDensityMap2PropertiesEXT, maxSubsampledArrayLayers));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceFragmentDensityMap2PropertiesEXT, maxSubsampledArrayLayers));
alignmentData.push_back(offsetof(VkPhysicalDeviceFragmentDensityMap2PropertiesEXT, maxDescriptorSetSubsampledSamplers));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceFragmentDensityMap2PropertiesEXT, maxDescriptorSetSubsampledSamplers));
alignmentData.push_back(offsetof(VkRenderPassFragmentDensityMapCreateInfoEXT, sType));
alignmentData.push_back(FIELD_SIZEOF(VkRenderPassFragmentDensityMapCreateInfoEXT, sType));
alignmentData.push_back(offsetof(VkRenderPassFragmentDensityMapCreateInfoEXT, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkRenderPassFragmentDensityMapCreateInfoEXT, pNext));
alignmentData.push_back(offsetof(VkRenderPassFragmentDensityMapCreateInfoEXT, fragmentDensityMapAttachment));
alignmentData.push_back(FIELD_SIZEOF(VkRenderPassFragmentDensityMapCreateInfoEXT, fragmentDensityMapAttachment));
alignmentData.push_back(offsetof(VkPhysicalDeviceScalarBlockLayoutFeatures, sType));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceScalarBlockLayoutFeatures, sType));
alignmentData.push_back(offsetof(VkPhysicalDeviceScalarBlockLayoutFeatures, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceScalarBlockLayoutFeatures, pNext));
alignmentData.push_back(offsetof(VkPhysicalDeviceScalarBlockLayoutFeatures, scalarBlockLayout));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceScalarBlockLayoutFeatures, scalarBlockLayout));

alignmentData.push_back(offsetof(VkSurfaceProtectedCapabilitiesKHR, sType));
alignmentData.push_back(FIELD_SIZEOF(VkSurfaceProtectedCapabilitiesKHR, sType));
alignmentData.push_back(offsetof(VkSurfaceProtectedCapabilitiesKHR, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkSurfaceProtectedCapabilitiesKHR, pNext));
alignmentData.push_back(offsetof(VkSurfaceProtectedCapabilitiesKHR, supportsProtected));
alignmentData.push_back(FIELD_SIZEOF(VkSurfaceProtectedCapabilitiesKHR, supportsProtected));
alignmentData.push_back(offsetof(VkPhysicalDeviceUniformBufferStandardLayoutFeatures, sType));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceUniformBufferStandardLayoutFeatures, sType));
alignmentData.push_back(offsetof(VkPhysicalDeviceUniformBufferStandardLayoutFeatures, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceUniformBufferStandardLayoutFeatures, pNext));
alignmentData.push_back(offsetof(VkPhysicalDeviceUniformBufferStandardLayoutFeatures, uniformBufferStandardLayout));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceUniformBufferStandardLayoutFeatures, uniformBufferStandardLayout));

alignmentData.push_back(offsetof(VkPhysicalDeviceMemoryBudgetPropertiesEXT, sType));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceMemoryBudgetPropertiesEXT, sType));
alignmentData.push_back(offsetof(VkPhysicalDeviceMemoryBudgetPropertiesEXT, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceMemoryBudgetPropertiesEXT, pNext));
alignmentData.push_back(offsetof(VkPhysicalDeviceMemoryBudgetPropertiesEXT, heapBudget));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceMemoryBudgetPropertiesEXT, heapBudget));
alignmentData.push_back(offsetof(VkPhysicalDeviceMemoryBudgetPropertiesEXT, heapUsage));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceMemoryBudgetPropertiesEXT, heapUsage));
alignmentData.push_back(offsetof(VkPhysicalDeviceMemoryPriorityFeaturesEXT, sType));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceMemoryPriorityFeaturesEXT, sType));
alignmentData.push_back(offsetof(VkPhysicalDeviceMemoryPriorityFeaturesEXT, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceMemoryPriorityFeaturesEXT, pNext));
alignmentData.push_back(offsetof(VkPhysicalDeviceMemoryPriorityFeaturesEXT, memoryPriority));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceMemoryPriorityFeaturesEXT, memoryPriority));
alignmentData.push_back(offsetof(VkMemoryPriorityAllocateInfoEXT, sType));
alignmentData.push_back(FIELD_SIZEOF(VkMemoryPriorityAllocateInfoEXT, sType));
alignmentData.push_back(offsetof(VkMemoryPriorityAllocateInfoEXT, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkMemoryPriorityAllocateInfoEXT, pNext));
alignmentData.push_back(offsetof(VkMemoryPriorityAllocateInfoEXT, priority));
alignmentData.push_back(FIELD_SIZEOF(VkMemoryPriorityAllocateInfoEXT, priority));
alignmentData.push_back(offsetof(VkPhysicalDevicePageableDeviceLocalMemoryFeaturesEXT, sType));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDevicePageableDeviceLocalMemoryFeaturesEXT, sType));
alignmentData.push_back(offsetof(VkPhysicalDevicePageableDeviceLocalMemoryFeaturesEXT, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDevicePageableDeviceLocalMemoryFeaturesEXT, pNext));
alignmentData.push_back(offsetof(VkPhysicalDevicePageableDeviceLocalMemoryFeaturesEXT, pageableDeviceLocalMemory));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDevicePageableDeviceLocalMemoryFeaturesEXT, pageableDeviceLocalMemory));
alignmentData.push_back(offsetof(VkPhysicalDeviceBufferDeviceAddressFeatures, sType));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceBufferDeviceAddressFeatures, sType));
alignmentData.push_back(offsetof(VkPhysicalDeviceBufferDeviceAddressFeatures, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceBufferDeviceAddressFeatures, pNext));
alignmentData.push_back(offsetof(VkPhysicalDeviceBufferDeviceAddressFeatures, bufferDeviceAddress));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceBufferDeviceAddressFeatures, bufferDeviceAddress));
alignmentData.push_back(offsetof(VkPhysicalDeviceBufferDeviceAddressFeatures, bufferDeviceAddressCaptureReplay));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceBufferDeviceAddressFeatures, bufferDeviceAddressCaptureReplay));
alignmentData.push_back(offsetof(VkPhysicalDeviceBufferDeviceAddressFeatures, bufferDeviceAddressMultiDevice));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceBufferDeviceAddressFeatures, bufferDeviceAddressMultiDevice));

alignmentData.push_back(offsetof(VkBufferDeviceAddressInfo, sType));
alignmentData.push_back(FIELD_SIZEOF(VkBufferDeviceAddressInfo, sType));
alignmentData.push_back(offsetof(VkBufferDeviceAddressInfo, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkBufferDeviceAddressInfo, pNext));
alignmentData.push_back(offsetof(VkBufferDeviceAddressInfo, buffer));
alignmentData.push_back(FIELD_SIZEOF(VkBufferDeviceAddressInfo, buffer));

alignmentData.push_back(offsetof(VkBufferOpaqueCaptureAddressCreateInfo, sType));
alignmentData.push_back(FIELD_SIZEOF(VkBufferOpaqueCaptureAddressCreateInfo, sType));
alignmentData.push_back(offsetof(VkBufferOpaqueCaptureAddressCreateInfo, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkBufferOpaqueCaptureAddressCreateInfo, pNext));
alignmentData.push_back(offsetof(VkBufferOpaqueCaptureAddressCreateInfo, opaqueCaptureAddress));
alignmentData.push_back(FIELD_SIZEOF(VkBufferOpaqueCaptureAddressCreateInfo, opaqueCaptureAddress));

alignmentData.push_back(offsetof(VkPhysicalDeviceImageViewImageFormatInfoEXT, sType));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceImageViewImageFormatInfoEXT, sType));
alignmentData.push_back(offsetof(VkPhysicalDeviceImageViewImageFormatInfoEXT, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceImageViewImageFormatInfoEXT, pNext));
alignmentData.push_back(offsetof(VkPhysicalDeviceImageViewImageFormatInfoEXT, imageViewType));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceImageViewImageFormatInfoEXT, imageViewType));
alignmentData.push_back(offsetof(VkFilterCubicImageViewImageFormatPropertiesEXT, sType));
alignmentData.push_back(FIELD_SIZEOF(VkFilterCubicImageViewImageFormatPropertiesEXT, sType));
alignmentData.push_back(offsetof(VkFilterCubicImageViewImageFormatPropertiesEXT, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkFilterCubicImageViewImageFormatPropertiesEXT, pNext));
alignmentData.push_back(offsetof(VkFilterCubicImageViewImageFormatPropertiesEXT, filterCubic));
alignmentData.push_back(FIELD_SIZEOF(VkFilterCubicImageViewImageFormatPropertiesEXT, filterCubic));
alignmentData.push_back(offsetof(VkFilterCubicImageViewImageFormatPropertiesEXT, filterCubicMinmax));
alignmentData.push_back(FIELD_SIZEOF(VkFilterCubicImageViewImageFormatPropertiesEXT, filterCubicMinmax));
alignmentData.push_back(offsetof(VkPhysicalDeviceImagelessFramebufferFeatures, sType));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceImagelessFramebufferFeatures, sType));
alignmentData.push_back(offsetof(VkPhysicalDeviceImagelessFramebufferFeatures, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceImagelessFramebufferFeatures, pNext));
alignmentData.push_back(offsetof(VkPhysicalDeviceImagelessFramebufferFeatures, imagelessFramebuffer));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceImagelessFramebufferFeatures, imagelessFramebuffer));

alignmentData.push_back(offsetof(VkFramebufferAttachmentsCreateInfo, sType));
alignmentData.push_back(FIELD_SIZEOF(VkFramebufferAttachmentsCreateInfo, sType));
alignmentData.push_back(offsetof(VkFramebufferAttachmentsCreateInfo, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkFramebufferAttachmentsCreateInfo, pNext));
alignmentData.push_back(offsetof(VkFramebufferAttachmentsCreateInfo, attachmentImageInfoCount));
alignmentData.push_back(FIELD_SIZEOF(VkFramebufferAttachmentsCreateInfo, attachmentImageInfoCount));
alignmentData.push_back(offsetof(VkFramebufferAttachmentsCreateInfo, pAttachmentImageInfos));
alignmentData.push_back(FIELD_SIZEOF(VkFramebufferAttachmentsCreateInfo, pAttachmentImageInfos));

alignmentData.push_back(offsetof(VkFramebufferAttachmentImageInfo, sType));
alignmentData.push_back(FIELD_SIZEOF(VkFramebufferAttachmentImageInfo, sType));
alignmentData.push_back(offsetof(VkFramebufferAttachmentImageInfo, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkFramebufferAttachmentImageInfo, pNext));
alignmentData.push_back(offsetof(VkFramebufferAttachmentImageInfo, flags));
alignmentData.push_back(FIELD_SIZEOF(VkFramebufferAttachmentImageInfo, flags));
alignmentData.push_back(offsetof(VkFramebufferAttachmentImageInfo, usage));
alignmentData.push_back(FIELD_SIZEOF(VkFramebufferAttachmentImageInfo, usage));
alignmentData.push_back(offsetof(VkFramebufferAttachmentImageInfo, width));
alignmentData.push_back(FIELD_SIZEOF(VkFramebufferAttachmentImageInfo, width));
alignmentData.push_back(offsetof(VkFramebufferAttachmentImageInfo, height));
alignmentData.push_back(FIELD_SIZEOF(VkFramebufferAttachmentImageInfo, height));
alignmentData.push_back(offsetof(VkFramebufferAttachmentImageInfo, layerCount));
alignmentData.push_back(FIELD_SIZEOF(VkFramebufferAttachmentImageInfo, layerCount));
alignmentData.push_back(offsetof(VkFramebufferAttachmentImageInfo, viewFormatCount));
alignmentData.push_back(FIELD_SIZEOF(VkFramebufferAttachmentImageInfo, viewFormatCount));
alignmentData.push_back(offsetof(VkFramebufferAttachmentImageInfo, pViewFormats));
alignmentData.push_back(FIELD_SIZEOF(VkFramebufferAttachmentImageInfo, pViewFormats));

alignmentData.push_back(offsetof(VkRenderPassAttachmentBeginInfo, sType));
alignmentData.push_back(FIELD_SIZEOF(VkRenderPassAttachmentBeginInfo, sType));
alignmentData.push_back(offsetof(VkRenderPassAttachmentBeginInfo, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkRenderPassAttachmentBeginInfo, pNext));
alignmentData.push_back(offsetof(VkRenderPassAttachmentBeginInfo, attachmentCount));
alignmentData.push_back(FIELD_SIZEOF(VkRenderPassAttachmentBeginInfo, attachmentCount));
alignmentData.push_back(offsetof(VkRenderPassAttachmentBeginInfo, pAttachments));
alignmentData.push_back(FIELD_SIZEOF(VkRenderPassAttachmentBeginInfo, pAttachments));

alignmentData.push_back(offsetof(VkPhysicalDeviceTextureCompressionASTCHDRFeatures, sType));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceTextureCompressionASTCHDRFeatures, sType));
alignmentData.push_back(offsetof(VkPhysicalDeviceTextureCompressionASTCHDRFeatures, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceTextureCompressionASTCHDRFeatures, pNext));
alignmentData.push_back(offsetof(VkPhysicalDeviceTextureCompressionASTCHDRFeatures, textureCompressionASTC_HDR));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceTextureCompressionASTCHDRFeatures, textureCompressionASTC_HDR));

alignmentData.push_back(offsetof(VkPhysicalDeviceYcbcrImageArraysFeaturesEXT, sType));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceYcbcrImageArraysFeaturesEXT, sType));
alignmentData.push_back(offsetof(VkPhysicalDeviceYcbcrImageArraysFeaturesEXT, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceYcbcrImageArraysFeaturesEXT, pNext));
alignmentData.push_back(offsetof(VkPhysicalDeviceYcbcrImageArraysFeaturesEXT, ycbcrImageArrays));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceYcbcrImageArraysFeaturesEXT, ycbcrImageArrays));
alignmentData.push_back(offsetof(VkPipelineCreationFeedback, flags));
alignmentData.push_back(FIELD_SIZEOF(VkPipelineCreationFeedback, flags));
alignmentData.push_back(offsetof(VkPipelineCreationFeedback, duration));
alignmentData.push_back(FIELD_SIZEOF(VkPipelineCreationFeedback, duration));

alignmentData.push_back(offsetof(VkPipelineCreationFeedbackCreateInfo, sType));
alignmentData.push_back(FIELD_SIZEOF(VkPipelineCreationFeedbackCreateInfo, sType));
alignmentData.push_back(offsetof(VkPipelineCreationFeedbackCreateInfo, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkPipelineCreationFeedbackCreateInfo, pNext));
alignmentData.push_back(offsetof(VkPipelineCreationFeedbackCreateInfo, pPipelineCreationFeedback));
alignmentData.push_back(FIELD_SIZEOF(VkPipelineCreationFeedbackCreateInfo, pPipelineCreationFeedback));
alignmentData.push_back(offsetof(VkPipelineCreationFeedbackCreateInfo, pipelineStageCreationFeedbackCount));
alignmentData.push_back(FIELD_SIZEOF(VkPipelineCreationFeedbackCreateInfo, pipelineStageCreationFeedbackCount));
alignmentData.push_back(offsetof(VkPipelineCreationFeedbackCreateInfo, pPipelineStageCreationFeedbacks));
alignmentData.push_back(FIELD_SIZEOF(VkPipelineCreationFeedbackCreateInfo, pPipelineStageCreationFeedbacks));

alignmentData.push_back(offsetof(VkHeadlessSurfaceCreateInfoEXT, sType));
alignmentData.push_back(FIELD_SIZEOF(VkHeadlessSurfaceCreateInfoEXT, sType));
alignmentData.push_back(offsetof(VkHeadlessSurfaceCreateInfoEXT, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkHeadlessSurfaceCreateInfoEXT, pNext));
alignmentData.push_back(offsetof(VkHeadlessSurfaceCreateInfoEXT, flags));
alignmentData.push_back(FIELD_SIZEOF(VkHeadlessSurfaceCreateInfoEXT, flags));
alignmentData.push_back(offsetof(VkPhysicalDeviceShaderClockFeaturesKHR, sType));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceShaderClockFeaturesKHR, sType));
alignmentData.push_back(offsetof(VkPhysicalDeviceShaderClockFeaturesKHR, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceShaderClockFeaturesKHR, pNext));
alignmentData.push_back(offsetof(VkPhysicalDeviceShaderClockFeaturesKHR, shaderSubgroupClock));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceShaderClockFeaturesKHR, shaderSubgroupClock));
alignmentData.push_back(offsetof(VkPhysicalDeviceShaderClockFeaturesKHR, shaderDeviceClock));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceShaderClockFeaturesKHR, shaderDeviceClock));
alignmentData.push_back(offsetof(VkPhysicalDeviceIndexTypeUint8FeaturesEXT, sType));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceIndexTypeUint8FeaturesEXT, sType));
alignmentData.push_back(offsetof(VkPhysicalDeviceIndexTypeUint8FeaturesEXT, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceIndexTypeUint8FeaturesEXT, pNext));
alignmentData.push_back(offsetof(VkPhysicalDeviceIndexTypeUint8FeaturesEXT, indexTypeUint8));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceIndexTypeUint8FeaturesEXT, indexTypeUint8));
alignmentData.push_back(offsetof(VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT, sType));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT, sType));
alignmentData.push_back(offsetof(VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT, pNext));
alignmentData.push_back(offsetof(VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT, fragmentShaderSampleInterlock));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT, fragmentShaderSampleInterlock));
alignmentData.push_back(offsetof(VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT, fragmentShaderPixelInterlock));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT, fragmentShaderPixelInterlock));
alignmentData.push_back(offsetof(VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT, fragmentShaderShadingRateInterlock));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT, fragmentShaderShadingRateInterlock));
alignmentData.push_back(offsetof(VkPhysicalDeviceSeparateDepthStencilLayoutsFeatures, sType));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceSeparateDepthStencilLayoutsFeatures, sType));
alignmentData.push_back(offsetof(VkPhysicalDeviceSeparateDepthStencilLayoutsFeatures, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceSeparateDepthStencilLayoutsFeatures, pNext));
alignmentData.push_back(offsetof(VkPhysicalDeviceSeparateDepthStencilLayoutsFeatures, separateDepthStencilLayouts));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceSeparateDepthStencilLayoutsFeatures, separateDepthStencilLayouts));

alignmentData.push_back(offsetof(VkAttachmentReferenceStencilLayout, sType));
alignmentData.push_back(FIELD_SIZEOF(VkAttachmentReferenceStencilLayout, sType));
alignmentData.push_back(offsetof(VkAttachmentReferenceStencilLayout, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkAttachmentReferenceStencilLayout, pNext));
alignmentData.push_back(offsetof(VkAttachmentReferenceStencilLayout, stencilLayout));
alignmentData.push_back(FIELD_SIZEOF(VkAttachmentReferenceStencilLayout, stencilLayout));
alignmentData.push_back(offsetof(VkPhysicalDevicePrimitiveTopologyListRestartFeaturesEXT, sType));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDevicePrimitiveTopologyListRestartFeaturesEXT, sType));
alignmentData.push_back(offsetof(VkPhysicalDevicePrimitiveTopologyListRestartFeaturesEXT, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDevicePrimitiveTopologyListRestartFeaturesEXT, pNext));
alignmentData.push_back(offsetof(VkPhysicalDevicePrimitiveTopologyListRestartFeaturesEXT, primitiveTopologyListRestart));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDevicePrimitiveTopologyListRestartFeaturesEXT, primitiveTopologyListRestart));
alignmentData.push_back(offsetof(VkPhysicalDevicePrimitiveTopologyListRestartFeaturesEXT, primitiveTopologyPatchListRestart));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDevicePrimitiveTopologyListRestartFeaturesEXT, primitiveTopologyPatchListRestart));

alignmentData.push_back(offsetof(VkAttachmentDescriptionStencilLayout, sType));
alignmentData.push_back(FIELD_SIZEOF(VkAttachmentDescriptionStencilLayout, sType));
alignmentData.push_back(offsetof(VkAttachmentDescriptionStencilLayout, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkAttachmentDescriptionStencilLayout, pNext));
alignmentData.push_back(offsetof(VkAttachmentDescriptionStencilLayout, stencilInitialLayout));
alignmentData.push_back(FIELD_SIZEOF(VkAttachmentDescriptionStencilLayout, stencilInitialLayout));
alignmentData.push_back(offsetof(VkAttachmentDescriptionStencilLayout, stencilFinalLayout));
alignmentData.push_back(FIELD_SIZEOF(VkAttachmentDescriptionStencilLayout, stencilFinalLayout));


alignmentData.push_back(offsetof(VkPhysicalDeviceShaderDemoteToHelperInvocationFeatures, sType));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceShaderDemoteToHelperInvocationFeatures, sType));
alignmentData.push_back(offsetof(VkPhysicalDeviceShaderDemoteToHelperInvocationFeatures, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceShaderDemoteToHelperInvocationFeatures, pNext));
alignmentData.push_back(offsetof(VkPhysicalDeviceShaderDemoteToHelperInvocationFeatures, shaderDemoteToHelperInvocation));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceShaderDemoteToHelperInvocationFeatures, shaderDemoteToHelperInvocation));

alignmentData.push_back(offsetof(VkPhysicalDeviceTexelBufferAlignmentFeaturesEXT, sType));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceTexelBufferAlignmentFeaturesEXT, sType));
alignmentData.push_back(offsetof(VkPhysicalDeviceTexelBufferAlignmentFeaturesEXT, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceTexelBufferAlignmentFeaturesEXT, pNext));
alignmentData.push_back(offsetof(VkPhysicalDeviceTexelBufferAlignmentFeaturesEXT, texelBufferAlignment));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceTexelBufferAlignmentFeaturesEXT, texelBufferAlignment));
alignmentData.push_back(offsetof(VkPhysicalDeviceTexelBufferAlignmentProperties, sType));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceTexelBufferAlignmentProperties, sType));
alignmentData.push_back(offsetof(VkPhysicalDeviceTexelBufferAlignmentProperties, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceTexelBufferAlignmentProperties, pNext));
alignmentData.push_back(offsetof(VkPhysicalDeviceTexelBufferAlignmentProperties, storageTexelBufferOffsetAlignmentBytes));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceTexelBufferAlignmentProperties, storageTexelBufferOffsetAlignmentBytes));
alignmentData.push_back(offsetof(VkPhysicalDeviceTexelBufferAlignmentProperties, storageTexelBufferOffsetSingleTexelAlignment));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceTexelBufferAlignmentProperties, storageTexelBufferOffsetSingleTexelAlignment));
alignmentData.push_back(offsetof(VkPhysicalDeviceTexelBufferAlignmentProperties, uniformTexelBufferOffsetAlignmentBytes));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceTexelBufferAlignmentProperties, uniformTexelBufferOffsetAlignmentBytes));
alignmentData.push_back(offsetof(VkPhysicalDeviceTexelBufferAlignmentProperties, uniformTexelBufferOffsetSingleTexelAlignment));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceTexelBufferAlignmentProperties, uniformTexelBufferOffsetSingleTexelAlignment));

alignmentData.push_back(offsetof(VkPhysicalDeviceSubgroupSizeControlFeatures, sType));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceSubgroupSizeControlFeatures, sType));
alignmentData.push_back(offsetof(VkPhysicalDeviceSubgroupSizeControlFeatures, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceSubgroupSizeControlFeatures, pNext));
alignmentData.push_back(offsetof(VkPhysicalDeviceSubgroupSizeControlFeatures, subgroupSizeControl));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceSubgroupSizeControlFeatures, subgroupSizeControl));
alignmentData.push_back(offsetof(VkPhysicalDeviceSubgroupSizeControlFeatures, computeFullSubgroups));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceSubgroupSizeControlFeatures, computeFullSubgroups));

alignmentData.push_back(offsetof(VkPhysicalDeviceSubgroupSizeControlProperties, sType));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceSubgroupSizeControlProperties, sType));
alignmentData.push_back(offsetof(VkPhysicalDeviceSubgroupSizeControlProperties, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceSubgroupSizeControlProperties, pNext));
alignmentData.push_back(offsetof(VkPhysicalDeviceSubgroupSizeControlProperties, minSubgroupSize));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceSubgroupSizeControlProperties, minSubgroupSize));
alignmentData.push_back(offsetof(VkPhysicalDeviceSubgroupSizeControlProperties, maxSubgroupSize));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceSubgroupSizeControlProperties, maxSubgroupSize));
alignmentData.push_back(offsetof(VkPhysicalDeviceSubgroupSizeControlProperties, maxComputeWorkgroupSubgroups));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceSubgroupSizeControlProperties, maxComputeWorkgroupSubgroups));
alignmentData.push_back(offsetof(VkPhysicalDeviceSubgroupSizeControlProperties, requiredSubgroupSizeStages));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceSubgroupSizeControlProperties, requiredSubgroupSizeStages));


alignmentData.push_back(offsetof(VkMemoryOpaqueCaptureAddressAllocateInfo, sType));
alignmentData.push_back(FIELD_SIZEOF(VkMemoryOpaqueCaptureAddressAllocateInfo, sType));
alignmentData.push_back(offsetof(VkMemoryOpaqueCaptureAddressAllocateInfo, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkMemoryOpaqueCaptureAddressAllocateInfo, pNext));
alignmentData.push_back(offsetof(VkMemoryOpaqueCaptureAddressAllocateInfo, opaqueCaptureAddress));
alignmentData.push_back(FIELD_SIZEOF(VkMemoryOpaqueCaptureAddressAllocateInfo, opaqueCaptureAddress));

alignmentData.push_back(offsetof(VkDeviceMemoryOpaqueCaptureAddressInfo, sType));
alignmentData.push_back(FIELD_SIZEOF(VkDeviceMemoryOpaqueCaptureAddressInfo, sType));
alignmentData.push_back(offsetof(VkDeviceMemoryOpaqueCaptureAddressInfo, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkDeviceMemoryOpaqueCaptureAddressInfo, pNext));
alignmentData.push_back(offsetof(VkDeviceMemoryOpaqueCaptureAddressInfo, memory));
alignmentData.push_back(FIELD_SIZEOF(VkDeviceMemoryOpaqueCaptureAddressInfo, memory));

alignmentData.push_back(offsetof(VkPhysicalDeviceLineRasterizationFeaturesEXT, sType));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceLineRasterizationFeaturesEXT, sType));
alignmentData.push_back(offsetof(VkPhysicalDeviceLineRasterizationFeaturesEXT, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceLineRasterizationFeaturesEXT, pNext));
alignmentData.push_back(offsetof(VkPhysicalDeviceLineRasterizationFeaturesEXT, rectangularLines));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceLineRasterizationFeaturesEXT, rectangularLines));
alignmentData.push_back(offsetof(VkPhysicalDeviceLineRasterizationFeaturesEXT, bresenhamLines));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceLineRasterizationFeaturesEXT, bresenhamLines));
alignmentData.push_back(offsetof(VkPhysicalDeviceLineRasterizationFeaturesEXT, smoothLines));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceLineRasterizationFeaturesEXT, smoothLines));
alignmentData.push_back(offsetof(VkPhysicalDeviceLineRasterizationFeaturesEXT, stippledRectangularLines));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceLineRasterizationFeaturesEXT, stippledRectangularLines));
alignmentData.push_back(offsetof(VkPhysicalDeviceLineRasterizationFeaturesEXT, stippledBresenhamLines));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceLineRasterizationFeaturesEXT, stippledBresenhamLines));
alignmentData.push_back(offsetof(VkPhysicalDeviceLineRasterizationFeaturesEXT, stippledSmoothLines));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceLineRasterizationFeaturesEXT, stippledSmoothLines));
alignmentData.push_back(offsetof(VkPhysicalDeviceLineRasterizationPropertiesEXT, sType));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceLineRasterizationPropertiesEXT, sType));
alignmentData.push_back(offsetof(VkPhysicalDeviceLineRasterizationPropertiesEXT, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceLineRasterizationPropertiesEXT, pNext));
alignmentData.push_back(offsetof(VkPhysicalDeviceLineRasterizationPropertiesEXT, lineSubPixelPrecisionBits));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceLineRasterizationPropertiesEXT, lineSubPixelPrecisionBits));
alignmentData.push_back(offsetof(VkPipelineRasterizationLineStateCreateInfoEXT, sType));
alignmentData.push_back(FIELD_SIZEOF(VkPipelineRasterizationLineStateCreateInfoEXT, sType));
alignmentData.push_back(offsetof(VkPipelineRasterizationLineStateCreateInfoEXT, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkPipelineRasterizationLineStateCreateInfoEXT, pNext));
alignmentData.push_back(offsetof(VkPipelineRasterizationLineStateCreateInfoEXT, lineRasterizationMode));
alignmentData.push_back(FIELD_SIZEOF(VkPipelineRasterizationLineStateCreateInfoEXT, lineRasterizationMode));
alignmentData.push_back(offsetof(VkPipelineRasterizationLineStateCreateInfoEXT, stippledLineEnable));
alignmentData.push_back(FIELD_SIZEOF(VkPipelineRasterizationLineStateCreateInfoEXT, stippledLineEnable));
alignmentData.push_back(offsetof(VkPipelineRasterizationLineStateCreateInfoEXT, lineStippleFactor));
alignmentData.push_back(FIELD_SIZEOF(VkPipelineRasterizationLineStateCreateInfoEXT, lineStippleFactor));
alignmentData.push_back(offsetof(VkPipelineRasterizationLineStateCreateInfoEXT, lineStipplePattern));
alignmentData.push_back(FIELD_SIZEOF(VkPipelineRasterizationLineStateCreateInfoEXT, lineStipplePattern));
alignmentData.push_back(offsetof(VkPhysicalDevicePipelineCreationCacheControlFeatures, sType));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDevicePipelineCreationCacheControlFeatures, sType));
alignmentData.push_back(offsetof(VkPhysicalDevicePipelineCreationCacheControlFeatures, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDevicePipelineCreationCacheControlFeatures, pNext));
alignmentData.push_back(offsetof(VkPhysicalDevicePipelineCreationCacheControlFeatures, pipelineCreationCacheControl));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDevicePipelineCreationCacheControlFeatures, pipelineCreationCacheControl));

alignmentData.push_back(offsetof(VkPhysicalDeviceVulkan11Features, sType));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceVulkan11Features, sType));
alignmentData.push_back(offsetof(VkPhysicalDeviceVulkan11Features, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceVulkan11Features, pNext));
alignmentData.push_back(offsetof(VkPhysicalDeviceVulkan11Features, storageBuffer16BitAccess));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceVulkan11Features, storageBuffer16BitAccess));
alignmentData.push_back(offsetof(VkPhysicalDeviceVulkan11Features, uniformAndStorageBuffer16BitAccess));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceVulkan11Features, uniformAndStorageBuffer16BitAccess));
alignmentData.push_back(offsetof(VkPhysicalDeviceVulkan11Features, storagePushConstant16));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceVulkan11Features, storagePushConstant16));
alignmentData.push_back(offsetof(VkPhysicalDeviceVulkan11Features, storageInputOutput16));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceVulkan11Features, storageInputOutput16));
alignmentData.push_back(offsetof(VkPhysicalDeviceVulkan11Features, multiview));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceVulkan11Features, multiview));
alignmentData.push_back(offsetof(VkPhysicalDeviceVulkan11Features, multiviewGeometryShader));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceVulkan11Features, multiviewGeometryShader));
alignmentData.push_back(offsetof(VkPhysicalDeviceVulkan11Features, multiviewTessellationShader));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceVulkan11Features, multiviewTessellationShader));
alignmentData.push_back(offsetof(VkPhysicalDeviceVulkan11Features, variablePointersStorageBuffer));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceVulkan11Features, variablePointersStorageBuffer));
alignmentData.push_back(offsetof(VkPhysicalDeviceVulkan11Features, variablePointers));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceVulkan11Features, variablePointers));
alignmentData.push_back(offsetof(VkPhysicalDeviceVulkan11Features, protectedMemory));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceVulkan11Features, protectedMemory));
alignmentData.push_back(offsetof(VkPhysicalDeviceVulkan11Features, samplerYcbcrConversion));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceVulkan11Features, samplerYcbcrConversion));
alignmentData.push_back(offsetof(VkPhysicalDeviceVulkan11Features, shaderDrawParameters));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceVulkan11Features, shaderDrawParameters));
alignmentData.push_back(offsetof(VkPhysicalDeviceVulkan11Properties, sType));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceVulkan11Properties, sType));
alignmentData.push_back(offsetof(VkPhysicalDeviceVulkan11Properties, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceVulkan11Properties, pNext));
alignmentData.push_back(offsetof(VkPhysicalDeviceVulkan11Properties, deviceUUID));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceVulkan11Properties, deviceUUID));
alignmentData.push_back(offsetof(VkPhysicalDeviceVulkan11Properties, driverUUID));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceVulkan11Properties, driverUUID));
alignmentData.push_back(offsetof(VkPhysicalDeviceVulkan11Properties, deviceLUID));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceVulkan11Properties, deviceLUID));
alignmentData.push_back(offsetof(VkPhysicalDeviceVulkan11Properties, deviceNodeMask));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceVulkan11Properties, deviceNodeMask));
alignmentData.push_back(offsetof(VkPhysicalDeviceVulkan11Properties, deviceLUIDValid));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceVulkan11Properties, deviceLUIDValid));
alignmentData.push_back(offsetof(VkPhysicalDeviceVulkan11Properties, subgroupSize));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceVulkan11Properties, subgroupSize));
alignmentData.push_back(offsetof(VkPhysicalDeviceVulkan11Properties, subgroupSupportedStages));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceVulkan11Properties, subgroupSupportedStages));
alignmentData.push_back(offsetof(VkPhysicalDeviceVulkan11Properties, subgroupSupportedOperations));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceVulkan11Properties, subgroupSupportedOperations));
alignmentData.push_back(offsetof(VkPhysicalDeviceVulkan11Properties, subgroupQuadOperationsInAllStages));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceVulkan11Properties, subgroupQuadOperationsInAllStages));
alignmentData.push_back(offsetof(VkPhysicalDeviceVulkan11Properties, pointClippingBehavior));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceVulkan11Properties, pointClippingBehavior));
alignmentData.push_back(offsetof(VkPhysicalDeviceVulkan11Properties, maxMultiviewViewCount));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceVulkan11Properties, maxMultiviewViewCount));
alignmentData.push_back(offsetof(VkPhysicalDeviceVulkan11Properties, maxMultiviewInstanceIndex));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceVulkan11Properties, maxMultiviewInstanceIndex));
alignmentData.push_back(offsetof(VkPhysicalDeviceVulkan11Properties, protectedNoFault));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceVulkan11Properties, protectedNoFault));
alignmentData.push_back(offsetof(VkPhysicalDeviceVulkan11Properties, maxPerSetDescriptors));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceVulkan11Properties, maxPerSetDescriptors));
alignmentData.push_back(offsetof(VkPhysicalDeviceVulkan11Properties, maxMemoryAllocationSize));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceVulkan11Properties, maxMemoryAllocationSize));
alignmentData.push_back(offsetof(VkPhysicalDeviceVulkan12Features, sType));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceVulkan12Features, sType));
alignmentData.push_back(offsetof(VkPhysicalDeviceVulkan12Features, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceVulkan12Features, pNext));
alignmentData.push_back(offsetof(VkPhysicalDeviceVulkan12Features, samplerMirrorClampToEdge));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceVulkan12Features, samplerMirrorClampToEdge));
alignmentData.push_back(offsetof(VkPhysicalDeviceVulkan12Features, drawIndirectCount));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceVulkan12Features, drawIndirectCount));
alignmentData.push_back(offsetof(VkPhysicalDeviceVulkan12Features, storageBuffer8BitAccess));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceVulkan12Features, storageBuffer8BitAccess));
alignmentData.push_back(offsetof(VkPhysicalDeviceVulkan12Features, uniformAndStorageBuffer8BitAccess));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceVulkan12Features, uniformAndStorageBuffer8BitAccess));
alignmentData.push_back(offsetof(VkPhysicalDeviceVulkan12Features, storagePushConstant8));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceVulkan12Features, storagePushConstant8));
alignmentData.push_back(offsetof(VkPhysicalDeviceVulkan12Features, shaderBufferInt64Atomics));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceVulkan12Features, shaderBufferInt64Atomics));
alignmentData.push_back(offsetof(VkPhysicalDeviceVulkan12Features, shaderSharedInt64Atomics));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceVulkan12Features, shaderSharedInt64Atomics));
alignmentData.push_back(offsetof(VkPhysicalDeviceVulkan12Features, shaderFloat16));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceVulkan12Features, shaderFloat16));
alignmentData.push_back(offsetof(VkPhysicalDeviceVulkan12Features, shaderInt8));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceVulkan12Features, shaderInt8));
alignmentData.push_back(offsetof(VkPhysicalDeviceVulkan12Features, descriptorIndexing));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceVulkan12Features, descriptorIndexing));
alignmentData.push_back(offsetof(VkPhysicalDeviceVulkan12Features, shaderInputAttachmentArrayDynamicIndexing));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceVulkan12Features, shaderInputAttachmentArrayDynamicIndexing));
alignmentData.push_back(offsetof(VkPhysicalDeviceVulkan12Features, shaderUniformTexelBufferArrayDynamicIndexing));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceVulkan12Features, shaderUniformTexelBufferArrayDynamicIndexing));
alignmentData.push_back(offsetof(VkPhysicalDeviceVulkan12Features, shaderStorageTexelBufferArrayDynamicIndexing));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceVulkan12Features, shaderStorageTexelBufferArrayDynamicIndexing));
alignmentData.push_back(offsetof(VkPhysicalDeviceVulkan12Features, shaderUniformBufferArrayNonUniformIndexing));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceVulkan12Features, shaderUniformBufferArrayNonUniformIndexing));
alignmentData.push_back(offsetof(VkPhysicalDeviceVulkan12Features, shaderSampledImageArrayNonUniformIndexing));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceVulkan12Features, shaderSampledImageArrayNonUniformIndexing));
alignmentData.push_back(offsetof(VkPhysicalDeviceVulkan12Features, shaderStorageBufferArrayNonUniformIndexing));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceVulkan12Features, shaderStorageBufferArrayNonUniformIndexing));
alignmentData.push_back(offsetof(VkPhysicalDeviceVulkan12Features, shaderStorageImageArrayNonUniformIndexing));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceVulkan12Features, shaderStorageImageArrayNonUniformIndexing));
alignmentData.push_back(offsetof(VkPhysicalDeviceVulkan12Features, shaderInputAttachmentArrayNonUniformIndexing));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceVulkan12Features, shaderInputAttachmentArrayNonUniformIndexing));
alignmentData.push_back(offsetof(VkPhysicalDeviceVulkan12Features, shaderUniformTexelBufferArrayNonUniformIndexing));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceVulkan12Features, shaderUniformTexelBufferArrayNonUniformIndexing));
alignmentData.push_back(offsetof(VkPhysicalDeviceVulkan12Features, shaderStorageTexelBufferArrayNonUniformIndexing));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceVulkan12Features, shaderStorageTexelBufferArrayNonUniformIndexing));
alignmentData.push_back(offsetof(VkPhysicalDeviceVulkan12Features, descriptorBindingUniformBufferUpdateAfterBind));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceVulkan12Features, descriptorBindingUniformBufferUpdateAfterBind));
alignmentData.push_back(offsetof(VkPhysicalDeviceVulkan12Features, descriptorBindingSampledImageUpdateAfterBind));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceVulkan12Features, descriptorBindingSampledImageUpdateAfterBind));
alignmentData.push_back(offsetof(VkPhysicalDeviceVulkan12Features, descriptorBindingStorageImageUpdateAfterBind));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceVulkan12Features, descriptorBindingStorageImageUpdateAfterBind));
alignmentData.push_back(offsetof(VkPhysicalDeviceVulkan12Features, descriptorBindingStorageBufferUpdateAfterBind));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceVulkan12Features, descriptorBindingStorageBufferUpdateAfterBind));
alignmentData.push_back(offsetof(VkPhysicalDeviceVulkan12Features, descriptorBindingUniformTexelBufferUpdateAfterBind));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceVulkan12Features, descriptorBindingUniformTexelBufferUpdateAfterBind));
alignmentData.push_back(offsetof(VkPhysicalDeviceVulkan12Features, descriptorBindingStorageTexelBufferUpdateAfterBind));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceVulkan12Features, descriptorBindingStorageTexelBufferUpdateAfterBind));
alignmentData.push_back(offsetof(VkPhysicalDeviceVulkan12Features, descriptorBindingUpdateUnusedWhilePending));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceVulkan12Features, descriptorBindingUpdateUnusedWhilePending));
alignmentData.push_back(offsetof(VkPhysicalDeviceVulkan12Features, descriptorBindingPartiallyBound));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceVulkan12Features, descriptorBindingPartiallyBound));
alignmentData.push_back(offsetof(VkPhysicalDeviceVulkan12Features, descriptorBindingVariableDescriptorCount));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceVulkan12Features, descriptorBindingVariableDescriptorCount));
alignmentData.push_back(offsetof(VkPhysicalDeviceVulkan12Features, runtimeDescriptorArray));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceVulkan12Features, runtimeDescriptorArray));
alignmentData.push_back(offsetof(VkPhysicalDeviceVulkan12Features, samplerFilterMinmax));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceVulkan12Features, samplerFilterMinmax));
alignmentData.push_back(offsetof(VkPhysicalDeviceVulkan12Features, scalarBlockLayout));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceVulkan12Features, scalarBlockLayout));
alignmentData.push_back(offsetof(VkPhysicalDeviceVulkan12Features, imagelessFramebuffer));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceVulkan12Features, imagelessFramebuffer));
alignmentData.push_back(offsetof(VkPhysicalDeviceVulkan12Features, uniformBufferStandardLayout));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceVulkan12Features, uniformBufferStandardLayout));
alignmentData.push_back(offsetof(VkPhysicalDeviceVulkan12Features, shaderSubgroupExtendedTypes));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceVulkan12Features, shaderSubgroupExtendedTypes));
alignmentData.push_back(offsetof(VkPhysicalDeviceVulkan12Features, separateDepthStencilLayouts));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceVulkan12Features, separateDepthStencilLayouts));
alignmentData.push_back(offsetof(VkPhysicalDeviceVulkan12Features, hostQueryReset));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceVulkan12Features, hostQueryReset));
alignmentData.push_back(offsetof(VkPhysicalDeviceVulkan12Features, timelineSemaphore));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceVulkan12Features, timelineSemaphore));
alignmentData.push_back(offsetof(VkPhysicalDeviceVulkan12Features, bufferDeviceAddress));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceVulkan12Features, bufferDeviceAddress));
alignmentData.push_back(offsetof(VkPhysicalDeviceVulkan12Features, bufferDeviceAddressCaptureReplay));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceVulkan12Features, bufferDeviceAddressCaptureReplay));
alignmentData.push_back(offsetof(VkPhysicalDeviceVulkan12Features, bufferDeviceAddressMultiDevice));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceVulkan12Features, bufferDeviceAddressMultiDevice));
alignmentData.push_back(offsetof(VkPhysicalDeviceVulkan12Features, vulkanMemoryModel));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceVulkan12Features, vulkanMemoryModel));
alignmentData.push_back(offsetof(VkPhysicalDeviceVulkan12Features, vulkanMemoryModelDeviceScope));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceVulkan12Features, vulkanMemoryModelDeviceScope));
alignmentData.push_back(offsetof(VkPhysicalDeviceVulkan12Features, vulkanMemoryModelAvailabilityVisibilityChains));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceVulkan12Features, vulkanMemoryModelAvailabilityVisibilityChains));
alignmentData.push_back(offsetof(VkPhysicalDeviceVulkan12Features, shaderOutputViewportIndex));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceVulkan12Features, shaderOutputViewportIndex));
alignmentData.push_back(offsetof(VkPhysicalDeviceVulkan12Features, shaderOutputLayer));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceVulkan12Features, shaderOutputLayer));
alignmentData.push_back(offsetof(VkPhysicalDeviceVulkan12Features, subgroupBroadcastDynamicId));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceVulkan12Features, subgroupBroadcastDynamicId));
alignmentData.push_back(offsetof(VkPhysicalDeviceVulkan12Properties, sType));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceVulkan12Properties, sType));
alignmentData.push_back(offsetof(VkPhysicalDeviceVulkan12Properties, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceVulkan12Properties, pNext));
alignmentData.push_back(offsetof(VkPhysicalDeviceVulkan12Properties, driverID));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceVulkan12Properties, driverID));
alignmentData.push_back(offsetof(VkPhysicalDeviceVulkan12Properties, driverName));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceVulkan12Properties, driverName));
alignmentData.push_back(offsetof(VkPhysicalDeviceVulkan12Properties, driverInfo));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceVulkan12Properties, driverInfo));
alignmentData.push_back(offsetof(VkPhysicalDeviceVulkan12Properties, conformanceVersion));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceVulkan12Properties, conformanceVersion));
alignmentData.push_back(offsetof(VkPhysicalDeviceVulkan12Properties, denormBehaviorIndependence));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceVulkan12Properties, denormBehaviorIndependence));
alignmentData.push_back(offsetof(VkPhysicalDeviceVulkan12Properties, roundingModeIndependence));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceVulkan12Properties, roundingModeIndependence));
alignmentData.push_back(offsetof(VkPhysicalDeviceVulkan12Properties, shaderSignedZeroInfNanPreserveFloat16));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceVulkan12Properties, shaderSignedZeroInfNanPreserveFloat16));
alignmentData.push_back(offsetof(VkPhysicalDeviceVulkan12Properties, shaderSignedZeroInfNanPreserveFloat32));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceVulkan12Properties, shaderSignedZeroInfNanPreserveFloat32));
alignmentData.push_back(offsetof(VkPhysicalDeviceVulkan12Properties, shaderSignedZeroInfNanPreserveFloat64));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceVulkan12Properties, shaderSignedZeroInfNanPreserveFloat64));
alignmentData.push_back(offsetof(VkPhysicalDeviceVulkan12Properties, shaderDenormPreserveFloat16));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceVulkan12Properties, shaderDenormPreserveFloat16));
alignmentData.push_back(offsetof(VkPhysicalDeviceVulkan12Properties, shaderDenormPreserveFloat32));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceVulkan12Properties, shaderDenormPreserveFloat32));
alignmentData.push_back(offsetof(VkPhysicalDeviceVulkan12Properties, shaderDenormPreserveFloat64));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceVulkan12Properties, shaderDenormPreserveFloat64));
alignmentData.push_back(offsetof(VkPhysicalDeviceVulkan12Properties, shaderDenormFlushToZeroFloat16));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceVulkan12Properties, shaderDenormFlushToZeroFloat16));
alignmentData.push_back(offsetof(VkPhysicalDeviceVulkan12Properties, shaderDenormFlushToZeroFloat32));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceVulkan12Properties, shaderDenormFlushToZeroFloat32));
alignmentData.push_back(offsetof(VkPhysicalDeviceVulkan12Properties, shaderDenormFlushToZeroFloat64));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceVulkan12Properties, shaderDenormFlushToZeroFloat64));
alignmentData.push_back(offsetof(VkPhysicalDeviceVulkan12Properties, shaderRoundingModeRTEFloat16));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceVulkan12Properties, shaderRoundingModeRTEFloat16));
alignmentData.push_back(offsetof(VkPhysicalDeviceVulkan12Properties, shaderRoundingModeRTEFloat32));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceVulkan12Properties, shaderRoundingModeRTEFloat32));
alignmentData.push_back(offsetof(VkPhysicalDeviceVulkan12Properties, shaderRoundingModeRTEFloat64));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceVulkan12Properties, shaderRoundingModeRTEFloat64));
alignmentData.push_back(offsetof(VkPhysicalDeviceVulkan12Properties, shaderRoundingModeRTZFloat16));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceVulkan12Properties, shaderRoundingModeRTZFloat16));
alignmentData.push_back(offsetof(VkPhysicalDeviceVulkan12Properties, shaderRoundingModeRTZFloat32));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceVulkan12Properties, shaderRoundingModeRTZFloat32));
alignmentData.push_back(offsetof(VkPhysicalDeviceVulkan12Properties, shaderRoundingModeRTZFloat64));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceVulkan12Properties, shaderRoundingModeRTZFloat64));
alignmentData.push_back(offsetof(VkPhysicalDeviceVulkan12Properties, maxUpdateAfterBindDescriptorsInAllPools));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceVulkan12Properties, maxUpdateAfterBindDescriptorsInAllPools));
alignmentData.push_back(offsetof(VkPhysicalDeviceVulkan12Properties, shaderUniformBufferArrayNonUniformIndexingNative));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceVulkan12Properties, shaderUniformBufferArrayNonUniformIndexingNative));
alignmentData.push_back(offsetof(VkPhysicalDeviceVulkan12Properties, shaderSampledImageArrayNonUniformIndexingNative));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceVulkan12Properties, shaderSampledImageArrayNonUniformIndexingNative));
alignmentData.push_back(offsetof(VkPhysicalDeviceVulkan12Properties, shaderStorageBufferArrayNonUniformIndexingNative));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceVulkan12Properties, shaderStorageBufferArrayNonUniformIndexingNative));
alignmentData.push_back(offsetof(VkPhysicalDeviceVulkan12Properties, shaderStorageImageArrayNonUniformIndexingNative));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceVulkan12Properties, shaderStorageImageArrayNonUniformIndexingNative));
alignmentData.push_back(offsetof(VkPhysicalDeviceVulkan12Properties, shaderInputAttachmentArrayNonUniformIndexingNative));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceVulkan12Properties, shaderInputAttachmentArrayNonUniformIndexingNative));
alignmentData.push_back(offsetof(VkPhysicalDeviceVulkan12Properties, robustBufferAccessUpdateAfterBind));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceVulkan12Properties, robustBufferAccessUpdateAfterBind));
alignmentData.push_back(offsetof(VkPhysicalDeviceVulkan12Properties, quadDivergentImplicitLod));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceVulkan12Properties, quadDivergentImplicitLod));
alignmentData.push_back(offsetof(VkPhysicalDeviceVulkan12Properties, maxPerStageDescriptorUpdateAfterBindSamplers));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceVulkan12Properties, maxPerStageDescriptorUpdateAfterBindSamplers));
alignmentData.push_back(offsetof(VkPhysicalDeviceVulkan12Properties, maxPerStageDescriptorUpdateAfterBindUniformBuffers));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceVulkan12Properties, maxPerStageDescriptorUpdateAfterBindUniformBuffers));
alignmentData.push_back(offsetof(VkPhysicalDeviceVulkan12Properties, maxPerStageDescriptorUpdateAfterBindStorageBuffers));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceVulkan12Properties, maxPerStageDescriptorUpdateAfterBindStorageBuffers));
alignmentData.push_back(offsetof(VkPhysicalDeviceVulkan12Properties, maxPerStageDescriptorUpdateAfterBindSampledImages));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceVulkan12Properties, maxPerStageDescriptorUpdateAfterBindSampledImages));
alignmentData.push_back(offsetof(VkPhysicalDeviceVulkan12Properties, maxPerStageDescriptorUpdateAfterBindStorageImages));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceVulkan12Properties, maxPerStageDescriptorUpdateAfterBindStorageImages));
alignmentData.push_back(offsetof(VkPhysicalDeviceVulkan12Properties, maxPerStageDescriptorUpdateAfterBindInputAttachments));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceVulkan12Properties, maxPerStageDescriptorUpdateAfterBindInputAttachments));
alignmentData.push_back(offsetof(VkPhysicalDeviceVulkan12Properties, maxPerStageUpdateAfterBindResources));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceVulkan12Properties, maxPerStageUpdateAfterBindResources));
alignmentData.push_back(offsetof(VkPhysicalDeviceVulkan12Properties, maxDescriptorSetUpdateAfterBindSamplers));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceVulkan12Properties, maxDescriptorSetUpdateAfterBindSamplers));
alignmentData.push_back(offsetof(VkPhysicalDeviceVulkan12Properties, maxDescriptorSetUpdateAfterBindUniformBuffers));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceVulkan12Properties, maxDescriptorSetUpdateAfterBindUniformBuffers));
alignmentData.push_back(offsetof(VkPhysicalDeviceVulkan12Properties, maxDescriptorSetUpdateAfterBindUniformBuffersDynamic));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceVulkan12Properties, maxDescriptorSetUpdateAfterBindUniformBuffersDynamic));
alignmentData.push_back(offsetof(VkPhysicalDeviceVulkan12Properties, maxDescriptorSetUpdateAfterBindStorageBuffers));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceVulkan12Properties, maxDescriptorSetUpdateAfterBindStorageBuffers));
alignmentData.push_back(offsetof(VkPhysicalDeviceVulkan12Properties, maxDescriptorSetUpdateAfterBindStorageBuffersDynamic));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceVulkan12Properties, maxDescriptorSetUpdateAfterBindStorageBuffersDynamic));
alignmentData.push_back(offsetof(VkPhysicalDeviceVulkan12Properties, maxDescriptorSetUpdateAfterBindSampledImages));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceVulkan12Properties, maxDescriptorSetUpdateAfterBindSampledImages));
alignmentData.push_back(offsetof(VkPhysicalDeviceVulkan12Properties, maxDescriptorSetUpdateAfterBindStorageImages));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceVulkan12Properties, maxDescriptorSetUpdateAfterBindStorageImages));
alignmentData.push_back(offsetof(VkPhysicalDeviceVulkan12Properties, maxDescriptorSetUpdateAfterBindInputAttachments));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceVulkan12Properties, maxDescriptorSetUpdateAfterBindInputAttachments));
alignmentData.push_back(offsetof(VkPhysicalDeviceVulkan12Properties, supportedDepthResolveModes));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceVulkan12Properties, supportedDepthResolveModes));
alignmentData.push_back(offsetof(VkPhysicalDeviceVulkan12Properties, supportedStencilResolveModes));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceVulkan12Properties, supportedStencilResolveModes));
alignmentData.push_back(offsetof(VkPhysicalDeviceVulkan12Properties, independentResolveNone));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceVulkan12Properties, independentResolveNone));
alignmentData.push_back(offsetof(VkPhysicalDeviceVulkan12Properties, independentResolve));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceVulkan12Properties, independentResolve));
alignmentData.push_back(offsetof(VkPhysicalDeviceVulkan12Properties, filterMinmaxSingleComponentFormats));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceVulkan12Properties, filterMinmaxSingleComponentFormats));
alignmentData.push_back(offsetof(VkPhysicalDeviceVulkan12Properties, filterMinmaxImageComponentMapping));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceVulkan12Properties, filterMinmaxImageComponentMapping));
alignmentData.push_back(offsetof(VkPhysicalDeviceVulkan12Properties, maxTimelineSemaphoreValueDifference));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceVulkan12Properties, maxTimelineSemaphoreValueDifference));
alignmentData.push_back(offsetof(VkPhysicalDeviceVulkan12Properties, framebufferIntegerColorSampleCounts));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceVulkan12Properties, framebufferIntegerColorSampleCounts));
alignmentData.push_back(offsetof(VkPhysicalDeviceVulkan13Features, sType));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceVulkan13Features, sType));
alignmentData.push_back(offsetof(VkPhysicalDeviceVulkan13Features, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceVulkan13Features, pNext));
alignmentData.push_back(offsetof(VkPhysicalDeviceVulkan13Features, robustImageAccess));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceVulkan13Features, robustImageAccess));
alignmentData.push_back(offsetof(VkPhysicalDeviceVulkan13Features, inlineUniformBlock));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceVulkan13Features, inlineUniformBlock));
alignmentData.push_back(offsetof(VkPhysicalDeviceVulkan13Features, descriptorBindingInlineUniformBlockUpdateAfterBind));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceVulkan13Features, descriptorBindingInlineUniformBlockUpdateAfterBind));
alignmentData.push_back(offsetof(VkPhysicalDeviceVulkan13Features, pipelineCreationCacheControl));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceVulkan13Features, pipelineCreationCacheControl));
alignmentData.push_back(offsetof(VkPhysicalDeviceVulkan13Features, privateData));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceVulkan13Features, privateData));
alignmentData.push_back(offsetof(VkPhysicalDeviceVulkan13Features, shaderDemoteToHelperInvocation));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceVulkan13Features, shaderDemoteToHelperInvocation));
alignmentData.push_back(offsetof(VkPhysicalDeviceVulkan13Features, shaderTerminateInvocation));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceVulkan13Features, shaderTerminateInvocation));
alignmentData.push_back(offsetof(VkPhysicalDeviceVulkan13Features, subgroupSizeControl));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceVulkan13Features, subgroupSizeControl));
alignmentData.push_back(offsetof(VkPhysicalDeviceVulkan13Features, computeFullSubgroups));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceVulkan13Features, computeFullSubgroups));
alignmentData.push_back(offsetof(VkPhysicalDeviceVulkan13Features, synchronization2));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceVulkan13Features, synchronization2));
alignmentData.push_back(offsetof(VkPhysicalDeviceVulkan13Features, textureCompressionASTC_HDR));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceVulkan13Features, textureCompressionASTC_HDR));
alignmentData.push_back(offsetof(VkPhysicalDeviceVulkan13Features, shaderZeroInitializeWorkgroupMemory));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceVulkan13Features, shaderZeroInitializeWorkgroupMemory));
alignmentData.push_back(offsetof(VkPhysicalDeviceVulkan13Features, dynamicRendering));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceVulkan13Features, dynamicRendering));
alignmentData.push_back(offsetof(VkPhysicalDeviceVulkan13Features, shaderIntegerDotProduct));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceVulkan13Features, shaderIntegerDotProduct));
alignmentData.push_back(offsetof(VkPhysicalDeviceVulkan13Features, maintenance4));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceVulkan13Features, maintenance4));
alignmentData.push_back(offsetof(VkPhysicalDeviceVulkan13Properties, sType));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceVulkan13Properties, sType));
alignmentData.push_back(offsetof(VkPhysicalDeviceVulkan13Properties, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceVulkan13Properties, pNext));
alignmentData.push_back(offsetof(VkPhysicalDeviceVulkan13Properties, minSubgroupSize));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceVulkan13Properties, minSubgroupSize));
alignmentData.push_back(offsetof(VkPhysicalDeviceVulkan13Properties, maxSubgroupSize));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceVulkan13Properties, maxSubgroupSize));
alignmentData.push_back(offsetof(VkPhysicalDeviceVulkan13Properties, maxComputeWorkgroupSubgroups));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceVulkan13Properties, maxComputeWorkgroupSubgroups));
alignmentData.push_back(offsetof(VkPhysicalDeviceVulkan13Properties, requiredSubgroupSizeStages));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceVulkan13Properties, requiredSubgroupSizeStages));
alignmentData.push_back(offsetof(VkPhysicalDeviceVulkan13Properties, maxInlineUniformBlockSize));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceVulkan13Properties, maxInlineUniformBlockSize));
alignmentData.push_back(offsetof(VkPhysicalDeviceVulkan13Properties, maxPerStageDescriptorInlineUniformBlocks));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceVulkan13Properties, maxPerStageDescriptorInlineUniformBlocks));
alignmentData.push_back(offsetof(VkPhysicalDeviceVulkan13Properties, maxPerStageDescriptorUpdateAfterBindInlineUniformBlocks));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceVulkan13Properties, maxPerStageDescriptorUpdateAfterBindInlineUniformBlocks));
alignmentData.push_back(offsetof(VkPhysicalDeviceVulkan13Properties, maxDescriptorSetInlineUniformBlocks));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceVulkan13Properties, maxDescriptorSetInlineUniformBlocks));
alignmentData.push_back(offsetof(VkPhysicalDeviceVulkan13Properties, maxDescriptorSetUpdateAfterBindInlineUniformBlocks));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceVulkan13Properties, maxDescriptorSetUpdateAfterBindInlineUniformBlocks));
alignmentData.push_back(offsetof(VkPhysicalDeviceVulkan13Properties, maxInlineUniformTotalSize));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceVulkan13Properties, maxInlineUniformTotalSize));
alignmentData.push_back(offsetof(VkPhysicalDeviceVulkan13Properties, integerDotProduct8BitUnsignedAccelerated));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceVulkan13Properties, integerDotProduct8BitUnsignedAccelerated));
alignmentData.push_back(offsetof(VkPhysicalDeviceVulkan13Properties, integerDotProduct8BitSignedAccelerated));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceVulkan13Properties, integerDotProduct8BitSignedAccelerated));
alignmentData.push_back(offsetof(VkPhysicalDeviceVulkan13Properties, integerDotProduct8BitMixedSignednessAccelerated));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceVulkan13Properties, integerDotProduct8BitMixedSignednessAccelerated));
alignmentData.push_back(offsetof(VkPhysicalDeviceVulkan13Properties, integerDotProduct4x8BitPackedUnsignedAccelerated));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceVulkan13Properties, integerDotProduct4x8BitPackedUnsignedAccelerated));
alignmentData.push_back(offsetof(VkPhysicalDeviceVulkan13Properties, integerDotProduct4x8BitPackedSignedAccelerated));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceVulkan13Properties, integerDotProduct4x8BitPackedSignedAccelerated));
alignmentData.push_back(offsetof(VkPhysicalDeviceVulkan13Properties, integerDotProduct4x8BitPackedMixedSignednessAccelerated));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceVulkan13Properties, integerDotProduct4x8BitPackedMixedSignednessAccelerated));
alignmentData.push_back(offsetof(VkPhysicalDeviceVulkan13Properties, integerDotProduct16BitUnsignedAccelerated));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceVulkan13Properties, integerDotProduct16BitUnsignedAccelerated));
alignmentData.push_back(offsetof(VkPhysicalDeviceVulkan13Properties, integerDotProduct16BitSignedAccelerated));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceVulkan13Properties, integerDotProduct16BitSignedAccelerated));
alignmentData.push_back(offsetof(VkPhysicalDeviceVulkan13Properties, integerDotProduct16BitMixedSignednessAccelerated));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceVulkan13Properties, integerDotProduct16BitMixedSignednessAccelerated));
alignmentData.push_back(offsetof(VkPhysicalDeviceVulkan13Properties, integerDotProduct32BitUnsignedAccelerated));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceVulkan13Properties, integerDotProduct32BitUnsignedAccelerated));
alignmentData.push_back(offsetof(VkPhysicalDeviceVulkan13Properties, integerDotProduct32BitSignedAccelerated));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceVulkan13Properties, integerDotProduct32BitSignedAccelerated));
alignmentData.push_back(offsetof(VkPhysicalDeviceVulkan13Properties, integerDotProduct32BitMixedSignednessAccelerated));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceVulkan13Properties, integerDotProduct32BitMixedSignednessAccelerated));
alignmentData.push_back(offsetof(VkPhysicalDeviceVulkan13Properties, integerDotProduct64BitUnsignedAccelerated));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceVulkan13Properties, integerDotProduct64BitUnsignedAccelerated));
alignmentData.push_back(offsetof(VkPhysicalDeviceVulkan13Properties, integerDotProduct64BitSignedAccelerated));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceVulkan13Properties, integerDotProduct64BitSignedAccelerated));
alignmentData.push_back(offsetof(VkPhysicalDeviceVulkan13Properties, integerDotProduct64BitMixedSignednessAccelerated));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceVulkan13Properties, integerDotProduct64BitMixedSignednessAccelerated));
alignmentData.push_back(offsetof(VkPhysicalDeviceVulkan13Properties, integerDotProductAccumulatingSaturating8BitUnsignedAccelerated));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceVulkan13Properties, integerDotProductAccumulatingSaturating8BitUnsignedAccelerated));
alignmentData.push_back(offsetof(VkPhysicalDeviceVulkan13Properties, integerDotProductAccumulatingSaturating8BitSignedAccelerated));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceVulkan13Properties, integerDotProductAccumulatingSaturating8BitSignedAccelerated));
alignmentData.push_back(offsetof(VkPhysicalDeviceVulkan13Properties, integerDotProductAccumulatingSaturating8BitMixedSignednessAccelerated));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceVulkan13Properties, integerDotProductAccumulatingSaturating8BitMixedSignednessAccelerated));
alignmentData.push_back(offsetof(VkPhysicalDeviceVulkan13Properties, integerDotProductAccumulatingSaturating4x8BitPackedUnsignedAccelerated));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceVulkan13Properties, integerDotProductAccumulatingSaturating4x8BitPackedUnsignedAccelerated));
alignmentData.push_back(offsetof(VkPhysicalDeviceVulkan13Properties, integerDotProductAccumulatingSaturating4x8BitPackedSignedAccelerated));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceVulkan13Properties, integerDotProductAccumulatingSaturating4x8BitPackedSignedAccelerated));
alignmentData.push_back(offsetof(VkPhysicalDeviceVulkan13Properties, integerDotProductAccumulatingSaturating4x8BitPackedMixedSignednessAccelerated));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceVulkan13Properties, integerDotProductAccumulatingSaturating4x8BitPackedMixedSignednessAccelerated));
alignmentData.push_back(offsetof(VkPhysicalDeviceVulkan13Properties, integerDotProductAccumulatingSaturating16BitUnsignedAccelerated));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceVulkan13Properties, integerDotProductAccumulatingSaturating16BitUnsignedAccelerated));
alignmentData.push_back(offsetof(VkPhysicalDeviceVulkan13Properties, integerDotProductAccumulatingSaturating16BitSignedAccelerated));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceVulkan13Properties, integerDotProductAccumulatingSaturating16BitSignedAccelerated));
alignmentData.push_back(offsetof(VkPhysicalDeviceVulkan13Properties, integerDotProductAccumulatingSaturating16BitMixedSignednessAccelerated));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceVulkan13Properties, integerDotProductAccumulatingSaturating16BitMixedSignednessAccelerated));
alignmentData.push_back(offsetof(VkPhysicalDeviceVulkan13Properties, integerDotProductAccumulatingSaturating32BitUnsignedAccelerated));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceVulkan13Properties, integerDotProductAccumulatingSaturating32BitUnsignedAccelerated));
alignmentData.push_back(offsetof(VkPhysicalDeviceVulkan13Properties, integerDotProductAccumulatingSaturating32BitSignedAccelerated));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceVulkan13Properties, integerDotProductAccumulatingSaturating32BitSignedAccelerated));
alignmentData.push_back(offsetof(VkPhysicalDeviceVulkan13Properties, integerDotProductAccumulatingSaturating32BitMixedSignednessAccelerated));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceVulkan13Properties, integerDotProductAccumulatingSaturating32BitMixedSignednessAccelerated));
alignmentData.push_back(offsetof(VkPhysicalDeviceVulkan13Properties, integerDotProductAccumulatingSaturating64BitUnsignedAccelerated));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceVulkan13Properties, integerDotProductAccumulatingSaturating64BitUnsignedAccelerated));
alignmentData.push_back(offsetof(VkPhysicalDeviceVulkan13Properties, integerDotProductAccumulatingSaturating64BitSignedAccelerated));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceVulkan13Properties, integerDotProductAccumulatingSaturating64BitSignedAccelerated));
alignmentData.push_back(offsetof(VkPhysicalDeviceVulkan13Properties, integerDotProductAccumulatingSaturating64BitMixedSignednessAccelerated));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceVulkan13Properties, integerDotProductAccumulatingSaturating64BitMixedSignednessAccelerated));
alignmentData.push_back(offsetof(VkPhysicalDeviceVulkan13Properties, storageTexelBufferOffsetAlignmentBytes));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceVulkan13Properties, storageTexelBufferOffsetAlignmentBytes));
alignmentData.push_back(offsetof(VkPhysicalDeviceVulkan13Properties, storageTexelBufferOffsetSingleTexelAlignment));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceVulkan13Properties, storageTexelBufferOffsetSingleTexelAlignment));
alignmentData.push_back(offsetof(VkPhysicalDeviceVulkan13Properties, uniformTexelBufferOffsetAlignmentBytes));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceVulkan13Properties, uniformTexelBufferOffsetAlignmentBytes));
alignmentData.push_back(offsetof(VkPhysicalDeviceVulkan13Properties, uniformTexelBufferOffsetSingleTexelAlignment));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceVulkan13Properties, uniformTexelBufferOffsetSingleTexelAlignment));
alignmentData.push_back(offsetof(VkPhysicalDeviceVulkan13Properties, maxBufferSize));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceVulkan13Properties, maxBufferSize));
alignmentData.push_back(offsetof(VkPhysicalDeviceToolProperties, sType));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceToolProperties, sType));
alignmentData.push_back(offsetof(VkPhysicalDeviceToolProperties, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceToolProperties, pNext));
alignmentData.push_back(offsetof(VkPhysicalDeviceToolProperties, name));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceToolProperties, name));
alignmentData.push_back(offsetof(VkPhysicalDeviceToolProperties, version));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceToolProperties, version));
alignmentData.push_back(offsetof(VkPhysicalDeviceToolProperties, purposes));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceToolProperties, purposes));
alignmentData.push_back(offsetof(VkPhysicalDeviceToolProperties, description));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceToolProperties, description));
alignmentData.push_back(offsetof(VkPhysicalDeviceToolProperties, layer));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceToolProperties, layer));

alignmentData.push_back(offsetof(VkRayTracingPipelineInterfaceCreateInfoKHR, sType));
alignmentData.push_back(FIELD_SIZEOF(VkRayTracingPipelineInterfaceCreateInfoKHR, sType));
alignmentData.push_back(offsetof(VkRayTracingPipelineInterfaceCreateInfoKHR, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkRayTracingPipelineInterfaceCreateInfoKHR, pNext));
alignmentData.push_back(offsetof(VkRayTracingPipelineInterfaceCreateInfoKHR, maxPipelineRayPayloadSize));
alignmentData.push_back(FIELD_SIZEOF(VkRayTracingPipelineInterfaceCreateInfoKHR, maxPipelineRayPayloadSize));
alignmentData.push_back(offsetof(VkRayTracingPipelineInterfaceCreateInfoKHR, maxPipelineRayHitAttributeSize));
alignmentData.push_back(FIELD_SIZEOF(VkRayTracingPipelineInterfaceCreateInfoKHR, maxPipelineRayHitAttributeSize));
alignmentData.push_back(offsetof(VkPipelineLibraryCreateInfoKHR, sType));
alignmentData.push_back(FIELD_SIZEOF(VkPipelineLibraryCreateInfoKHR, sType));
alignmentData.push_back(offsetof(VkPipelineLibraryCreateInfoKHR, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkPipelineLibraryCreateInfoKHR, pNext));
alignmentData.push_back(offsetof(VkPipelineLibraryCreateInfoKHR, libraryCount));
alignmentData.push_back(FIELD_SIZEOF(VkPipelineLibraryCreateInfoKHR, libraryCount));
alignmentData.push_back(offsetof(VkPipelineLibraryCreateInfoKHR, pLibraries));
alignmentData.push_back(FIELD_SIZEOF(VkPipelineLibraryCreateInfoKHR, pLibraries));
alignmentData.push_back(offsetof(VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeatures, sType));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeatures, sType));
alignmentData.push_back(offsetof(VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeatures, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeatures, pNext));
alignmentData.push_back(offsetof(VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeatures, shaderZeroInitializeWorkgroupMemory));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeatures, shaderZeroInitializeWorkgroupMemory));

alignmentData.push_back(offsetof(VkPhysicalDeviceShaderSubgroupUniformControlFlowFeaturesKHR, sType));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceShaderSubgroupUniformControlFlowFeaturesKHR, sType));
alignmentData.push_back(offsetof(VkPhysicalDeviceShaderSubgroupUniformControlFlowFeaturesKHR, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceShaderSubgroupUniformControlFlowFeaturesKHR, pNext));
alignmentData.push_back(offsetof(VkPhysicalDeviceShaderSubgroupUniformControlFlowFeaturesKHR, shaderSubgroupUniformControlFlow));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceShaderSubgroupUniformControlFlowFeaturesKHR, shaderSubgroupUniformControlFlow));
alignmentData.push_back(offsetof(VkPhysicalDeviceRobustness2FeaturesEXT, sType));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceRobustness2FeaturesEXT, sType));
alignmentData.push_back(offsetof(VkPhysicalDeviceRobustness2FeaturesEXT, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceRobustness2FeaturesEXT, pNext));
alignmentData.push_back(offsetof(VkPhysicalDeviceRobustness2FeaturesEXT, robustBufferAccess2));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceRobustness2FeaturesEXT, robustBufferAccess2));
alignmentData.push_back(offsetof(VkPhysicalDeviceRobustness2FeaturesEXT, robustImageAccess2));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceRobustness2FeaturesEXT, robustImageAccess2));
alignmentData.push_back(offsetof(VkPhysicalDeviceRobustness2FeaturesEXT, nullDescriptor));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceRobustness2FeaturesEXT, nullDescriptor));
alignmentData.push_back(offsetof(VkPhysicalDeviceRobustness2PropertiesEXT, sType));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceRobustness2PropertiesEXT, sType));
alignmentData.push_back(offsetof(VkPhysicalDeviceRobustness2PropertiesEXT, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceRobustness2PropertiesEXT, pNext));
alignmentData.push_back(offsetof(VkPhysicalDeviceRobustness2PropertiesEXT, robustStorageBufferAccessSizeAlignment));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceRobustness2PropertiesEXT, robustStorageBufferAccessSizeAlignment));
alignmentData.push_back(offsetof(VkPhysicalDeviceRobustness2PropertiesEXT, robustUniformBufferAccessSizeAlignment));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceRobustness2PropertiesEXT, robustUniformBufferAccessSizeAlignment));
alignmentData.push_back(offsetof(VkPhysicalDeviceImageRobustnessFeatures, sType));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceImageRobustnessFeatures, sType));
alignmentData.push_back(offsetof(VkPhysicalDeviceImageRobustnessFeatures, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceImageRobustnessFeatures, pNext));
alignmentData.push_back(offsetof(VkPhysicalDeviceImageRobustnessFeatures, robustImageAccess));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceImageRobustnessFeatures, robustImageAccess));

alignmentData.push_back(offsetof(VkPhysicalDeviceWorkgroupMemoryExplicitLayoutFeaturesKHR, sType));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceWorkgroupMemoryExplicitLayoutFeaturesKHR, sType));
alignmentData.push_back(offsetof(VkPhysicalDeviceWorkgroupMemoryExplicitLayoutFeaturesKHR, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceWorkgroupMemoryExplicitLayoutFeaturesKHR, pNext));
alignmentData.push_back(offsetof(VkPhysicalDeviceWorkgroupMemoryExplicitLayoutFeaturesKHR, workgroupMemoryExplicitLayout));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceWorkgroupMemoryExplicitLayoutFeaturesKHR, workgroupMemoryExplicitLayout));
alignmentData.push_back(offsetof(VkPhysicalDeviceWorkgroupMemoryExplicitLayoutFeaturesKHR, workgroupMemoryExplicitLayoutScalarBlockLayout));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceWorkgroupMemoryExplicitLayoutFeaturesKHR, workgroupMemoryExplicitLayoutScalarBlockLayout));
alignmentData.push_back(offsetof(VkPhysicalDeviceWorkgroupMemoryExplicitLayoutFeaturesKHR, workgroupMemoryExplicitLayout8BitAccess));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceWorkgroupMemoryExplicitLayoutFeaturesKHR, workgroupMemoryExplicitLayout8BitAccess));
alignmentData.push_back(offsetof(VkPhysicalDeviceWorkgroupMemoryExplicitLayoutFeaturesKHR, workgroupMemoryExplicitLayout16BitAccess));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceWorkgroupMemoryExplicitLayoutFeaturesKHR, workgroupMemoryExplicitLayout16BitAccess));
alignmentData.push_back(offsetof(VkBufferCopy2, sType));
alignmentData.push_back(FIELD_SIZEOF(VkBufferCopy2, sType));
alignmentData.push_back(offsetof(VkBufferCopy2, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkBufferCopy2, pNext));
alignmentData.push_back(offsetof(VkBufferCopy2, srcOffset));
alignmentData.push_back(FIELD_SIZEOF(VkBufferCopy2, srcOffset));
alignmentData.push_back(offsetof(VkBufferCopy2, dstOffset));
alignmentData.push_back(FIELD_SIZEOF(VkBufferCopy2, dstOffset));
alignmentData.push_back(offsetof(VkBufferCopy2, size));
alignmentData.push_back(FIELD_SIZEOF(VkBufferCopy2, size));

alignmentData.push_back(offsetof(VkImageCopy2, sType));
alignmentData.push_back(FIELD_SIZEOF(VkImageCopy2, sType));
alignmentData.push_back(offsetof(VkImageCopy2, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkImageCopy2, pNext));
alignmentData.push_back(offsetof(VkImageCopy2, srcSubresource));
alignmentData.push_back(FIELD_SIZEOF(VkImageCopy2, srcSubresource));
alignmentData.push_back(offsetof(VkImageCopy2, srcOffset));
alignmentData.push_back(FIELD_SIZEOF(VkImageCopy2, srcOffset));
alignmentData.push_back(offsetof(VkImageCopy2, dstSubresource));
alignmentData.push_back(FIELD_SIZEOF(VkImageCopy2, dstSubresource));
alignmentData.push_back(offsetof(VkImageCopy2, dstOffset));
alignmentData.push_back(FIELD_SIZEOF(VkImageCopy2, dstOffset));
alignmentData.push_back(offsetof(VkImageCopy2, extent));
alignmentData.push_back(FIELD_SIZEOF(VkImageCopy2, extent));

alignmentData.push_back(offsetof(VkImageBlit2, sType));
alignmentData.push_back(FIELD_SIZEOF(VkImageBlit2, sType));
alignmentData.push_back(offsetof(VkImageBlit2, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkImageBlit2, pNext));
alignmentData.push_back(offsetof(VkImageBlit2, srcSubresource));
alignmentData.push_back(FIELD_SIZEOF(VkImageBlit2, srcSubresource));
alignmentData.push_back(offsetof(VkImageBlit2, srcOffsets));
alignmentData.push_back(FIELD_SIZEOF(VkImageBlit2, srcOffsets));
alignmentData.push_back(offsetof(VkImageBlit2, dstSubresource));
alignmentData.push_back(FIELD_SIZEOF(VkImageBlit2, dstSubresource));
alignmentData.push_back(offsetof(VkImageBlit2, dstOffsets));
alignmentData.push_back(FIELD_SIZEOF(VkImageBlit2, dstOffsets));

alignmentData.push_back(offsetof(VkBufferImageCopy2, sType));
alignmentData.push_back(FIELD_SIZEOF(VkBufferImageCopy2, sType));
alignmentData.push_back(offsetof(VkBufferImageCopy2, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkBufferImageCopy2, pNext));
alignmentData.push_back(offsetof(VkBufferImageCopy2, bufferOffset));
alignmentData.push_back(FIELD_SIZEOF(VkBufferImageCopy2, bufferOffset));
alignmentData.push_back(offsetof(VkBufferImageCopy2, bufferRowLength));
alignmentData.push_back(FIELD_SIZEOF(VkBufferImageCopy2, bufferRowLength));
alignmentData.push_back(offsetof(VkBufferImageCopy2, bufferImageHeight));
alignmentData.push_back(FIELD_SIZEOF(VkBufferImageCopy2, bufferImageHeight));
alignmentData.push_back(offsetof(VkBufferImageCopy2, imageSubresource));
alignmentData.push_back(FIELD_SIZEOF(VkBufferImageCopy2, imageSubresource));
alignmentData.push_back(offsetof(VkBufferImageCopy2, imageOffset));
alignmentData.push_back(FIELD_SIZEOF(VkBufferImageCopy2, imageOffset));
alignmentData.push_back(offsetof(VkBufferImageCopy2, imageExtent));
alignmentData.push_back(FIELD_SIZEOF(VkBufferImageCopy2, imageExtent));

alignmentData.push_back(offsetof(VkImageResolve2, sType));
alignmentData.push_back(FIELD_SIZEOF(VkImageResolve2, sType));
alignmentData.push_back(offsetof(VkImageResolve2, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkImageResolve2, pNext));
alignmentData.push_back(offsetof(VkImageResolve2, srcSubresource));
alignmentData.push_back(FIELD_SIZEOF(VkImageResolve2, srcSubresource));
alignmentData.push_back(offsetof(VkImageResolve2, srcOffset));
alignmentData.push_back(FIELD_SIZEOF(VkImageResolve2, srcOffset));
alignmentData.push_back(offsetof(VkImageResolve2, dstSubresource));
alignmentData.push_back(FIELD_SIZEOF(VkImageResolve2, dstSubresource));
alignmentData.push_back(offsetof(VkImageResolve2, dstOffset));
alignmentData.push_back(FIELD_SIZEOF(VkImageResolve2, dstOffset));
alignmentData.push_back(offsetof(VkImageResolve2, extent));
alignmentData.push_back(FIELD_SIZEOF(VkImageResolve2, extent));

alignmentData.push_back(offsetof(VkCopyBufferInfo2, sType));
alignmentData.push_back(FIELD_SIZEOF(VkCopyBufferInfo2, sType));
alignmentData.push_back(offsetof(VkCopyBufferInfo2, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkCopyBufferInfo2, pNext));
alignmentData.push_back(offsetof(VkCopyBufferInfo2, srcBuffer));
alignmentData.push_back(FIELD_SIZEOF(VkCopyBufferInfo2, srcBuffer));
alignmentData.push_back(offsetof(VkCopyBufferInfo2, dstBuffer));
alignmentData.push_back(FIELD_SIZEOF(VkCopyBufferInfo2, dstBuffer));
alignmentData.push_back(offsetof(VkCopyBufferInfo2, regionCount));
alignmentData.push_back(FIELD_SIZEOF(VkCopyBufferInfo2, regionCount));
alignmentData.push_back(offsetof(VkCopyBufferInfo2, pRegions));
alignmentData.push_back(FIELD_SIZEOF(VkCopyBufferInfo2, pRegions));

alignmentData.push_back(offsetof(VkCopyImageInfo2, sType));
alignmentData.push_back(FIELD_SIZEOF(VkCopyImageInfo2, sType));
alignmentData.push_back(offsetof(VkCopyImageInfo2, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkCopyImageInfo2, pNext));
alignmentData.push_back(offsetof(VkCopyImageInfo2, srcImage));
alignmentData.push_back(FIELD_SIZEOF(VkCopyImageInfo2, srcImage));
alignmentData.push_back(offsetof(VkCopyImageInfo2, srcImageLayout));
alignmentData.push_back(FIELD_SIZEOF(VkCopyImageInfo2, srcImageLayout));
alignmentData.push_back(offsetof(VkCopyImageInfo2, dstImage));
alignmentData.push_back(FIELD_SIZEOF(VkCopyImageInfo2, dstImage));
alignmentData.push_back(offsetof(VkCopyImageInfo2, dstImageLayout));
alignmentData.push_back(FIELD_SIZEOF(VkCopyImageInfo2, dstImageLayout));
alignmentData.push_back(offsetof(VkCopyImageInfo2, regionCount));
alignmentData.push_back(FIELD_SIZEOF(VkCopyImageInfo2, regionCount));
alignmentData.push_back(offsetof(VkCopyImageInfo2, pRegions));
alignmentData.push_back(FIELD_SIZEOF(VkCopyImageInfo2, pRegions));

alignmentData.push_back(offsetof(VkBlitImageInfo2, sType));
alignmentData.push_back(FIELD_SIZEOF(VkBlitImageInfo2, sType));
alignmentData.push_back(offsetof(VkBlitImageInfo2, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkBlitImageInfo2, pNext));
alignmentData.push_back(offsetof(VkBlitImageInfo2, srcImage));
alignmentData.push_back(FIELD_SIZEOF(VkBlitImageInfo2, srcImage));
alignmentData.push_back(offsetof(VkBlitImageInfo2, srcImageLayout));
alignmentData.push_back(FIELD_SIZEOF(VkBlitImageInfo2, srcImageLayout));
alignmentData.push_back(offsetof(VkBlitImageInfo2, dstImage));
alignmentData.push_back(FIELD_SIZEOF(VkBlitImageInfo2, dstImage));
alignmentData.push_back(offsetof(VkBlitImageInfo2, dstImageLayout));
alignmentData.push_back(FIELD_SIZEOF(VkBlitImageInfo2, dstImageLayout));
alignmentData.push_back(offsetof(VkBlitImageInfo2, regionCount));
alignmentData.push_back(FIELD_SIZEOF(VkBlitImageInfo2, regionCount));
alignmentData.push_back(offsetof(VkBlitImageInfo2, pRegions));
alignmentData.push_back(FIELD_SIZEOF(VkBlitImageInfo2, pRegions));
alignmentData.push_back(offsetof(VkBlitImageInfo2, filter));
alignmentData.push_back(FIELD_SIZEOF(VkBlitImageInfo2, filter));

alignmentData.push_back(offsetof(VkCopyBufferToImageInfo2, sType));
alignmentData.push_back(FIELD_SIZEOF(VkCopyBufferToImageInfo2, sType));
alignmentData.push_back(offsetof(VkCopyBufferToImageInfo2, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkCopyBufferToImageInfo2, pNext));
alignmentData.push_back(offsetof(VkCopyBufferToImageInfo2, srcBuffer));
alignmentData.push_back(FIELD_SIZEOF(VkCopyBufferToImageInfo2, srcBuffer));
alignmentData.push_back(offsetof(VkCopyBufferToImageInfo2, dstImage));
alignmentData.push_back(FIELD_SIZEOF(VkCopyBufferToImageInfo2, dstImage));
alignmentData.push_back(offsetof(VkCopyBufferToImageInfo2, dstImageLayout));
alignmentData.push_back(FIELD_SIZEOF(VkCopyBufferToImageInfo2, dstImageLayout));
alignmentData.push_back(offsetof(VkCopyBufferToImageInfo2, regionCount));
alignmentData.push_back(FIELD_SIZEOF(VkCopyBufferToImageInfo2, regionCount));
alignmentData.push_back(offsetof(VkCopyBufferToImageInfo2, pRegions));
alignmentData.push_back(FIELD_SIZEOF(VkCopyBufferToImageInfo2, pRegions));

alignmentData.push_back(offsetof(VkCopyImageToBufferInfo2, sType));
alignmentData.push_back(FIELD_SIZEOF(VkCopyImageToBufferInfo2, sType));
alignmentData.push_back(offsetof(VkCopyImageToBufferInfo2, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkCopyImageToBufferInfo2, pNext));
alignmentData.push_back(offsetof(VkCopyImageToBufferInfo2, srcImage));
alignmentData.push_back(FIELD_SIZEOF(VkCopyImageToBufferInfo2, srcImage));
alignmentData.push_back(offsetof(VkCopyImageToBufferInfo2, srcImageLayout));
alignmentData.push_back(FIELD_SIZEOF(VkCopyImageToBufferInfo2, srcImageLayout));
alignmentData.push_back(offsetof(VkCopyImageToBufferInfo2, dstBuffer));
alignmentData.push_back(FIELD_SIZEOF(VkCopyImageToBufferInfo2, dstBuffer));
alignmentData.push_back(offsetof(VkCopyImageToBufferInfo2, regionCount));
alignmentData.push_back(FIELD_SIZEOF(VkCopyImageToBufferInfo2, regionCount));
alignmentData.push_back(offsetof(VkCopyImageToBufferInfo2, pRegions));
alignmentData.push_back(FIELD_SIZEOF(VkCopyImageToBufferInfo2, pRegions));

alignmentData.push_back(offsetof(VkResolveImageInfo2, sType));
alignmentData.push_back(FIELD_SIZEOF(VkResolveImageInfo2, sType));
alignmentData.push_back(offsetof(VkResolveImageInfo2, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkResolveImageInfo2, pNext));
alignmentData.push_back(offsetof(VkResolveImageInfo2, srcImage));
alignmentData.push_back(FIELD_SIZEOF(VkResolveImageInfo2, srcImage));
alignmentData.push_back(offsetof(VkResolveImageInfo2, srcImageLayout));
alignmentData.push_back(FIELD_SIZEOF(VkResolveImageInfo2, srcImageLayout));
alignmentData.push_back(offsetof(VkResolveImageInfo2, dstImage));
alignmentData.push_back(FIELD_SIZEOF(VkResolveImageInfo2, dstImage));
alignmentData.push_back(offsetof(VkResolveImageInfo2, dstImageLayout));
alignmentData.push_back(FIELD_SIZEOF(VkResolveImageInfo2, dstImageLayout));
alignmentData.push_back(offsetof(VkResolveImageInfo2, regionCount));
alignmentData.push_back(FIELD_SIZEOF(VkResolveImageInfo2, regionCount));
alignmentData.push_back(offsetof(VkResolveImageInfo2, pRegions));
alignmentData.push_back(FIELD_SIZEOF(VkResolveImageInfo2, pRegions));

alignmentData.push_back(offsetof(VkPhysicalDeviceShaderImageAtomicInt64FeaturesEXT, sType));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceShaderImageAtomicInt64FeaturesEXT, sType));
alignmentData.push_back(offsetof(VkPhysicalDeviceShaderImageAtomicInt64FeaturesEXT, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceShaderImageAtomicInt64FeaturesEXT, pNext));
alignmentData.push_back(offsetof(VkPhysicalDeviceShaderImageAtomicInt64FeaturesEXT, shaderImageInt64Atomics));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceShaderImageAtomicInt64FeaturesEXT, shaderImageInt64Atomics));
alignmentData.push_back(offsetof(VkPhysicalDeviceShaderImageAtomicInt64FeaturesEXT, sparseImageInt64Atomics));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceShaderImageAtomicInt64FeaturesEXT, sparseImageInt64Atomics));
alignmentData.push_back(offsetof(VkFragmentShadingRateAttachmentInfoKHR, sType));
alignmentData.push_back(FIELD_SIZEOF(VkFragmentShadingRateAttachmentInfoKHR, sType));
alignmentData.push_back(offsetof(VkFragmentShadingRateAttachmentInfoKHR, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkFragmentShadingRateAttachmentInfoKHR, pNext));
alignmentData.push_back(offsetof(VkFragmentShadingRateAttachmentInfoKHR, pFragmentShadingRateAttachment));
alignmentData.push_back(FIELD_SIZEOF(VkFragmentShadingRateAttachmentInfoKHR, pFragmentShadingRateAttachment));
alignmentData.push_back(offsetof(VkFragmentShadingRateAttachmentInfoKHR, shadingRateAttachmentTexelSize));
alignmentData.push_back(FIELD_SIZEOF(VkFragmentShadingRateAttachmentInfoKHR, shadingRateAttachmentTexelSize));
alignmentData.push_back(offsetof(VkPipelineFragmentShadingRateStateCreateInfoKHR, sType));
alignmentData.push_back(FIELD_SIZEOF(VkPipelineFragmentShadingRateStateCreateInfoKHR, sType));
alignmentData.push_back(offsetof(VkPipelineFragmentShadingRateStateCreateInfoKHR, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkPipelineFragmentShadingRateStateCreateInfoKHR, pNext));
alignmentData.push_back(offsetof(VkPipelineFragmentShadingRateStateCreateInfoKHR, fragmentSize));
alignmentData.push_back(FIELD_SIZEOF(VkPipelineFragmentShadingRateStateCreateInfoKHR, fragmentSize));
alignmentData.push_back(offsetof(VkPipelineFragmentShadingRateStateCreateInfoKHR, combinerOps));
alignmentData.push_back(FIELD_SIZEOF(VkPipelineFragmentShadingRateStateCreateInfoKHR, combinerOps));
alignmentData.push_back(offsetof(VkPhysicalDeviceFragmentShadingRateFeaturesKHR, sType));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceFragmentShadingRateFeaturesKHR, sType));
alignmentData.push_back(offsetof(VkPhysicalDeviceFragmentShadingRateFeaturesKHR, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceFragmentShadingRateFeaturesKHR, pNext));
alignmentData.push_back(offsetof(VkPhysicalDeviceFragmentShadingRateFeaturesKHR, pipelineFragmentShadingRate));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceFragmentShadingRateFeaturesKHR, pipelineFragmentShadingRate));
alignmentData.push_back(offsetof(VkPhysicalDeviceFragmentShadingRateFeaturesKHR, primitiveFragmentShadingRate));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceFragmentShadingRateFeaturesKHR, primitiveFragmentShadingRate));
alignmentData.push_back(offsetof(VkPhysicalDeviceFragmentShadingRateFeaturesKHR, attachmentFragmentShadingRate));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceFragmentShadingRateFeaturesKHR, attachmentFragmentShadingRate));
alignmentData.push_back(offsetof(VkPhysicalDeviceFragmentShadingRatePropertiesKHR, sType));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceFragmentShadingRatePropertiesKHR, sType));
alignmentData.push_back(offsetof(VkPhysicalDeviceFragmentShadingRatePropertiesKHR, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceFragmentShadingRatePropertiesKHR, pNext));
alignmentData.push_back(offsetof(VkPhysicalDeviceFragmentShadingRatePropertiesKHR, minFragmentShadingRateAttachmentTexelSize));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceFragmentShadingRatePropertiesKHR, minFragmentShadingRateAttachmentTexelSize));
alignmentData.push_back(offsetof(VkPhysicalDeviceFragmentShadingRatePropertiesKHR, maxFragmentShadingRateAttachmentTexelSize));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceFragmentShadingRatePropertiesKHR, maxFragmentShadingRateAttachmentTexelSize));
alignmentData.push_back(offsetof(VkPhysicalDeviceFragmentShadingRatePropertiesKHR, maxFragmentShadingRateAttachmentTexelSizeAspectRatio));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceFragmentShadingRatePropertiesKHR, maxFragmentShadingRateAttachmentTexelSizeAspectRatio));
alignmentData.push_back(offsetof(VkPhysicalDeviceFragmentShadingRatePropertiesKHR, primitiveFragmentShadingRateWithMultipleViewports));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceFragmentShadingRatePropertiesKHR, primitiveFragmentShadingRateWithMultipleViewports));
alignmentData.push_back(offsetof(VkPhysicalDeviceFragmentShadingRatePropertiesKHR, layeredShadingRateAttachments));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceFragmentShadingRatePropertiesKHR, layeredShadingRateAttachments));
alignmentData.push_back(offsetof(VkPhysicalDeviceFragmentShadingRatePropertiesKHR, fragmentShadingRateNonTrivialCombinerOps));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceFragmentShadingRatePropertiesKHR, fragmentShadingRateNonTrivialCombinerOps));
alignmentData.push_back(offsetof(VkPhysicalDeviceFragmentShadingRatePropertiesKHR, maxFragmentSize));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceFragmentShadingRatePropertiesKHR, maxFragmentSize));
alignmentData.push_back(offsetof(VkPhysicalDeviceFragmentShadingRatePropertiesKHR, maxFragmentSizeAspectRatio));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceFragmentShadingRatePropertiesKHR, maxFragmentSizeAspectRatio));
alignmentData.push_back(offsetof(VkPhysicalDeviceFragmentShadingRatePropertiesKHR, maxFragmentShadingRateCoverageSamples));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceFragmentShadingRatePropertiesKHR, maxFragmentShadingRateCoverageSamples));
alignmentData.push_back(offsetof(VkPhysicalDeviceFragmentShadingRatePropertiesKHR, maxFragmentShadingRateRasterizationSamples));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceFragmentShadingRatePropertiesKHR, maxFragmentShadingRateRasterizationSamples));
alignmentData.push_back(offsetof(VkPhysicalDeviceFragmentShadingRatePropertiesKHR, fragmentShadingRateWithShaderDepthStencilWrites));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceFragmentShadingRatePropertiesKHR, fragmentShadingRateWithShaderDepthStencilWrites));
alignmentData.push_back(offsetof(VkPhysicalDeviceFragmentShadingRatePropertiesKHR, fragmentShadingRateWithSampleMask));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceFragmentShadingRatePropertiesKHR, fragmentShadingRateWithSampleMask));
alignmentData.push_back(offsetof(VkPhysicalDeviceFragmentShadingRatePropertiesKHR, fragmentShadingRateWithShaderSampleMask));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceFragmentShadingRatePropertiesKHR, fragmentShadingRateWithShaderSampleMask));
alignmentData.push_back(offsetof(VkPhysicalDeviceFragmentShadingRatePropertiesKHR, fragmentShadingRateWithConservativeRasterization));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceFragmentShadingRatePropertiesKHR, fragmentShadingRateWithConservativeRasterization));
alignmentData.push_back(offsetof(VkPhysicalDeviceFragmentShadingRatePropertiesKHR, fragmentShadingRateWithFragmentShaderInterlock));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceFragmentShadingRatePropertiesKHR, fragmentShadingRateWithFragmentShaderInterlock));
alignmentData.push_back(offsetof(VkPhysicalDeviceFragmentShadingRatePropertiesKHR, fragmentShadingRateWithCustomSampleLocations));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceFragmentShadingRatePropertiesKHR, fragmentShadingRateWithCustomSampleLocations));
alignmentData.push_back(offsetof(VkPhysicalDeviceFragmentShadingRatePropertiesKHR, fragmentShadingRateStrictMultiplyCombiner));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceFragmentShadingRatePropertiesKHR, fragmentShadingRateStrictMultiplyCombiner));
alignmentData.push_back(offsetof(VkPhysicalDeviceFragmentShadingRateKHR, sType));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceFragmentShadingRateKHR, sType));
alignmentData.push_back(offsetof(VkPhysicalDeviceFragmentShadingRateKHR, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceFragmentShadingRateKHR, pNext));
alignmentData.push_back(offsetof(VkPhysicalDeviceFragmentShadingRateKHR, sampleCounts));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceFragmentShadingRateKHR, sampleCounts));
alignmentData.push_back(offsetof(VkPhysicalDeviceFragmentShadingRateKHR, fragmentSize));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceFragmentShadingRateKHR, fragmentSize));
alignmentData.push_back(offsetof(VkPhysicalDeviceShaderTerminateInvocationFeatures, sType));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceShaderTerminateInvocationFeatures, sType));
alignmentData.push_back(offsetof(VkPhysicalDeviceShaderTerminateInvocationFeatures, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceShaderTerminateInvocationFeatures, pNext));
alignmentData.push_back(offsetof(VkPhysicalDeviceShaderTerminateInvocationFeatures, shaderTerminateInvocation));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceShaderTerminateInvocationFeatures, shaderTerminateInvocation));

alignmentData.push_back(offsetof(VkPhysicalDeviceImage2DViewOf3DFeaturesEXT, sType));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceImage2DViewOf3DFeaturesEXT, sType));
alignmentData.push_back(offsetof(VkPhysicalDeviceImage2DViewOf3DFeaturesEXT, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceImage2DViewOf3DFeaturesEXT, pNext));
alignmentData.push_back(offsetof(VkPhysicalDeviceImage2DViewOf3DFeaturesEXT, image2DViewOf3D));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceImage2DViewOf3DFeaturesEXT, image2DViewOf3D));
alignmentData.push_back(offsetof(VkPhysicalDeviceImage2DViewOf3DFeaturesEXT, sampler2DViewOf3D));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceImage2DViewOf3DFeaturesEXT, sampler2DViewOf3D));
alignmentData.push_back(offsetof(VkPhysicalDeviceMutableDescriptorTypeFeaturesEXT, sType));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceMutableDescriptorTypeFeaturesEXT, sType));
alignmentData.push_back(offsetof(VkPhysicalDeviceMutableDescriptorTypeFeaturesEXT, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceMutableDescriptorTypeFeaturesEXT, pNext));
alignmentData.push_back(offsetof(VkPhysicalDeviceMutableDescriptorTypeFeaturesEXT, mutableDescriptorType));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceMutableDescriptorTypeFeaturesEXT, mutableDescriptorType));
alignmentData.push_back(offsetof(VkMutableDescriptorTypeListEXT, descriptorTypeCount));
alignmentData.push_back(FIELD_SIZEOF(VkMutableDescriptorTypeListEXT, descriptorTypeCount));
alignmentData.push_back(offsetof(VkMutableDescriptorTypeListEXT, pDescriptorTypes));
alignmentData.push_back(FIELD_SIZEOF(VkMutableDescriptorTypeListEXT, pDescriptorTypes));
alignmentData.push_back(offsetof(VkMutableDescriptorTypeCreateInfoEXT, sType));
alignmentData.push_back(FIELD_SIZEOF(VkMutableDescriptorTypeCreateInfoEXT, sType));
alignmentData.push_back(offsetof(VkMutableDescriptorTypeCreateInfoEXT, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkMutableDescriptorTypeCreateInfoEXT, pNext));
alignmentData.push_back(offsetof(VkMutableDescriptorTypeCreateInfoEXT, mutableDescriptorTypeListCount));
alignmentData.push_back(FIELD_SIZEOF(VkMutableDescriptorTypeCreateInfoEXT, mutableDescriptorTypeListCount));
alignmentData.push_back(offsetof(VkMutableDescriptorTypeCreateInfoEXT, pMutableDescriptorTypeLists));
alignmentData.push_back(FIELD_SIZEOF(VkMutableDescriptorTypeCreateInfoEXT, pMutableDescriptorTypeLists));
alignmentData.push_back(offsetof(VkPhysicalDeviceVertexInputDynamicStateFeaturesEXT, sType));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceVertexInputDynamicStateFeaturesEXT, sType));
alignmentData.push_back(offsetof(VkPhysicalDeviceVertexInputDynamicStateFeaturesEXT, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceVertexInputDynamicStateFeaturesEXT, pNext));
alignmentData.push_back(offsetof(VkPhysicalDeviceVertexInputDynamicStateFeaturesEXT, vertexInputDynamicState));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceVertexInputDynamicStateFeaturesEXT, vertexInputDynamicState));
alignmentData.push_back(offsetof(VkMemoryBarrier2, sType));
alignmentData.push_back(FIELD_SIZEOF(VkMemoryBarrier2, sType));
alignmentData.push_back(offsetof(VkMemoryBarrier2, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkMemoryBarrier2, pNext));
alignmentData.push_back(offsetof(VkMemoryBarrier2, srcStageMask));
alignmentData.push_back(FIELD_SIZEOF(VkMemoryBarrier2, srcStageMask));
alignmentData.push_back(offsetof(VkMemoryBarrier2, srcAccessMask));
alignmentData.push_back(FIELD_SIZEOF(VkMemoryBarrier2, srcAccessMask));
alignmentData.push_back(offsetof(VkMemoryBarrier2, dstStageMask));
alignmentData.push_back(FIELD_SIZEOF(VkMemoryBarrier2, dstStageMask));
alignmentData.push_back(offsetof(VkMemoryBarrier2, dstAccessMask));
alignmentData.push_back(FIELD_SIZEOF(VkMemoryBarrier2, dstAccessMask));

alignmentData.push_back(offsetof(VkImageMemoryBarrier2, sType));
alignmentData.push_back(FIELD_SIZEOF(VkImageMemoryBarrier2, sType));
alignmentData.push_back(offsetof(VkImageMemoryBarrier2, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkImageMemoryBarrier2, pNext));
alignmentData.push_back(offsetof(VkImageMemoryBarrier2, srcStageMask));
alignmentData.push_back(FIELD_SIZEOF(VkImageMemoryBarrier2, srcStageMask));
alignmentData.push_back(offsetof(VkImageMemoryBarrier2, srcAccessMask));
alignmentData.push_back(FIELD_SIZEOF(VkImageMemoryBarrier2, srcAccessMask));
alignmentData.push_back(offsetof(VkImageMemoryBarrier2, dstStageMask));
alignmentData.push_back(FIELD_SIZEOF(VkImageMemoryBarrier2, dstStageMask));
alignmentData.push_back(offsetof(VkImageMemoryBarrier2, dstAccessMask));
alignmentData.push_back(FIELD_SIZEOF(VkImageMemoryBarrier2, dstAccessMask));
alignmentData.push_back(offsetof(VkImageMemoryBarrier2, oldLayout));
alignmentData.push_back(FIELD_SIZEOF(VkImageMemoryBarrier2, oldLayout));
alignmentData.push_back(offsetof(VkImageMemoryBarrier2, newLayout));
alignmentData.push_back(FIELD_SIZEOF(VkImageMemoryBarrier2, newLayout));
alignmentData.push_back(offsetof(VkImageMemoryBarrier2, srcQueueFamilyIndex));
alignmentData.push_back(FIELD_SIZEOF(VkImageMemoryBarrier2, srcQueueFamilyIndex));
alignmentData.push_back(offsetof(VkImageMemoryBarrier2, dstQueueFamilyIndex));
alignmentData.push_back(FIELD_SIZEOF(VkImageMemoryBarrier2, dstQueueFamilyIndex));
alignmentData.push_back(offsetof(VkImageMemoryBarrier2, image));
alignmentData.push_back(FIELD_SIZEOF(VkImageMemoryBarrier2, image));
alignmentData.push_back(offsetof(VkImageMemoryBarrier2, subresourceRange));
alignmentData.push_back(FIELD_SIZEOF(VkImageMemoryBarrier2, subresourceRange));

alignmentData.push_back(offsetof(VkBufferMemoryBarrier2, sType));
alignmentData.push_back(FIELD_SIZEOF(VkBufferMemoryBarrier2, sType));
alignmentData.push_back(offsetof(VkBufferMemoryBarrier2, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkBufferMemoryBarrier2, pNext));
alignmentData.push_back(offsetof(VkBufferMemoryBarrier2, srcStageMask));
alignmentData.push_back(FIELD_SIZEOF(VkBufferMemoryBarrier2, srcStageMask));
alignmentData.push_back(offsetof(VkBufferMemoryBarrier2, srcAccessMask));
alignmentData.push_back(FIELD_SIZEOF(VkBufferMemoryBarrier2, srcAccessMask));
alignmentData.push_back(offsetof(VkBufferMemoryBarrier2, dstStageMask));
alignmentData.push_back(FIELD_SIZEOF(VkBufferMemoryBarrier2, dstStageMask));
alignmentData.push_back(offsetof(VkBufferMemoryBarrier2, dstAccessMask));
alignmentData.push_back(FIELD_SIZEOF(VkBufferMemoryBarrier2, dstAccessMask));
alignmentData.push_back(offsetof(VkBufferMemoryBarrier2, srcQueueFamilyIndex));
alignmentData.push_back(FIELD_SIZEOF(VkBufferMemoryBarrier2, srcQueueFamilyIndex));
alignmentData.push_back(offsetof(VkBufferMemoryBarrier2, dstQueueFamilyIndex));
alignmentData.push_back(FIELD_SIZEOF(VkBufferMemoryBarrier2, dstQueueFamilyIndex));
alignmentData.push_back(offsetof(VkBufferMemoryBarrier2, buffer));
alignmentData.push_back(FIELD_SIZEOF(VkBufferMemoryBarrier2, buffer));
alignmentData.push_back(offsetof(VkBufferMemoryBarrier2, offset));
alignmentData.push_back(FIELD_SIZEOF(VkBufferMemoryBarrier2, offset));
alignmentData.push_back(offsetof(VkBufferMemoryBarrier2, size));
alignmentData.push_back(FIELD_SIZEOF(VkBufferMemoryBarrier2, size));

alignmentData.push_back(offsetof(VkDependencyInfo, sType));
alignmentData.push_back(FIELD_SIZEOF(VkDependencyInfo, sType));
alignmentData.push_back(offsetof(VkDependencyInfo, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkDependencyInfo, pNext));
alignmentData.push_back(offsetof(VkDependencyInfo, dependencyFlags));
alignmentData.push_back(FIELD_SIZEOF(VkDependencyInfo, dependencyFlags));
alignmentData.push_back(offsetof(VkDependencyInfo, memoryBarrierCount));
alignmentData.push_back(FIELD_SIZEOF(VkDependencyInfo, memoryBarrierCount));
alignmentData.push_back(offsetof(VkDependencyInfo, pMemoryBarriers));
alignmentData.push_back(FIELD_SIZEOF(VkDependencyInfo, pMemoryBarriers));
alignmentData.push_back(offsetof(VkDependencyInfo, bufferMemoryBarrierCount));
alignmentData.push_back(FIELD_SIZEOF(VkDependencyInfo, bufferMemoryBarrierCount));
alignmentData.push_back(offsetof(VkDependencyInfo, pBufferMemoryBarriers));
alignmentData.push_back(FIELD_SIZEOF(VkDependencyInfo, pBufferMemoryBarriers));
alignmentData.push_back(offsetof(VkDependencyInfo, imageMemoryBarrierCount));
alignmentData.push_back(FIELD_SIZEOF(VkDependencyInfo, imageMemoryBarrierCount));
alignmentData.push_back(offsetof(VkDependencyInfo, pImageMemoryBarriers));
alignmentData.push_back(FIELD_SIZEOF(VkDependencyInfo, pImageMemoryBarriers));

alignmentData.push_back(offsetof(VkSemaphoreSubmitInfo, sType));
alignmentData.push_back(FIELD_SIZEOF(VkSemaphoreSubmitInfo, sType));
alignmentData.push_back(offsetof(VkSemaphoreSubmitInfo, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkSemaphoreSubmitInfo, pNext));
alignmentData.push_back(offsetof(VkSemaphoreSubmitInfo, semaphore));
alignmentData.push_back(FIELD_SIZEOF(VkSemaphoreSubmitInfo, semaphore));
alignmentData.push_back(offsetof(VkSemaphoreSubmitInfo, value));
alignmentData.push_back(FIELD_SIZEOF(VkSemaphoreSubmitInfo, value));
alignmentData.push_back(offsetof(VkSemaphoreSubmitInfo, stageMask));
alignmentData.push_back(FIELD_SIZEOF(VkSemaphoreSubmitInfo, stageMask));
alignmentData.push_back(offsetof(VkSemaphoreSubmitInfo, deviceIndex));
alignmentData.push_back(FIELD_SIZEOF(VkSemaphoreSubmitInfo, deviceIndex));

alignmentData.push_back(offsetof(VkCommandBufferSubmitInfo, sType));
alignmentData.push_back(FIELD_SIZEOF(VkCommandBufferSubmitInfo, sType));
alignmentData.push_back(offsetof(VkCommandBufferSubmitInfo, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkCommandBufferSubmitInfo, pNext));
alignmentData.push_back(offsetof(VkCommandBufferSubmitInfo, commandBuffer));
alignmentData.push_back(FIELD_SIZEOF(VkCommandBufferSubmitInfo, commandBuffer));
alignmentData.push_back(offsetof(VkCommandBufferSubmitInfo, deviceMask));
alignmentData.push_back(FIELD_SIZEOF(VkCommandBufferSubmitInfo, deviceMask));

alignmentData.push_back(offsetof(VkSubmitInfo2, sType));
alignmentData.push_back(FIELD_SIZEOF(VkSubmitInfo2, sType));
alignmentData.push_back(offsetof(VkSubmitInfo2, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkSubmitInfo2, pNext));
alignmentData.push_back(offsetof(VkSubmitInfo2, flags));
alignmentData.push_back(FIELD_SIZEOF(VkSubmitInfo2, flags));
alignmentData.push_back(offsetof(VkSubmitInfo2, waitSemaphoreInfoCount));
alignmentData.push_back(FIELD_SIZEOF(VkSubmitInfo2, waitSemaphoreInfoCount));
alignmentData.push_back(offsetof(VkSubmitInfo2, pWaitSemaphoreInfos));
alignmentData.push_back(FIELD_SIZEOF(VkSubmitInfo2, pWaitSemaphoreInfos));
alignmentData.push_back(offsetof(VkSubmitInfo2, commandBufferInfoCount));
alignmentData.push_back(FIELD_SIZEOF(VkSubmitInfo2, commandBufferInfoCount));
alignmentData.push_back(offsetof(VkSubmitInfo2, pCommandBufferInfos));
alignmentData.push_back(FIELD_SIZEOF(VkSubmitInfo2, pCommandBufferInfos));
alignmentData.push_back(offsetof(VkSubmitInfo2, signalSemaphoreInfoCount));
alignmentData.push_back(FIELD_SIZEOF(VkSubmitInfo2, signalSemaphoreInfoCount));
alignmentData.push_back(offsetof(VkSubmitInfo2, pSignalSemaphoreInfos));
alignmentData.push_back(FIELD_SIZEOF(VkSubmitInfo2, pSignalSemaphoreInfos));

alignmentData.push_back(offsetof(VkQueueFamilyCheckpointProperties2NV, sType));
alignmentData.push_back(FIELD_SIZEOF(VkQueueFamilyCheckpointProperties2NV, sType));
alignmentData.push_back(offsetof(VkQueueFamilyCheckpointProperties2NV, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkQueueFamilyCheckpointProperties2NV, pNext));
alignmentData.push_back(offsetof(VkQueueFamilyCheckpointProperties2NV, checkpointExecutionStageMask));
alignmentData.push_back(FIELD_SIZEOF(VkQueueFamilyCheckpointProperties2NV, checkpointExecutionStageMask));
alignmentData.push_back(offsetof(VkCheckpointData2NV, sType));
alignmentData.push_back(FIELD_SIZEOF(VkCheckpointData2NV, sType));
alignmentData.push_back(offsetof(VkCheckpointData2NV, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkCheckpointData2NV, pNext));
alignmentData.push_back(offsetof(VkCheckpointData2NV, stage));
alignmentData.push_back(FIELD_SIZEOF(VkCheckpointData2NV, stage));
alignmentData.push_back(offsetof(VkCheckpointData2NV, pCheckpointMarker));
alignmentData.push_back(FIELD_SIZEOF(VkCheckpointData2NV, pCheckpointMarker));
alignmentData.push_back(offsetof(VkPhysicalDeviceSynchronization2Features, sType));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceSynchronization2Features, sType));
alignmentData.push_back(offsetof(VkPhysicalDeviceSynchronization2Features, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceSynchronization2Features, pNext));
alignmentData.push_back(offsetof(VkPhysicalDeviceSynchronization2Features, synchronization2));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceSynchronization2Features, synchronization2));

alignmentData.push_back(offsetof(VkPhysicalDevicePrimitivesGeneratedQueryFeaturesEXT, sType));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDevicePrimitivesGeneratedQueryFeaturesEXT, sType));
alignmentData.push_back(offsetof(VkPhysicalDevicePrimitivesGeneratedQueryFeaturesEXT, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDevicePrimitivesGeneratedQueryFeaturesEXT, pNext));
alignmentData.push_back(offsetof(VkPhysicalDevicePrimitivesGeneratedQueryFeaturesEXT, primitivesGeneratedQuery));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDevicePrimitivesGeneratedQueryFeaturesEXT, primitivesGeneratedQuery));
alignmentData.push_back(offsetof(VkPhysicalDevicePrimitivesGeneratedQueryFeaturesEXT, primitivesGeneratedQueryWithRasterizerDiscard));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDevicePrimitivesGeneratedQueryFeaturesEXT, primitivesGeneratedQueryWithRasterizerDiscard));
alignmentData.push_back(offsetof(VkPhysicalDevicePrimitivesGeneratedQueryFeaturesEXT, primitivesGeneratedQueryWithNonZeroStreams));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDevicePrimitivesGeneratedQueryFeaturesEXT, primitivesGeneratedQueryWithNonZeroStreams));
alignmentData.push_back(offsetof(VkPhysicalDeviceLegacyDitheringFeaturesEXT, sType));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceLegacyDitheringFeaturesEXT, sType));
alignmentData.push_back(offsetof(VkPhysicalDeviceLegacyDitheringFeaturesEXT, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceLegacyDitheringFeaturesEXT, pNext));
alignmentData.push_back(offsetof(VkPhysicalDeviceLegacyDitheringFeaturesEXT, legacyDithering));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceLegacyDitheringFeaturesEXT, legacyDithering));
alignmentData.push_back(offsetof(VkPhysicalDeviceMultisampledRenderToSingleSampledFeaturesEXT, sType));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceMultisampledRenderToSingleSampledFeaturesEXT, sType));
alignmentData.push_back(offsetof(VkPhysicalDeviceMultisampledRenderToSingleSampledFeaturesEXT, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceMultisampledRenderToSingleSampledFeaturesEXT, pNext));
alignmentData.push_back(offsetof(VkPhysicalDeviceMultisampledRenderToSingleSampledFeaturesEXT, multisampledRenderToSingleSampled));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceMultisampledRenderToSingleSampledFeaturesEXT, multisampledRenderToSingleSampled));
alignmentData.push_back(offsetof(VkSubpassResolvePerformanceQueryEXT, sType));
alignmentData.push_back(FIELD_SIZEOF(VkSubpassResolvePerformanceQueryEXT, sType));
alignmentData.push_back(offsetof(VkSubpassResolvePerformanceQueryEXT, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkSubpassResolvePerformanceQueryEXT, pNext));
alignmentData.push_back(offsetof(VkSubpassResolvePerformanceQueryEXT, optimal));
alignmentData.push_back(FIELD_SIZEOF(VkSubpassResolvePerformanceQueryEXT, optimal));
alignmentData.push_back(offsetof(VkMultisampledRenderToSingleSampledInfoEXT, sType));
alignmentData.push_back(FIELD_SIZEOF(VkMultisampledRenderToSingleSampledInfoEXT, sType));
alignmentData.push_back(offsetof(VkMultisampledRenderToSingleSampledInfoEXT, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkMultisampledRenderToSingleSampledInfoEXT, pNext));
alignmentData.push_back(offsetof(VkMultisampledRenderToSingleSampledInfoEXT, multisampledRenderToSingleSampledEnable));
alignmentData.push_back(FIELD_SIZEOF(VkMultisampledRenderToSingleSampledInfoEXT, multisampledRenderToSingleSampledEnable));
alignmentData.push_back(offsetof(VkMultisampledRenderToSingleSampledInfoEXT, rasterizationSamples));
alignmentData.push_back(FIELD_SIZEOF(VkMultisampledRenderToSingleSampledInfoEXT, rasterizationSamples));
alignmentData.push_back(offsetof(VkPhysicalDevicePipelineProtectedAccessFeaturesEXT, sType));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDevicePipelineProtectedAccessFeaturesEXT, sType));
alignmentData.push_back(offsetof(VkPhysicalDevicePipelineProtectedAccessFeaturesEXT, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDevicePipelineProtectedAccessFeaturesEXT, pNext));
alignmentData.push_back(offsetof(VkPhysicalDevicePipelineProtectedAccessFeaturesEXT, pipelineProtectedAccess));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDevicePipelineProtectedAccessFeaturesEXT, pipelineProtectedAccess));
alignmentData.push_back(offsetof(VkQueueFamilyVideoPropertiesKHR, sType));
alignmentData.push_back(FIELD_SIZEOF(VkQueueFamilyVideoPropertiesKHR, sType));
alignmentData.push_back(offsetof(VkQueueFamilyVideoPropertiesKHR, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkQueueFamilyVideoPropertiesKHR, pNext));
alignmentData.push_back(offsetof(VkQueueFamilyVideoPropertiesKHR, videoCodecOperations));
alignmentData.push_back(FIELD_SIZEOF(VkQueueFamilyVideoPropertiesKHR, videoCodecOperations));
alignmentData.push_back(offsetof(VkQueueFamilyQueryResultStatusPropertiesKHR, sType));
alignmentData.push_back(FIELD_SIZEOF(VkQueueFamilyQueryResultStatusPropertiesKHR, sType));
alignmentData.push_back(offsetof(VkQueueFamilyQueryResultStatusPropertiesKHR, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkQueueFamilyQueryResultStatusPropertiesKHR, pNext));
alignmentData.push_back(offsetof(VkQueueFamilyQueryResultStatusPropertiesKHR, queryResultStatusSupport));
alignmentData.push_back(FIELD_SIZEOF(VkQueueFamilyQueryResultStatusPropertiesKHR, queryResultStatusSupport));
alignmentData.push_back(offsetof(VkVideoProfileListInfoKHR, sType));
alignmentData.push_back(FIELD_SIZEOF(VkVideoProfileListInfoKHR, sType));
alignmentData.push_back(offsetof(VkVideoProfileListInfoKHR, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkVideoProfileListInfoKHR, pNext));
alignmentData.push_back(offsetof(VkVideoProfileListInfoKHR, profileCount));
alignmentData.push_back(FIELD_SIZEOF(VkVideoProfileListInfoKHR, profileCount));
alignmentData.push_back(offsetof(VkVideoProfileListInfoKHR, pProfiles));
alignmentData.push_back(FIELD_SIZEOF(VkVideoProfileListInfoKHR, pProfiles));
alignmentData.push_back(offsetof(VkPhysicalDeviceVideoFormatInfoKHR, sType));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceVideoFormatInfoKHR, sType));
alignmentData.push_back(offsetof(VkPhysicalDeviceVideoFormatInfoKHR, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceVideoFormatInfoKHR, pNext));
alignmentData.push_back(offsetof(VkPhysicalDeviceVideoFormatInfoKHR, imageUsage));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceVideoFormatInfoKHR, imageUsage));
alignmentData.push_back(offsetof(VkVideoFormatPropertiesKHR, sType));
alignmentData.push_back(FIELD_SIZEOF(VkVideoFormatPropertiesKHR, sType));
alignmentData.push_back(offsetof(VkVideoFormatPropertiesKHR, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkVideoFormatPropertiesKHR, pNext));
alignmentData.push_back(offsetof(VkVideoFormatPropertiesKHR, format));
alignmentData.push_back(FIELD_SIZEOF(VkVideoFormatPropertiesKHR, format));
alignmentData.push_back(offsetof(VkVideoFormatPropertiesKHR, componentMapping));
alignmentData.push_back(FIELD_SIZEOF(VkVideoFormatPropertiesKHR, componentMapping));
alignmentData.push_back(offsetof(VkVideoFormatPropertiesKHR, imageCreateFlags));
alignmentData.push_back(FIELD_SIZEOF(VkVideoFormatPropertiesKHR, imageCreateFlags));
alignmentData.push_back(offsetof(VkVideoFormatPropertiesKHR, imageType));
alignmentData.push_back(FIELD_SIZEOF(VkVideoFormatPropertiesKHR, imageType));
alignmentData.push_back(offsetof(VkVideoFormatPropertiesKHR, imageTiling));
alignmentData.push_back(FIELD_SIZEOF(VkVideoFormatPropertiesKHR, imageTiling));
alignmentData.push_back(offsetof(VkVideoFormatPropertiesKHR, imageUsageFlags));
alignmentData.push_back(FIELD_SIZEOF(VkVideoFormatPropertiesKHR, imageUsageFlags));
alignmentData.push_back(offsetof(VkVideoProfileInfoKHR, sType));
alignmentData.push_back(FIELD_SIZEOF(VkVideoProfileInfoKHR, sType));
alignmentData.push_back(offsetof(VkVideoProfileInfoKHR, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkVideoProfileInfoKHR, pNext));
alignmentData.push_back(offsetof(VkVideoProfileInfoKHR, videoCodecOperation));
alignmentData.push_back(FIELD_SIZEOF(VkVideoProfileInfoKHR, videoCodecOperation));
alignmentData.push_back(offsetof(VkVideoProfileInfoKHR, chromaSubsampling));
alignmentData.push_back(FIELD_SIZEOF(VkVideoProfileInfoKHR, chromaSubsampling));
alignmentData.push_back(offsetof(VkVideoProfileInfoKHR, lumaBitDepth));
alignmentData.push_back(FIELD_SIZEOF(VkVideoProfileInfoKHR, lumaBitDepth));
alignmentData.push_back(offsetof(VkVideoProfileInfoKHR, chromaBitDepth));
alignmentData.push_back(FIELD_SIZEOF(VkVideoProfileInfoKHR, chromaBitDepth));
alignmentData.push_back(offsetof(VkVideoCapabilitiesKHR, sType));
alignmentData.push_back(FIELD_SIZEOF(VkVideoCapabilitiesKHR, sType));
alignmentData.push_back(offsetof(VkVideoCapabilitiesKHR, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkVideoCapabilitiesKHR, pNext));
alignmentData.push_back(offsetof(VkVideoCapabilitiesKHR, flags));
alignmentData.push_back(FIELD_SIZEOF(VkVideoCapabilitiesKHR, flags));
alignmentData.push_back(offsetof(VkVideoCapabilitiesKHR, minBitstreamBufferOffsetAlignment));
alignmentData.push_back(FIELD_SIZEOF(VkVideoCapabilitiesKHR, minBitstreamBufferOffsetAlignment));
alignmentData.push_back(offsetof(VkVideoCapabilitiesKHR, minBitstreamBufferSizeAlignment));
alignmentData.push_back(FIELD_SIZEOF(VkVideoCapabilitiesKHR, minBitstreamBufferSizeAlignment));
alignmentData.push_back(offsetof(VkVideoCapabilitiesKHR, pictureAccessGranularity));
alignmentData.push_back(FIELD_SIZEOF(VkVideoCapabilitiesKHR, pictureAccessGranularity));
alignmentData.push_back(offsetof(VkVideoCapabilitiesKHR, minCodedExtent));
alignmentData.push_back(FIELD_SIZEOF(VkVideoCapabilitiesKHR, minCodedExtent));
alignmentData.push_back(offsetof(VkVideoCapabilitiesKHR, maxCodedExtent));
alignmentData.push_back(FIELD_SIZEOF(VkVideoCapabilitiesKHR, maxCodedExtent));
alignmentData.push_back(offsetof(VkVideoCapabilitiesKHR, maxDpbSlots));
alignmentData.push_back(FIELD_SIZEOF(VkVideoCapabilitiesKHR, maxDpbSlots));
alignmentData.push_back(offsetof(VkVideoCapabilitiesKHR, maxActiveReferencePictures));
alignmentData.push_back(FIELD_SIZEOF(VkVideoCapabilitiesKHR, maxActiveReferencePictures));
alignmentData.push_back(offsetof(VkVideoCapabilitiesKHR, stdHeaderVersion));
alignmentData.push_back(FIELD_SIZEOF(VkVideoCapabilitiesKHR, stdHeaderVersion));
alignmentData.push_back(offsetof(VkVideoSessionMemoryRequirementsKHR, sType));
alignmentData.push_back(FIELD_SIZEOF(VkVideoSessionMemoryRequirementsKHR, sType));
alignmentData.push_back(offsetof(VkVideoSessionMemoryRequirementsKHR, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkVideoSessionMemoryRequirementsKHR, pNext));
alignmentData.push_back(offsetof(VkVideoSessionMemoryRequirementsKHR, memoryBindIndex));
alignmentData.push_back(FIELD_SIZEOF(VkVideoSessionMemoryRequirementsKHR, memoryBindIndex));
alignmentData.push_back(offsetof(VkVideoSessionMemoryRequirementsKHR, memoryRequirements));
alignmentData.push_back(FIELD_SIZEOF(VkVideoSessionMemoryRequirementsKHR, memoryRequirements));
alignmentData.push_back(offsetof(VkBindVideoSessionMemoryInfoKHR, sType));
alignmentData.push_back(FIELD_SIZEOF(VkBindVideoSessionMemoryInfoKHR, sType));
alignmentData.push_back(offsetof(VkBindVideoSessionMemoryInfoKHR, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkBindVideoSessionMemoryInfoKHR, pNext));
alignmentData.push_back(offsetof(VkBindVideoSessionMemoryInfoKHR, memoryBindIndex));
alignmentData.push_back(FIELD_SIZEOF(VkBindVideoSessionMemoryInfoKHR, memoryBindIndex));
alignmentData.push_back(offsetof(VkBindVideoSessionMemoryInfoKHR, memory));
alignmentData.push_back(FIELD_SIZEOF(VkBindVideoSessionMemoryInfoKHR, memory));
alignmentData.push_back(offsetof(VkBindVideoSessionMemoryInfoKHR, memoryOffset));
alignmentData.push_back(FIELD_SIZEOF(VkBindVideoSessionMemoryInfoKHR, memoryOffset));
alignmentData.push_back(offsetof(VkBindVideoSessionMemoryInfoKHR, memorySize));
alignmentData.push_back(FIELD_SIZEOF(VkBindVideoSessionMemoryInfoKHR, memorySize));
alignmentData.push_back(offsetof(VkVideoPictureResourceInfoKHR, sType));
alignmentData.push_back(FIELD_SIZEOF(VkVideoPictureResourceInfoKHR, sType));
alignmentData.push_back(offsetof(VkVideoPictureResourceInfoKHR, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkVideoPictureResourceInfoKHR, pNext));
alignmentData.push_back(offsetof(VkVideoPictureResourceInfoKHR, codedOffset));
alignmentData.push_back(FIELD_SIZEOF(VkVideoPictureResourceInfoKHR, codedOffset));
alignmentData.push_back(offsetof(VkVideoPictureResourceInfoKHR, codedExtent));
alignmentData.push_back(FIELD_SIZEOF(VkVideoPictureResourceInfoKHR, codedExtent));
alignmentData.push_back(offsetof(VkVideoPictureResourceInfoKHR, baseArrayLayer));
alignmentData.push_back(FIELD_SIZEOF(VkVideoPictureResourceInfoKHR, baseArrayLayer));
alignmentData.push_back(offsetof(VkVideoPictureResourceInfoKHR, imageViewBinding));
alignmentData.push_back(FIELD_SIZEOF(VkVideoPictureResourceInfoKHR, imageViewBinding));
alignmentData.push_back(offsetof(VkVideoReferenceSlotInfoKHR, sType));
alignmentData.push_back(FIELD_SIZEOF(VkVideoReferenceSlotInfoKHR, sType));
alignmentData.push_back(offsetof(VkVideoReferenceSlotInfoKHR, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkVideoReferenceSlotInfoKHR, pNext));
alignmentData.push_back(offsetof(VkVideoReferenceSlotInfoKHR, slotIndex));
alignmentData.push_back(FIELD_SIZEOF(VkVideoReferenceSlotInfoKHR, slotIndex));
alignmentData.push_back(offsetof(VkVideoReferenceSlotInfoKHR, pPictureResource));
alignmentData.push_back(FIELD_SIZEOF(VkVideoReferenceSlotInfoKHR, pPictureResource));
alignmentData.push_back(offsetof(VkVideoSessionCreateInfoKHR, sType));
alignmentData.push_back(FIELD_SIZEOF(VkVideoSessionCreateInfoKHR, sType));
alignmentData.push_back(offsetof(VkVideoSessionCreateInfoKHR, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkVideoSessionCreateInfoKHR, pNext));
alignmentData.push_back(offsetof(VkVideoSessionCreateInfoKHR, queueFamilyIndex));
alignmentData.push_back(FIELD_SIZEOF(VkVideoSessionCreateInfoKHR, queueFamilyIndex));
alignmentData.push_back(offsetof(VkVideoSessionCreateInfoKHR, flags));
alignmentData.push_back(FIELD_SIZEOF(VkVideoSessionCreateInfoKHR, flags));
alignmentData.push_back(offsetof(VkVideoSessionCreateInfoKHR, pVideoProfile));
alignmentData.push_back(FIELD_SIZEOF(VkVideoSessionCreateInfoKHR, pVideoProfile));
alignmentData.push_back(offsetof(VkVideoSessionCreateInfoKHR, pictureFormat));
alignmentData.push_back(FIELD_SIZEOF(VkVideoSessionCreateInfoKHR, pictureFormat));
alignmentData.push_back(offsetof(VkVideoSessionCreateInfoKHR, maxCodedExtent));
alignmentData.push_back(FIELD_SIZEOF(VkVideoSessionCreateInfoKHR, maxCodedExtent));
alignmentData.push_back(offsetof(VkVideoSessionCreateInfoKHR, referencePictureFormat));
alignmentData.push_back(FIELD_SIZEOF(VkVideoSessionCreateInfoKHR, referencePictureFormat));
alignmentData.push_back(offsetof(VkVideoSessionCreateInfoKHR, maxDpbSlots));
alignmentData.push_back(FIELD_SIZEOF(VkVideoSessionCreateInfoKHR, maxDpbSlots));
alignmentData.push_back(offsetof(VkVideoSessionCreateInfoKHR, maxActiveReferencePictures));
alignmentData.push_back(FIELD_SIZEOF(VkVideoSessionCreateInfoKHR, maxActiveReferencePictures));
alignmentData.push_back(offsetof(VkVideoSessionCreateInfoKHR, pStdHeaderVersion));
alignmentData.push_back(FIELD_SIZEOF(VkVideoSessionCreateInfoKHR, pStdHeaderVersion));
alignmentData.push_back(offsetof(VkVideoSessionParametersCreateInfoKHR, sType));
alignmentData.push_back(FIELD_SIZEOF(VkVideoSessionParametersCreateInfoKHR, sType));
alignmentData.push_back(offsetof(VkVideoSessionParametersCreateInfoKHR, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkVideoSessionParametersCreateInfoKHR, pNext));
alignmentData.push_back(offsetof(VkVideoSessionParametersCreateInfoKHR, flags));
alignmentData.push_back(FIELD_SIZEOF(VkVideoSessionParametersCreateInfoKHR, flags));
alignmentData.push_back(offsetof(VkVideoSessionParametersCreateInfoKHR, videoSessionParametersTemplate));
alignmentData.push_back(FIELD_SIZEOF(VkVideoSessionParametersCreateInfoKHR, videoSessionParametersTemplate));
alignmentData.push_back(offsetof(VkVideoSessionParametersCreateInfoKHR, videoSession));
alignmentData.push_back(FIELD_SIZEOF(VkVideoSessionParametersCreateInfoKHR, videoSession));
alignmentData.push_back(offsetof(VkVideoSessionParametersUpdateInfoKHR, sType));
alignmentData.push_back(FIELD_SIZEOF(VkVideoSessionParametersUpdateInfoKHR, sType));
alignmentData.push_back(offsetof(VkVideoSessionParametersUpdateInfoKHR, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkVideoSessionParametersUpdateInfoKHR, pNext));
alignmentData.push_back(offsetof(VkVideoSessionParametersUpdateInfoKHR, updateSequenceCount));
alignmentData.push_back(FIELD_SIZEOF(VkVideoSessionParametersUpdateInfoKHR, updateSequenceCount));
alignmentData.push_back(offsetof(VkVideoBeginCodingInfoKHR, sType));
alignmentData.push_back(FIELD_SIZEOF(VkVideoBeginCodingInfoKHR, sType));
alignmentData.push_back(offsetof(VkVideoBeginCodingInfoKHR, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkVideoBeginCodingInfoKHR, pNext));
alignmentData.push_back(offsetof(VkVideoBeginCodingInfoKHR, flags));
alignmentData.push_back(FIELD_SIZEOF(VkVideoBeginCodingInfoKHR, flags));
alignmentData.push_back(offsetof(VkVideoBeginCodingInfoKHR, videoSession));
alignmentData.push_back(FIELD_SIZEOF(VkVideoBeginCodingInfoKHR, videoSession));
alignmentData.push_back(offsetof(VkVideoBeginCodingInfoKHR, videoSessionParameters));
alignmentData.push_back(FIELD_SIZEOF(VkVideoBeginCodingInfoKHR, videoSessionParameters));
alignmentData.push_back(offsetof(VkVideoBeginCodingInfoKHR, referenceSlotCount));
alignmentData.push_back(FIELD_SIZEOF(VkVideoBeginCodingInfoKHR, referenceSlotCount));
alignmentData.push_back(offsetof(VkVideoBeginCodingInfoKHR, pReferenceSlots));
alignmentData.push_back(FIELD_SIZEOF(VkVideoBeginCodingInfoKHR, pReferenceSlots));
alignmentData.push_back(offsetof(VkVideoEndCodingInfoKHR, sType));
alignmentData.push_back(FIELD_SIZEOF(VkVideoEndCodingInfoKHR, sType));
alignmentData.push_back(offsetof(VkVideoEndCodingInfoKHR, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkVideoEndCodingInfoKHR, pNext));
alignmentData.push_back(offsetof(VkVideoEndCodingInfoKHR, flags));
alignmentData.push_back(FIELD_SIZEOF(VkVideoEndCodingInfoKHR, flags));
alignmentData.push_back(offsetof(VkVideoCodingControlInfoKHR, sType));
alignmentData.push_back(FIELD_SIZEOF(VkVideoCodingControlInfoKHR, sType));
alignmentData.push_back(offsetof(VkVideoCodingControlInfoKHR, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkVideoCodingControlInfoKHR, pNext));
alignmentData.push_back(offsetof(VkVideoCodingControlInfoKHR, flags));
alignmentData.push_back(FIELD_SIZEOF(VkVideoCodingControlInfoKHR, flags));
alignmentData.push_back(offsetof(VkPhysicalDeviceYcbcr2Plane444FormatsFeaturesEXT, sType));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceYcbcr2Plane444FormatsFeaturesEXT, sType));
alignmentData.push_back(offsetof(VkPhysicalDeviceYcbcr2Plane444FormatsFeaturesEXT, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceYcbcr2Plane444FormatsFeaturesEXT, pNext));
alignmentData.push_back(offsetof(VkPhysicalDeviceYcbcr2Plane444FormatsFeaturesEXT, ycbcr2plane444Formats));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceYcbcr2Plane444FormatsFeaturesEXT, ycbcr2plane444Formats));
alignmentData.push_back(offsetof(VkPhysicalDeviceProvokingVertexFeaturesEXT, sType));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceProvokingVertexFeaturesEXT, sType));
alignmentData.push_back(offsetof(VkPhysicalDeviceProvokingVertexFeaturesEXT, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceProvokingVertexFeaturesEXT, pNext));
alignmentData.push_back(offsetof(VkPhysicalDeviceProvokingVertexFeaturesEXT, provokingVertexLast));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceProvokingVertexFeaturesEXT, provokingVertexLast));
alignmentData.push_back(offsetof(VkPhysicalDeviceProvokingVertexFeaturesEXT, transformFeedbackPreservesProvokingVertex));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceProvokingVertexFeaturesEXT, transformFeedbackPreservesProvokingVertex));
alignmentData.push_back(offsetof(VkPhysicalDeviceProvokingVertexPropertiesEXT, sType));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceProvokingVertexPropertiesEXT, sType));
alignmentData.push_back(offsetof(VkPhysicalDeviceProvokingVertexPropertiesEXT, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceProvokingVertexPropertiesEXT, pNext));
alignmentData.push_back(offsetof(VkPhysicalDeviceProvokingVertexPropertiesEXT, provokingVertexModePerPipeline));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceProvokingVertexPropertiesEXT, provokingVertexModePerPipeline));
alignmentData.push_back(offsetof(VkPhysicalDeviceProvokingVertexPropertiesEXT, transformFeedbackPreservesTriangleFanProvokingVertex));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceProvokingVertexPropertiesEXT, transformFeedbackPreservesTriangleFanProvokingVertex));
alignmentData.push_back(offsetof(VkPipelineRasterizationProvokingVertexStateCreateInfoEXT, sType));
alignmentData.push_back(FIELD_SIZEOF(VkPipelineRasterizationProvokingVertexStateCreateInfoEXT, sType));
alignmentData.push_back(offsetof(VkPipelineRasterizationProvokingVertexStateCreateInfoEXT, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkPipelineRasterizationProvokingVertexStateCreateInfoEXT, pNext));
alignmentData.push_back(offsetof(VkPipelineRasterizationProvokingVertexStateCreateInfoEXT, provokingVertexMode));
alignmentData.push_back(FIELD_SIZEOF(VkPipelineRasterizationProvokingVertexStateCreateInfoEXT, provokingVertexMode));
alignmentData.push_back(offsetof(VkPhysicalDeviceShaderIntegerDotProductFeatures, sType));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceShaderIntegerDotProductFeatures, sType));
alignmentData.push_back(offsetof(VkPhysicalDeviceShaderIntegerDotProductFeatures, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceShaderIntegerDotProductFeatures, pNext));
alignmentData.push_back(offsetof(VkPhysicalDeviceShaderIntegerDotProductFeatures, shaderIntegerDotProduct));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceShaderIntegerDotProductFeatures, shaderIntegerDotProduct));

alignmentData.push_back(offsetof(VkPhysicalDeviceShaderIntegerDotProductProperties, sType));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceShaderIntegerDotProductProperties, sType));
alignmentData.push_back(offsetof(VkPhysicalDeviceShaderIntegerDotProductProperties, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceShaderIntegerDotProductProperties, pNext));
alignmentData.push_back(offsetof(VkPhysicalDeviceShaderIntegerDotProductProperties, integerDotProduct8BitUnsignedAccelerated));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceShaderIntegerDotProductProperties, integerDotProduct8BitUnsignedAccelerated));
alignmentData.push_back(offsetof(VkPhysicalDeviceShaderIntegerDotProductProperties, integerDotProduct8BitSignedAccelerated));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceShaderIntegerDotProductProperties, integerDotProduct8BitSignedAccelerated));
alignmentData.push_back(offsetof(VkPhysicalDeviceShaderIntegerDotProductProperties, integerDotProduct8BitMixedSignednessAccelerated));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceShaderIntegerDotProductProperties, integerDotProduct8BitMixedSignednessAccelerated));
alignmentData.push_back(offsetof(VkPhysicalDeviceShaderIntegerDotProductProperties, integerDotProduct4x8BitPackedUnsignedAccelerated));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceShaderIntegerDotProductProperties, integerDotProduct4x8BitPackedUnsignedAccelerated));
alignmentData.push_back(offsetof(VkPhysicalDeviceShaderIntegerDotProductProperties, integerDotProduct4x8BitPackedSignedAccelerated));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceShaderIntegerDotProductProperties, integerDotProduct4x8BitPackedSignedAccelerated));
alignmentData.push_back(offsetof(VkPhysicalDeviceShaderIntegerDotProductProperties, integerDotProduct4x8BitPackedMixedSignednessAccelerated));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceShaderIntegerDotProductProperties, integerDotProduct4x8BitPackedMixedSignednessAccelerated));
alignmentData.push_back(offsetof(VkPhysicalDeviceShaderIntegerDotProductProperties, integerDotProduct16BitUnsignedAccelerated));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceShaderIntegerDotProductProperties, integerDotProduct16BitUnsignedAccelerated));
alignmentData.push_back(offsetof(VkPhysicalDeviceShaderIntegerDotProductProperties, integerDotProduct16BitSignedAccelerated));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceShaderIntegerDotProductProperties, integerDotProduct16BitSignedAccelerated));
alignmentData.push_back(offsetof(VkPhysicalDeviceShaderIntegerDotProductProperties, integerDotProduct16BitMixedSignednessAccelerated));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceShaderIntegerDotProductProperties, integerDotProduct16BitMixedSignednessAccelerated));
alignmentData.push_back(offsetof(VkPhysicalDeviceShaderIntegerDotProductProperties, integerDotProduct32BitUnsignedAccelerated));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceShaderIntegerDotProductProperties, integerDotProduct32BitUnsignedAccelerated));
alignmentData.push_back(offsetof(VkPhysicalDeviceShaderIntegerDotProductProperties, integerDotProduct32BitSignedAccelerated));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceShaderIntegerDotProductProperties, integerDotProduct32BitSignedAccelerated));
alignmentData.push_back(offsetof(VkPhysicalDeviceShaderIntegerDotProductProperties, integerDotProduct32BitMixedSignednessAccelerated));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceShaderIntegerDotProductProperties, integerDotProduct32BitMixedSignednessAccelerated));
alignmentData.push_back(offsetof(VkPhysicalDeviceShaderIntegerDotProductProperties, integerDotProduct64BitUnsignedAccelerated));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceShaderIntegerDotProductProperties, integerDotProduct64BitUnsignedAccelerated));
alignmentData.push_back(offsetof(VkPhysicalDeviceShaderIntegerDotProductProperties, integerDotProduct64BitSignedAccelerated));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceShaderIntegerDotProductProperties, integerDotProduct64BitSignedAccelerated));
alignmentData.push_back(offsetof(VkPhysicalDeviceShaderIntegerDotProductProperties, integerDotProduct64BitMixedSignednessAccelerated));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceShaderIntegerDotProductProperties, integerDotProduct64BitMixedSignednessAccelerated));
alignmentData.push_back(offsetof(VkPhysicalDeviceShaderIntegerDotProductProperties, integerDotProductAccumulatingSaturating8BitUnsignedAccelerated));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceShaderIntegerDotProductProperties, integerDotProductAccumulatingSaturating8BitUnsignedAccelerated));
alignmentData.push_back(offsetof(VkPhysicalDeviceShaderIntegerDotProductProperties, integerDotProductAccumulatingSaturating8BitSignedAccelerated));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceShaderIntegerDotProductProperties, integerDotProductAccumulatingSaturating8BitSignedAccelerated));
alignmentData.push_back(offsetof(VkPhysicalDeviceShaderIntegerDotProductProperties, integerDotProductAccumulatingSaturating8BitMixedSignednessAccelerated));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceShaderIntegerDotProductProperties, integerDotProductAccumulatingSaturating8BitMixedSignednessAccelerated));
alignmentData.push_back(offsetof(VkPhysicalDeviceShaderIntegerDotProductProperties, integerDotProductAccumulatingSaturating4x8BitPackedUnsignedAccelerated));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceShaderIntegerDotProductProperties, integerDotProductAccumulatingSaturating4x8BitPackedUnsignedAccelerated));
alignmentData.push_back(offsetof(VkPhysicalDeviceShaderIntegerDotProductProperties, integerDotProductAccumulatingSaturating4x8BitPackedSignedAccelerated));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceShaderIntegerDotProductProperties, integerDotProductAccumulatingSaturating4x8BitPackedSignedAccelerated));
alignmentData.push_back(offsetof(VkPhysicalDeviceShaderIntegerDotProductProperties, integerDotProductAccumulatingSaturating4x8BitPackedMixedSignednessAccelerated));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceShaderIntegerDotProductProperties, integerDotProductAccumulatingSaturating4x8BitPackedMixedSignednessAccelerated));
alignmentData.push_back(offsetof(VkPhysicalDeviceShaderIntegerDotProductProperties, integerDotProductAccumulatingSaturating16BitUnsignedAccelerated));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceShaderIntegerDotProductProperties, integerDotProductAccumulatingSaturating16BitUnsignedAccelerated));
alignmentData.push_back(offsetof(VkPhysicalDeviceShaderIntegerDotProductProperties, integerDotProductAccumulatingSaturating16BitSignedAccelerated));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceShaderIntegerDotProductProperties, integerDotProductAccumulatingSaturating16BitSignedAccelerated));
alignmentData.push_back(offsetof(VkPhysicalDeviceShaderIntegerDotProductProperties, integerDotProductAccumulatingSaturating16BitMixedSignednessAccelerated));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceShaderIntegerDotProductProperties, integerDotProductAccumulatingSaturating16BitMixedSignednessAccelerated));
alignmentData.push_back(offsetof(VkPhysicalDeviceShaderIntegerDotProductProperties, integerDotProductAccumulatingSaturating32BitUnsignedAccelerated));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceShaderIntegerDotProductProperties, integerDotProductAccumulatingSaturating32BitUnsignedAccelerated));
alignmentData.push_back(offsetof(VkPhysicalDeviceShaderIntegerDotProductProperties, integerDotProductAccumulatingSaturating32BitSignedAccelerated));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceShaderIntegerDotProductProperties, integerDotProductAccumulatingSaturating32BitSignedAccelerated));
alignmentData.push_back(offsetof(VkPhysicalDeviceShaderIntegerDotProductProperties, integerDotProductAccumulatingSaturating32BitMixedSignednessAccelerated));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceShaderIntegerDotProductProperties, integerDotProductAccumulatingSaturating32BitMixedSignednessAccelerated));
alignmentData.push_back(offsetof(VkPhysicalDeviceShaderIntegerDotProductProperties, integerDotProductAccumulatingSaturating64BitUnsignedAccelerated));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceShaderIntegerDotProductProperties, integerDotProductAccumulatingSaturating64BitUnsignedAccelerated));
alignmentData.push_back(offsetof(VkPhysicalDeviceShaderIntegerDotProductProperties, integerDotProductAccumulatingSaturating64BitSignedAccelerated));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceShaderIntegerDotProductProperties, integerDotProductAccumulatingSaturating64BitSignedAccelerated));
alignmentData.push_back(offsetof(VkPhysicalDeviceShaderIntegerDotProductProperties, integerDotProductAccumulatingSaturating64BitMixedSignednessAccelerated));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceShaderIntegerDotProductProperties, integerDotProductAccumulatingSaturating64BitMixedSignednessAccelerated));

alignmentData.push_back(offsetof(VkPhysicalDeviceDrmPropertiesEXT, sType));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceDrmPropertiesEXT, sType));
alignmentData.push_back(offsetof(VkPhysicalDeviceDrmPropertiesEXT, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceDrmPropertiesEXT, pNext));
alignmentData.push_back(offsetof(VkPhysicalDeviceDrmPropertiesEXT, hasPrimary));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceDrmPropertiesEXT, hasPrimary));
alignmentData.push_back(offsetof(VkPhysicalDeviceDrmPropertiesEXT, hasRender));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceDrmPropertiesEXT, hasRender));
alignmentData.push_back(offsetof(VkPhysicalDeviceDrmPropertiesEXT, primaryMajor));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceDrmPropertiesEXT, primaryMajor));
alignmentData.push_back(offsetof(VkPhysicalDeviceDrmPropertiesEXT, primaryMinor));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceDrmPropertiesEXT, primaryMinor));
alignmentData.push_back(offsetof(VkPhysicalDeviceDrmPropertiesEXT, renderMajor));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceDrmPropertiesEXT, renderMajor));
alignmentData.push_back(offsetof(VkPhysicalDeviceDrmPropertiesEXT, renderMinor));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceDrmPropertiesEXT, renderMinor));
alignmentData.push_back(offsetof(VkPhysicalDeviceFragmentShaderBarycentricFeaturesKHR, sType));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceFragmentShaderBarycentricFeaturesKHR, sType));
alignmentData.push_back(offsetof(VkPhysicalDeviceFragmentShaderBarycentricFeaturesKHR, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceFragmentShaderBarycentricFeaturesKHR, pNext));
alignmentData.push_back(offsetof(VkPhysicalDeviceFragmentShaderBarycentricFeaturesKHR, fragmentShaderBarycentric));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceFragmentShaderBarycentricFeaturesKHR, fragmentShaderBarycentric));
alignmentData.push_back(offsetof(VkPhysicalDeviceFragmentShaderBarycentricPropertiesKHR, sType));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceFragmentShaderBarycentricPropertiesKHR, sType));
alignmentData.push_back(offsetof(VkPhysicalDeviceFragmentShaderBarycentricPropertiesKHR, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceFragmentShaderBarycentricPropertiesKHR, pNext));
alignmentData.push_back(offsetof(VkPhysicalDeviceFragmentShaderBarycentricPropertiesKHR, triStripVertexOrderIndependentOfProvokingVertex));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceFragmentShaderBarycentricPropertiesKHR, triStripVertexOrderIndependentOfProvokingVertex));
alignmentData.push_back(offsetof(VkPhysicalDeviceRGBA10X6FormatsFeaturesEXT, sType));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceRGBA10X6FormatsFeaturesEXT, sType));
alignmentData.push_back(offsetof(VkPhysicalDeviceRGBA10X6FormatsFeaturesEXT, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceRGBA10X6FormatsFeaturesEXT, pNext));
alignmentData.push_back(offsetof(VkPhysicalDeviceRGBA10X6FormatsFeaturesEXT, formatRgba10x6WithoutYCbCrSampler));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceRGBA10X6FormatsFeaturesEXT, formatRgba10x6WithoutYCbCrSampler));
alignmentData.push_back(offsetof(VkFormatProperties3, sType));
alignmentData.push_back(FIELD_SIZEOF(VkFormatProperties3, sType));
alignmentData.push_back(offsetof(VkFormatProperties3, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkFormatProperties3, pNext));
alignmentData.push_back(offsetof(VkFormatProperties3, linearTilingFeatures));
alignmentData.push_back(FIELD_SIZEOF(VkFormatProperties3, linearTilingFeatures));
alignmentData.push_back(offsetof(VkFormatProperties3, optimalTilingFeatures));
alignmentData.push_back(FIELD_SIZEOF(VkFormatProperties3, optimalTilingFeatures));
alignmentData.push_back(offsetof(VkFormatProperties3, bufferFeatures));
alignmentData.push_back(FIELD_SIZEOF(VkFormatProperties3, bufferFeatures));

alignmentData.push_back(offsetof(VkDrmFormatModifierPropertiesList2EXT, sType));
alignmentData.push_back(FIELD_SIZEOF(VkDrmFormatModifierPropertiesList2EXT, sType));
alignmentData.push_back(offsetof(VkDrmFormatModifierPropertiesList2EXT, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkDrmFormatModifierPropertiesList2EXT, pNext));
alignmentData.push_back(offsetof(VkDrmFormatModifierPropertiesList2EXT, drmFormatModifierCount));
alignmentData.push_back(FIELD_SIZEOF(VkDrmFormatModifierPropertiesList2EXT, drmFormatModifierCount));
alignmentData.push_back(offsetof(VkDrmFormatModifierPropertiesList2EXT, pDrmFormatModifierProperties));
alignmentData.push_back(FIELD_SIZEOF(VkDrmFormatModifierPropertiesList2EXT, pDrmFormatModifierProperties));
alignmentData.push_back(offsetof(VkDrmFormatModifierProperties2EXT, drmFormatModifier));
alignmentData.push_back(FIELD_SIZEOF(VkDrmFormatModifierProperties2EXT, drmFormatModifier));
alignmentData.push_back(offsetof(VkDrmFormatModifierProperties2EXT, drmFormatModifierPlaneCount));
alignmentData.push_back(FIELD_SIZEOF(VkDrmFormatModifierProperties2EXT, drmFormatModifierPlaneCount));
alignmentData.push_back(offsetof(VkDrmFormatModifierProperties2EXT, drmFormatModifierTilingFeatures));
alignmentData.push_back(FIELD_SIZEOF(VkDrmFormatModifierProperties2EXT, drmFormatModifierTilingFeatures));
alignmentData.push_back(offsetof(VkPipelineRenderingCreateInfo, sType));
alignmentData.push_back(FIELD_SIZEOF(VkPipelineRenderingCreateInfo, sType));
alignmentData.push_back(offsetof(VkPipelineRenderingCreateInfo, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkPipelineRenderingCreateInfo, pNext));
alignmentData.push_back(offsetof(VkPipelineRenderingCreateInfo, viewMask));
alignmentData.push_back(FIELD_SIZEOF(VkPipelineRenderingCreateInfo, viewMask));
alignmentData.push_back(offsetof(VkPipelineRenderingCreateInfo, colorAttachmentCount));
alignmentData.push_back(FIELD_SIZEOF(VkPipelineRenderingCreateInfo, colorAttachmentCount));
alignmentData.push_back(offsetof(VkPipelineRenderingCreateInfo, pColorAttachmentFormats));
alignmentData.push_back(FIELD_SIZEOF(VkPipelineRenderingCreateInfo, pColorAttachmentFormats));
alignmentData.push_back(offsetof(VkPipelineRenderingCreateInfo, depthAttachmentFormat));
alignmentData.push_back(FIELD_SIZEOF(VkPipelineRenderingCreateInfo, depthAttachmentFormat));
alignmentData.push_back(offsetof(VkPipelineRenderingCreateInfo, stencilAttachmentFormat));
alignmentData.push_back(FIELD_SIZEOF(VkPipelineRenderingCreateInfo, stencilAttachmentFormat));

alignmentData.push_back(offsetof(VkRenderingInfo, sType));
alignmentData.push_back(FIELD_SIZEOF(VkRenderingInfo, sType));
alignmentData.push_back(offsetof(VkRenderingInfo, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkRenderingInfo, pNext));
alignmentData.push_back(offsetof(VkRenderingInfo, flags));
alignmentData.push_back(FIELD_SIZEOF(VkRenderingInfo, flags));
alignmentData.push_back(offsetof(VkRenderingInfo, renderArea));
alignmentData.push_back(FIELD_SIZEOF(VkRenderingInfo, renderArea));
alignmentData.push_back(offsetof(VkRenderingInfo, layerCount));
alignmentData.push_back(FIELD_SIZEOF(VkRenderingInfo, layerCount));
alignmentData.push_back(offsetof(VkRenderingInfo, viewMask));
alignmentData.push_back(FIELD_SIZEOF(VkRenderingInfo, viewMask));
alignmentData.push_back(offsetof(VkRenderingInfo, colorAttachmentCount));
alignmentData.push_back(FIELD_SIZEOF(VkRenderingInfo, colorAttachmentCount));
alignmentData.push_back(offsetof(VkRenderingInfo, pColorAttachments));
alignmentData.push_back(FIELD_SIZEOF(VkRenderingInfo, pColorAttachments));
alignmentData.push_back(offsetof(VkRenderingInfo, pDepthAttachment));
alignmentData.push_back(FIELD_SIZEOF(VkRenderingInfo, pDepthAttachment));
alignmentData.push_back(offsetof(VkRenderingInfo, pStencilAttachment));
alignmentData.push_back(FIELD_SIZEOF(VkRenderingInfo, pStencilAttachment));
alignmentData.push_back(offsetof(VkRenderingAttachmentInfo, sType));
alignmentData.push_back(FIELD_SIZEOF(VkRenderingAttachmentInfo, sType));
alignmentData.push_back(offsetof(VkRenderingAttachmentInfo, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkRenderingAttachmentInfo, pNext));
alignmentData.push_back(offsetof(VkRenderingAttachmentInfo, imageView));
alignmentData.push_back(FIELD_SIZEOF(VkRenderingAttachmentInfo, imageView));
alignmentData.push_back(offsetof(VkRenderingAttachmentInfo, imageLayout));
alignmentData.push_back(FIELD_SIZEOF(VkRenderingAttachmentInfo, imageLayout));
alignmentData.push_back(offsetof(VkRenderingAttachmentInfo, resolveMode));
alignmentData.push_back(FIELD_SIZEOF(VkRenderingAttachmentInfo, resolveMode));
alignmentData.push_back(offsetof(VkRenderingAttachmentInfo, resolveImageView));
alignmentData.push_back(FIELD_SIZEOF(VkRenderingAttachmentInfo, resolveImageView));
alignmentData.push_back(offsetof(VkRenderingAttachmentInfo, resolveImageLayout));
alignmentData.push_back(FIELD_SIZEOF(VkRenderingAttachmentInfo, resolveImageLayout));
alignmentData.push_back(offsetof(VkRenderingAttachmentInfo, loadOp));
alignmentData.push_back(FIELD_SIZEOF(VkRenderingAttachmentInfo, loadOp));
alignmentData.push_back(offsetof(VkRenderingAttachmentInfo, storeOp));
alignmentData.push_back(FIELD_SIZEOF(VkRenderingAttachmentInfo, storeOp));
alignmentData.push_back(offsetof(VkRenderingAttachmentInfo, clearValue));
alignmentData.push_back(FIELD_SIZEOF(VkRenderingAttachmentInfo, clearValue));

alignmentData.push_back(offsetof(VkRenderingFragmentShadingRateAttachmentInfoKHR, sType));
alignmentData.push_back(FIELD_SIZEOF(VkRenderingFragmentShadingRateAttachmentInfoKHR, sType));
alignmentData.push_back(offsetof(VkRenderingFragmentShadingRateAttachmentInfoKHR, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkRenderingFragmentShadingRateAttachmentInfoKHR, pNext));
alignmentData.push_back(offsetof(VkRenderingFragmentShadingRateAttachmentInfoKHR, imageView));
alignmentData.push_back(FIELD_SIZEOF(VkRenderingFragmentShadingRateAttachmentInfoKHR, imageView));
alignmentData.push_back(offsetof(VkRenderingFragmentShadingRateAttachmentInfoKHR, imageLayout));
alignmentData.push_back(FIELD_SIZEOF(VkRenderingFragmentShadingRateAttachmentInfoKHR, imageLayout));
alignmentData.push_back(offsetof(VkRenderingFragmentShadingRateAttachmentInfoKHR, shadingRateAttachmentTexelSize));
alignmentData.push_back(FIELD_SIZEOF(VkRenderingFragmentShadingRateAttachmentInfoKHR, shadingRateAttachmentTexelSize));
alignmentData.push_back(offsetof(VkRenderingFragmentDensityMapAttachmentInfoEXT, sType));
alignmentData.push_back(FIELD_SIZEOF(VkRenderingFragmentDensityMapAttachmentInfoEXT, sType));
alignmentData.push_back(offsetof(VkRenderingFragmentDensityMapAttachmentInfoEXT, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkRenderingFragmentDensityMapAttachmentInfoEXT, pNext));
alignmentData.push_back(offsetof(VkRenderingFragmentDensityMapAttachmentInfoEXT, imageView));
alignmentData.push_back(FIELD_SIZEOF(VkRenderingFragmentDensityMapAttachmentInfoEXT, imageView));
alignmentData.push_back(offsetof(VkRenderingFragmentDensityMapAttachmentInfoEXT, imageLayout));
alignmentData.push_back(FIELD_SIZEOF(VkRenderingFragmentDensityMapAttachmentInfoEXT, imageLayout));
alignmentData.push_back(offsetof(VkPhysicalDeviceDynamicRenderingFeatures, sType));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceDynamicRenderingFeatures, sType));
alignmentData.push_back(offsetof(VkPhysicalDeviceDynamicRenderingFeatures, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceDynamicRenderingFeatures, pNext));
alignmentData.push_back(offsetof(VkPhysicalDeviceDynamicRenderingFeatures, dynamicRendering));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceDynamicRenderingFeatures, dynamicRendering));

alignmentData.push_back(offsetof(VkCommandBufferInheritanceRenderingInfo, sType));
alignmentData.push_back(FIELD_SIZEOF(VkCommandBufferInheritanceRenderingInfo, sType));
alignmentData.push_back(offsetof(VkCommandBufferInheritanceRenderingInfo, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkCommandBufferInheritanceRenderingInfo, pNext));
alignmentData.push_back(offsetof(VkCommandBufferInheritanceRenderingInfo, flags));
alignmentData.push_back(FIELD_SIZEOF(VkCommandBufferInheritanceRenderingInfo, flags));
alignmentData.push_back(offsetof(VkCommandBufferInheritanceRenderingInfo, viewMask));
alignmentData.push_back(FIELD_SIZEOF(VkCommandBufferInheritanceRenderingInfo, viewMask));
alignmentData.push_back(offsetof(VkCommandBufferInheritanceRenderingInfo, colorAttachmentCount));
alignmentData.push_back(FIELD_SIZEOF(VkCommandBufferInheritanceRenderingInfo, colorAttachmentCount));
alignmentData.push_back(offsetof(VkCommandBufferInheritanceRenderingInfo, pColorAttachmentFormats));
alignmentData.push_back(FIELD_SIZEOF(VkCommandBufferInheritanceRenderingInfo, pColorAttachmentFormats));
alignmentData.push_back(offsetof(VkCommandBufferInheritanceRenderingInfo, depthAttachmentFormat));
alignmentData.push_back(FIELD_SIZEOF(VkCommandBufferInheritanceRenderingInfo, depthAttachmentFormat));
alignmentData.push_back(offsetof(VkCommandBufferInheritanceRenderingInfo, stencilAttachmentFormat));
alignmentData.push_back(FIELD_SIZEOF(VkCommandBufferInheritanceRenderingInfo, stencilAttachmentFormat));
alignmentData.push_back(offsetof(VkCommandBufferInheritanceRenderingInfo, rasterizationSamples));
alignmentData.push_back(FIELD_SIZEOF(VkCommandBufferInheritanceRenderingInfo, rasterizationSamples));

alignmentData.push_back(offsetof(VkAttachmentSampleCountInfoAMD, sType));
alignmentData.push_back(FIELD_SIZEOF(VkAttachmentSampleCountInfoAMD, sType));
alignmentData.push_back(offsetof(VkAttachmentSampleCountInfoAMD, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkAttachmentSampleCountInfoAMD, pNext));
alignmentData.push_back(offsetof(VkAttachmentSampleCountInfoAMD, colorAttachmentCount));
alignmentData.push_back(FIELD_SIZEOF(VkAttachmentSampleCountInfoAMD, colorAttachmentCount));
alignmentData.push_back(offsetof(VkAttachmentSampleCountInfoAMD, pColorAttachmentSamples));
alignmentData.push_back(FIELD_SIZEOF(VkAttachmentSampleCountInfoAMD, pColorAttachmentSamples));
alignmentData.push_back(offsetof(VkAttachmentSampleCountInfoAMD, depthStencilAttachmentSamples));
alignmentData.push_back(FIELD_SIZEOF(VkAttachmentSampleCountInfoAMD, depthStencilAttachmentSamples));

alignmentData.push_back(offsetof(VkMultiviewPerViewAttributesInfoNVX, sType));
alignmentData.push_back(FIELD_SIZEOF(VkMultiviewPerViewAttributesInfoNVX, sType));
alignmentData.push_back(offsetof(VkMultiviewPerViewAttributesInfoNVX, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkMultiviewPerViewAttributesInfoNVX, pNext));
alignmentData.push_back(offsetof(VkMultiviewPerViewAttributesInfoNVX, perViewAttributes));
alignmentData.push_back(FIELD_SIZEOF(VkMultiviewPerViewAttributesInfoNVX, perViewAttributes));
alignmentData.push_back(offsetof(VkMultiviewPerViewAttributesInfoNVX, perViewAttributesPositionXOnly));
alignmentData.push_back(FIELD_SIZEOF(VkMultiviewPerViewAttributesInfoNVX, perViewAttributesPositionXOnly));
alignmentData.push_back(offsetof(VkPhysicalDeviceImageViewMinLodFeaturesEXT, sType));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceImageViewMinLodFeaturesEXT, sType));
alignmentData.push_back(offsetof(VkPhysicalDeviceImageViewMinLodFeaturesEXT, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceImageViewMinLodFeaturesEXT, pNext));
alignmentData.push_back(offsetof(VkPhysicalDeviceImageViewMinLodFeaturesEXT, minLod));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceImageViewMinLodFeaturesEXT, minLod));
alignmentData.push_back(offsetof(VkImageViewMinLodCreateInfoEXT, sType));
alignmentData.push_back(FIELD_SIZEOF(VkImageViewMinLodCreateInfoEXT, sType));
alignmentData.push_back(offsetof(VkImageViewMinLodCreateInfoEXT, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkImageViewMinLodCreateInfoEXT, pNext));
alignmentData.push_back(offsetof(VkImageViewMinLodCreateInfoEXT, minLod));
alignmentData.push_back(FIELD_SIZEOF(VkImageViewMinLodCreateInfoEXT, minLod));
alignmentData.push_back(offsetof(VkPhysicalDeviceRasterizationOrderAttachmentAccessFeaturesEXT, sType));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceRasterizationOrderAttachmentAccessFeaturesEXT, sType));
alignmentData.push_back(offsetof(VkPhysicalDeviceRasterizationOrderAttachmentAccessFeaturesEXT, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceRasterizationOrderAttachmentAccessFeaturesEXT, pNext));
alignmentData.push_back(offsetof(VkPhysicalDeviceRasterizationOrderAttachmentAccessFeaturesEXT, rasterizationOrderColorAttachmentAccess));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceRasterizationOrderAttachmentAccessFeaturesEXT, rasterizationOrderColorAttachmentAccess));
alignmentData.push_back(offsetof(VkPhysicalDeviceRasterizationOrderAttachmentAccessFeaturesEXT, rasterizationOrderDepthAttachmentAccess));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceRasterizationOrderAttachmentAccessFeaturesEXT, rasterizationOrderDepthAttachmentAccess));
alignmentData.push_back(offsetof(VkPhysicalDeviceRasterizationOrderAttachmentAccessFeaturesEXT, rasterizationOrderStencilAttachmentAccess));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceRasterizationOrderAttachmentAccessFeaturesEXT, rasterizationOrderStencilAttachmentAccess));
alignmentData.push_back(offsetof(VkPhysicalDeviceGraphicsPipelineLibraryFeaturesEXT, sType));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceGraphicsPipelineLibraryFeaturesEXT, sType));
alignmentData.push_back(offsetof(VkPhysicalDeviceGraphicsPipelineLibraryFeaturesEXT, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceGraphicsPipelineLibraryFeaturesEXT, pNext));
alignmentData.push_back(offsetof(VkPhysicalDeviceGraphicsPipelineLibraryFeaturesEXT, graphicsPipelineLibrary));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceGraphicsPipelineLibraryFeaturesEXT, graphicsPipelineLibrary));
alignmentData.push_back(offsetof(VkPhysicalDeviceGraphicsPipelineLibraryPropertiesEXT, sType));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceGraphicsPipelineLibraryPropertiesEXT, sType));
alignmentData.push_back(offsetof(VkPhysicalDeviceGraphicsPipelineLibraryPropertiesEXT, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceGraphicsPipelineLibraryPropertiesEXT, pNext));
alignmentData.push_back(offsetof(VkPhysicalDeviceGraphicsPipelineLibraryPropertiesEXT, graphicsPipelineLibraryFastLinking));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceGraphicsPipelineLibraryPropertiesEXT, graphicsPipelineLibraryFastLinking));
alignmentData.push_back(offsetof(VkPhysicalDeviceGraphicsPipelineLibraryPropertiesEXT, graphicsPipelineLibraryIndependentInterpolationDecoration));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceGraphicsPipelineLibraryPropertiesEXT, graphicsPipelineLibraryIndependentInterpolationDecoration));
alignmentData.push_back(offsetof(VkGraphicsPipelineLibraryCreateInfoEXT, sType));
alignmentData.push_back(FIELD_SIZEOF(VkGraphicsPipelineLibraryCreateInfoEXT, sType));
alignmentData.push_back(offsetof(VkGraphicsPipelineLibraryCreateInfoEXT, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkGraphicsPipelineLibraryCreateInfoEXT, pNext));
alignmentData.push_back(offsetof(VkGraphicsPipelineLibraryCreateInfoEXT, flags));
alignmentData.push_back(FIELD_SIZEOF(VkGraphicsPipelineLibraryCreateInfoEXT, flags));
alignmentData.push_back(offsetof(VkPhysicalDeviceShaderModuleIdentifierFeaturesEXT, sType));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceShaderModuleIdentifierFeaturesEXT, sType));
alignmentData.push_back(offsetof(VkPhysicalDeviceShaderModuleIdentifierFeaturesEXT, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceShaderModuleIdentifierFeaturesEXT, pNext));
alignmentData.push_back(offsetof(VkPhysicalDeviceShaderModuleIdentifierFeaturesEXT, shaderModuleIdentifier));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceShaderModuleIdentifierFeaturesEXT, shaderModuleIdentifier));
alignmentData.push_back(offsetof(VkPhysicalDeviceShaderModuleIdentifierPropertiesEXT, sType));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceShaderModuleIdentifierPropertiesEXT, sType));
alignmentData.push_back(offsetof(VkPhysicalDeviceShaderModuleIdentifierPropertiesEXT, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceShaderModuleIdentifierPropertiesEXT, pNext));
alignmentData.push_back(offsetof(VkPhysicalDeviceShaderModuleIdentifierPropertiesEXT, shaderModuleIdentifierAlgorithmUUID));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceShaderModuleIdentifierPropertiesEXT, shaderModuleIdentifierAlgorithmUUID));
alignmentData.push_back(offsetof(VkPipelineShaderStageModuleIdentifierCreateInfoEXT, sType));
alignmentData.push_back(FIELD_SIZEOF(VkPipelineShaderStageModuleIdentifierCreateInfoEXT, sType));
alignmentData.push_back(offsetof(VkPipelineShaderStageModuleIdentifierCreateInfoEXT, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkPipelineShaderStageModuleIdentifierCreateInfoEXT, pNext));
alignmentData.push_back(offsetof(VkPipelineShaderStageModuleIdentifierCreateInfoEXT, identifierSize));
alignmentData.push_back(FIELD_SIZEOF(VkPipelineShaderStageModuleIdentifierCreateInfoEXT, identifierSize));
alignmentData.push_back(offsetof(VkPipelineShaderStageModuleIdentifierCreateInfoEXT, pIdentifier));
alignmentData.push_back(FIELD_SIZEOF(VkPipelineShaderStageModuleIdentifierCreateInfoEXT, pIdentifier));
alignmentData.push_back(offsetof(VkShaderModuleIdentifierEXT, sType));
alignmentData.push_back(FIELD_SIZEOF(VkShaderModuleIdentifierEXT, sType));
alignmentData.push_back(offsetof(VkShaderModuleIdentifierEXT, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkShaderModuleIdentifierEXT, pNext));
alignmentData.push_back(offsetof(VkShaderModuleIdentifierEXT, identifierSize));
alignmentData.push_back(FIELD_SIZEOF(VkShaderModuleIdentifierEXT, identifierSize));
alignmentData.push_back(offsetof(VkShaderModuleIdentifierEXT, identifier));
alignmentData.push_back(FIELD_SIZEOF(VkShaderModuleIdentifierEXT, identifier));
alignmentData.push_back(offsetof(VkImageCompressionControlEXT, sType));
alignmentData.push_back(FIELD_SIZEOF(VkImageCompressionControlEXT, sType));
alignmentData.push_back(offsetof(VkImageCompressionControlEXT, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkImageCompressionControlEXT, pNext));
alignmentData.push_back(offsetof(VkImageCompressionControlEXT, flags));
alignmentData.push_back(FIELD_SIZEOF(VkImageCompressionControlEXT, flags));
alignmentData.push_back(offsetof(VkImageCompressionControlEXT, compressionControlPlaneCount));
alignmentData.push_back(FIELD_SIZEOF(VkImageCompressionControlEXT, compressionControlPlaneCount));
alignmentData.push_back(offsetof(VkImageCompressionControlEXT, pFixedRateFlags));
alignmentData.push_back(FIELD_SIZEOF(VkImageCompressionControlEXT, pFixedRateFlags));
alignmentData.push_back(offsetof(VkPhysicalDeviceImageCompressionControlFeaturesEXT, sType));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceImageCompressionControlFeaturesEXT, sType));
alignmentData.push_back(offsetof(VkPhysicalDeviceImageCompressionControlFeaturesEXT, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceImageCompressionControlFeaturesEXT, pNext));
alignmentData.push_back(offsetof(VkPhysicalDeviceImageCompressionControlFeaturesEXT, imageCompressionControl));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceImageCompressionControlFeaturesEXT, imageCompressionControl));
alignmentData.push_back(offsetof(VkImageCompressionPropertiesEXT, sType));
alignmentData.push_back(FIELD_SIZEOF(VkImageCompressionPropertiesEXT, sType));
alignmentData.push_back(offsetof(VkImageCompressionPropertiesEXT, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkImageCompressionPropertiesEXT, pNext));
alignmentData.push_back(offsetof(VkImageCompressionPropertiesEXT, imageCompressionFlags));
alignmentData.push_back(FIELD_SIZEOF(VkImageCompressionPropertiesEXT, imageCompressionFlags));
alignmentData.push_back(offsetof(VkImageCompressionPropertiesEXT, imageCompressionFixedRateFlags));
alignmentData.push_back(FIELD_SIZEOF(VkImageCompressionPropertiesEXT, imageCompressionFixedRateFlags));
alignmentData.push_back(offsetof(VkPhysicalDeviceImageCompressionControlSwapchainFeaturesEXT, sType));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceImageCompressionControlSwapchainFeaturesEXT, sType));
alignmentData.push_back(offsetof(VkPhysicalDeviceImageCompressionControlSwapchainFeaturesEXT, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceImageCompressionControlSwapchainFeaturesEXT, pNext));
alignmentData.push_back(offsetof(VkPhysicalDeviceImageCompressionControlSwapchainFeaturesEXT, imageCompressionControlSwapchain));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceImageCompressionControlSwapchainFeaturesEXT, imageCompressionControlSwapchain));
alignmentData.push_back(offsetof(VkRenderPassCreationControlEXT, sType));
alignmentData.push_back(FIELD_SIZEOF(VkRenderPassCreationControlEXT, sType));
alignmentData.push_back(offsetof(VkRenderPassCreationControlEXT, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkRenderPassCreationControlEXT, pNext));
alignmentData.push_back(offsetof(VkRenderPassCreationControlEXT, disallowMerging));
alignmentData.push_back(FIELD_SIZEOF(VkRenderPassCreationControlEXT, disallowMerging));
alignmentData.push_back(offsetof(VkRenderPassCreationFeedbackInfoEXT, postMergeSubpassCount));
alignmentData.push_back(FIELD_SIZEOF(VkRenderPassCreationFeedbackInfoEXT, postMergeSubpassCount));
alignmentData.push_back(offsetof(VkRenderPassCreationFeedbackCreateInfoEXT, sType));
alignmentData.push_back(FIELD_SIZEOF(VkRenderPassCreationFeedbackCreateInfoEXT, sType));
alignmentData.push_back(offsetof(VkRenderPassCreationFeedbackCreateInfoEXT, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkRenderPassCreationFeedbackCreateInfoEXT, pNext));
alignmentData.push_back(offsetof(VkRenderPassCreationFeedbackCreateInfoEXT, pRenderPassFeedback));
alignmentData.push_back(FIELD_SIZEOF(VkRenderPassCreationFeedbackCreateInfoEXT, pRenderPassFeedback));
alignmentData.push_back(offsetof(VkRenderPassSubpassFeedbackInfoEXT, subpassMergeStatus));
alignmentData.push_back(FIELD_SIZEOF(VkRenderPassSubpassFeedbackInfoEXT, subpassMergeStatus));
alignmentData.push_back(offsetof(VkRenderPassSubpassFeedbackInfoEXT, description));
alignmentData.push_back(FIELD_SIZEOF(VkRenderPassSubpassFeedbackInfoEXT, description));
alignmentData.push_back(offsetof(VkRenderPassSubpassFeedbackInfoEXT, postMergeIndex));
alignmentData.push_back(FIELD_SIZEOF(VkRenderPassSubpassFeedbackInfoEXT, postMergeIndex));
alignmentData.push_back(offsetof(VkRenderPassSubpassFeedbackCreateInfoEXT, sType));
alignmentData.push_back(FIELD_SIZEOF(VkRenderPassSubpassFeedbackCreateInfoEXT, sType));
alignmentData.push_back(offsetof(VkRenderPassSubpassFeedbackCreateInfoEXT, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkRenderPassSubpassFeedbackCreateInfoEXT, pNext));
alignmentData.push_back(offsetof(VkRenderPassSubpassFeedbackCreateInfoEXT, pSubpassFeedback));
alignmentData.push_back(FIELD_SIZEOF(VkRenderPassSubpassFeedbackCreateInfoEXT, pSubpassFeedback));
alignmentData.push_back(offsetof(VkPhysicalDeviceSubpassMergeFeedbackFeaturesEXT, sType));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceSubpassMergeFeedbackFeaturesEXT, sType));
alignmentData.push_back(offsetof(VkPhysicalDeviceSubpassMergeFeedbackFeaturesEXT, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceSubpassMergeFeedbackFeaturesEXT, pNext));
alignmentData.push_back(offsetof(VkPhysicalDeviceSubpassMergeFeedbackFeaturesEXT, subpassMergeFeedback));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceSubpassMergeFeedbackFeaturesEXT, subpassMergeFeedback));
alignmentData.push_back(offsetof(VkPipelinePropertiesIdentifierEXT, sType));
alignmentData.push_back(FIELD_SIZEOF(VkPipelinePropertiesIdentifierEXT, sType));
alignmentData.push_back(offsetof(VkPipelinePropertiesIdentifierEXT, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkPipelinePropertiesIdentifierEXT, pNext));
alignmentData.push_back(offsetof(VkPipelinePropertiesIdentifierEXT, pipelineIdentifier));
alignmentData.push_back(FIELD_SIZEOF(VkPipelinePropertiesIdentifierEXT, pipelineIdentifier));
alignmentData.push_back(offsetof(VkPhysicalDevicePipelinePropertiesFeaturesEXT, sType));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDevicePipelinePropertiesFeaturesEXT, sType));
alignmentData.push_back(offsetof(VkPhysicalDevicePipelinePropertiesFeaturesEXT, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDevicePipelinePropertiesFeaturesEXT, pNext));
alignmentData.push_back(offsetof(VkPhysicalDevicePipelinePropertiesFeaturesEXT, pipelinePropertiesIdentifier));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDevicePipelinePropertiesFeaturesEXT, pipelinePropertiesIdentifier));
alignmentData.push_back(offsetof(VkPhysicalDeviceNonSeamlessCubeMapFeaturesEXT, sType));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceNonSeamlessCubeMapFeaturesEXT, sType));
alignmentData.push_back(offsetof(VkPhysicalDeviceNonSeamlessCubeMapFeaturesEXT, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceNonSeamlessCubeMapFeaturesEXT, pNext));
alignmentData.push_back(offsetof(VkPhysicalDeviceNonSeamlessCubeMapFeaturesEXT, nonSeamlessCubeMap));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceNonSeamlessCubeMapFeaturesEXT, nonSeamlessCubeMap));
alignmentData.push_back(offsetof(VkPhysicalDevicePipelineRobustnessFeaturesEXT, sType));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDevicePipelineRobustnessFeaturesEXT, sType));
alignmentData.push_back(offsetof(VkPhysicalDevicePipelineRobustnessFeaturesEXT, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDevicePipelineRobustnessFeaturesEXT, pNext));
alignmentData.push_back(offsetof(VkPhysicalDevicePipelineRobustnessFeaturesEXT, pipelineRobustness));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDevicePipelineRobustnessFeaturesEXT, pipelineRobustness));
alignmentData.push_back(offsetof(VkPipelineRobustnessCreateInfoEXT, sType));
alignmentData.push_back(FIELD_SIZEOF(VkPipelineRobustnessCreateInfoEXT, sType));
alignmentData.push_back(offsetof(VkPipelineRobustnessCreateInfoEXT, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkPipelineRobustnessCreateInfoEXT, pNext));
alignmentData.push_back(offsetof(VkPipelineRobustnessCreateInfoEXT, storageBuffers));
alignmentData.push_back(FIELD_SIZEOF(VkPipelineRobustnessCreateInfoEXT, storageBuffers));
alignmentData.push_back(offsetof(VkPipelineRobustnessCreateInfoEXT, uniformBuffers));
alignmentData.push_back(FIELD_SIZEOF(VkPipelineRobustnessCreateInfoEXT, uniformBuffers));
alignmentData.push_back(offsetof(VkPipelineRobustnessCreateInfoEXT, vertexInputs));
alignmentData.push_back(FIELD_SIZEOF(VkPipelineRobustnessCreateInfoEXT, vertexInputs));
alignmentData.push_back(offsetof(VkPipelineRobustnessCreateInfoEXT, images));
alignmentData.push_back(FIELD_SIZEOF(VkPipelineRobustnessCreateInfoEXT, images));
alignmentData.push_back(offsetof(VkPhysicalDevicePipelineRobustnessPropertiesEXT, sType));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDevicePipelineRobustnessPropertiesEXT, sType));
alignmentData.push_back(offsetof(VkPhysicalDevicePipelineRobustnessPropertiesEXT, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDevicePipelineRobustnessPropertiesEXT, pNext));
alignmentData.push_back(offsetof(VkPhysicalDevicePipelineRobustnessPropertiesEXT, defaultRobustnessStorageBuffers));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDevicePipelineRobustnessPropertiesEXT, defaultRobustnessStorageBuffers));
alignmentData.push_back(offsetof(VkPhysicalDevicePipelineRobustnessPropertiesEXT, defaultRobustnessUniformBuffers));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDevicePipelineRobustnessPropertiesEXT, defaultRobustnessUniformBuffers));
alignmentData.push_back(offsetof(VkPhysicalDevicePipelineRobustnessPropertiesEXT, defaultRobustnessVertexInputs));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDevicePipelineRobustnessPropertiesEXT, defaultRobustnessVertexInputs));
alignmentData.push_back(offsetof(VkPhysicalDevicePipelineRobustnessPropertiesEXT, defaultRobustnessImages));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDevicePipelineRobustnessPropertiesEXT, defaultRobustnessImages));
alignmentData.push_back(offsetof(VkSurfacePresentModeEXT, sType));
alignmentData.push_back(FIELD_SIZEOF(VkSurfacePresentModeEXT, sType));
alignmentData.push_back(offsetof(VkSurfacePresentModeEXT, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkSurfacePresentModeEXT, pNext));
alignmentData.push_back(offsetof(VkSurfacePresentModeEXT, presentMode));
alignmentData.push_back(FIELD_SIZEOF(VkSurfacePresentModeEXT, presentMode));
alignmentData.push_back(offsetof(VkSurfacePresentScalingCapabilitiesEXT, sType));
alignmentData.push_back(FIELD_SIZEOF(VkSurfacePresentScalingCapabilitiesEXT, sType));
alignmentData.push_back(offsetof(VkSurfacePresentScalingCapabilitiesEXT, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkSurfacePresentScalingCapabilitiesEXT, pNext));
alignmentData.push_back(offsetof(VkSurfacePresentScalingCapabilitiesEXT, supportedPresentScaling));
alignmentData.push_back(FIELD_SIZEOF(VkSurfacePresentScalingCapabilitiesEXT, supportedPresentScaling));
alignmentData.push_back(offsetof(VkSurfacePresentScalingCapabilitiesEXT, supportedPresentGravityX));
alignmentData.push_back(FIELD_SIZEOF(VkSurfacePresentScalingCapabilitiesEXT, supportedPresentGravityX));
alignmentData.push_back(offsetof(VkSurfacePresentScalingCapabilitiesEXT, supportedPresentGravityY));
alignmentData.push_back(FIELD_SIZEOF(VkSurfacePresentScalingCapabilitiesEXT, supportedPresentGravityY));
alignmentData.push_back(offsetof(VkSurfacePresentScalingCapabilitiesEXT, minScaledImageExtent));
alignmentData.push_back(FIELD_SIZEOF(VkSurfacePresentScalingCapabilitiesEXT, minScaledImageExtent));
alignmentData.push_back(offsetof(VkSurfacePresentScalingCapabilitiesEXT, maxScaledImageExtent));
alignmentData.push_back(FIELD_SIZEOF(VkSurfacePresentScalingCapabilitiesEXT, maxScaledImageExtent));
alignmentData.push_back(offsetof(VkSurfacePresentModeCompatibilityEXT, sType));
alignmentData.push_back(FIELD_SIZEOF(VkSurfacePresentModeCompatibilityEXT, sType));
alignmentData.push_back(offsetof(VkSurfacePresentModeCompatibilityEXT, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkSurfacePresentModeCompatibilityEXT, pNext));
alignmentData.push_back(offsetof(VkSurfacePresentModeCompatibilityEXT, presentModeCount));
alignmentData.push_back(FIELD_SIZEOF(VkSurfacePresentModeCompatibilityEXT, presentModeCount));
alignmentData.push_back(offsetof(VkSurfacePresentModeCompatibilityEXT, pPresentModes));
alignmentData.push_back(FIELD_SIZEOF(VkSurfacePresentModeCompatibilityEXT, pPresentModes));
alignmentData.push_back(offsetof(VkPhysicalDeviceSwapchainMaintenance1FeaturesEXT, sType));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceSwapchainMaintenance1FeaturesEXT, sType));
alignmentData.push_back(offsetof(VkPhysicalDeviceSwapchainMaintenance1FeaturesEXT, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceSwapchainMaintenance1FeaturesEXT, pNext));
alignmentData.push_back(offsetof(VkPhysicalDeviceSwapchainMaintenance1FeaturesEXT, swapchainMaintenance1));
alignmentData.push_back(FIELD_SIZEOF(VkPhysicalDeviceSwapchainMaintenance1FeaturesEXT, swapchainMaintenance1));
alignmentData.push_back(offsetof(VkSwapchainPresentFenceInfoEXT, sType));
alignmentData.push_back(FIELD_SIZEOF(VkSwapchainPresentFenceInfoEXT, sType));
alignmentData.push_back(offsetof(VkSwapchainPresentFenceInfoEXT, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkSwapchainPresentFenceInfoEXT, pNext));
alignmentData.push_back(offsetof(VkSwapchainPresentFenceInfoEXT, swapchainCount));
alignmentData.push_back(FIELD_SIZEOF(VkSwapchainPresentFenceInfoEXT, swapchainCount));
alignmentData.push_back(offsetof(VkSwapchainPresentFenceInfoEXT, pFences));
alignmentData.push_back(FIELD_SIZEOF(VkSwapchainPresentFenceInfoEXT, pFences));
alignmentData.push_back(offsetof(VkSwapchainPresentModesCreateInfoEXT, sType));
alignmentData.push_back(FIELD_SIZEOF(VkSwapchainPresentModesCreateInfoEXT, sType));
alignmentData.push_back(offsetof(VkSwapchainPresentModesCreateInfoEXT, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkSwapchainPresentModesCreateInfoEXT, pNext));
alignmentData.push_back(offsetof(VkSwapchainPresentModesCreateInfoEXT, presentModeCount));
alignmentData.push_back(FIELD_SIZEOF(VkSwapchainPresentModesCreateInfoEXT, presentModeCount));
alignmentData.push_back(offsetof(VkSwapchainPresentModesCreateInfoEXT, pPresentModes));
alignmentData.push_back(FIELD_SIZEOF(VkSwapchainPresentModesCreateInfoEXT, pPresentModes));
alignmentData.push_back(offsetof(VkSwapchainPresentModeInfoEXT, sType));
alignmentData.push_back(FIELD_SIZEOF(VkSwapchainPresentModeInfoEXT, sType));
alignmentData.push_back(offsetof(VkSwapchainPresentModeInfoEXT, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkSwapchainPresentModeInfoEXT, pNext));
alignmentData.push_back(offsetof(VkSwapchainPresentModeInfoEXT, swapchainCount));
alignmentData.push_back(FIELD_SIZEOF(VkSwapchainPresentModeInfoEXT, swapchainCount));
alignmentData.push_back(offsetof(VkSwapchainPresentModeInfoEXT, pPresentModes));
alignmentData.push_back(FIELD_SIZEOF(VkSwapchainPresentModeInfoEXT, pPresentModes));
alignmentData.push_back(offsetof(VkSwapchainPresentScalingCreateInfoEXT, sType));
alignmentData.push_back(FIELD_SIZEOF(VkSwapchainPresentScalingCreateInfoEXT, sType));
alignmentData.push_back(offsetof(VkSwapchainPresentScalingCreateInfoEXT, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkSwapchainPresentScalingCreateInfoEXT, pNext));
alignmentData.push_back(offsetof(VkSwapchainPresentScalingCreateInfoEXT, scalingBehavior));
alignmentData.push_back(FIELD_SIZEOF(VkSwapchainPresentScalingCreateInfoEXT, scalingBehavior));
alignmentData.push_back(offsetof(VkSwapchainPresentScalingCreateInfoEXT, presentGravityX));
alignmentData.push_back(FIELD_SIZEOF(VkSwapchainPresentScalingCreateInfoEXT, presentGravityX));
alignmentData.push_back(offsetof(VkSwapchainPresentScalingCreateInfoEXT, presentGravityY));
alignmentData.push_back(FIELD_SIZEOF(VkSwapchainPresentScalingCreateInfoEXT, presentGravityY));
alignmentData.push_back(offsetof(VkReleaseSwapchainImagesInfoEXT, sType));
alignmentData.push_back(FIELD_SIZEOF(VkReleaseSwapchainImagesInfoEXT, sType));
alignmentData.push_back(offsetof(VkReleaseSwapchainImagesInfoEXT, pNext));
alignmentData.push_back(FIELD_SIZEOF(VkReleaseSwapchainImagesInfoEXT, pNext));
alignmentData.push_back(offsetof(VkReleaseSwapchainImagesInfoEXT, swapchain));
alignmentData.push_back(FIELD_SIZEOF(VkReleaseSwapchainImagesInfoEXT, swapchain));
alignmentData.push_back(offsetof(VkReleaseSwapchainImagesInfoEXT, imageIndexCount));
alignmentData.push_back(FIELD_SIZEOF(VkReleaseSwapchainImagesInfoEXT, imageIndexCount));
alignmentData.push_back(offsetof(VkReleaseSwapchainImagesInfoEXT, pImageIndices));
alignmentData.push_back(FIELD_SIZEOF(VkReleaseSwapchainImagesInfoEXT, pImageIndices));
}

